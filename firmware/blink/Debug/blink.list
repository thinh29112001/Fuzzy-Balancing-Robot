
blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d40  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d0  08009e50  08009e50  00019e50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a320  0800a320  00020238  2**0
                  CONTENTS
  4 .ARM          00000000  0800a320  0800a320  00020238  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a320  0800a320  00020238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a320  0800a320  0001a320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a324  0800a324  0001a324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000238  20000000  0800a328  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000054c  20000238  0800a560  00020238  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000784  0800a560  00020784  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014bf6  00000000  00000000  00020261  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000027df  00000000  00000000  00034e57  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001328  00000000  00000000  00037638  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001230  00000000  00000000  00038960  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000193d7  00000000  00000000  00039b90  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e0e6  00000000  00000000  00052f67  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008f569  00000000  00000000  0006104d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f05b6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c94  00000000  00000000  000f0634  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000238 	.word	0x20000238
 800012c:	00000000 	.word	0x00000000
 8000130:	08009e38 	.word	0x08009e38

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000023c 	.word	0x2000023c
 800014c:	08009e38 	.word	0x08009e38

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2f>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a40:	bf24      	itt	cs
 8000a42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a4a:	d90d      	bls.n	8000a68 <__aeabi_d2f+0x30>
 8000a4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a60:	bf08      	it	eq
 8000a62:	f020 0001 	biceq.w	r0, r0, #1
 8000a66:	4770      	bx	lr
 8000a68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a6c:	d121      	bne.n	8000ab2 <__aeabi_d2f+0x7a>
 8000a6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a72:	bfbc      	itt	lt
 8000a74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	4770      	bxlt	lr
 8000a7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a82:	f1c2 0218 	rsb	r2, r2, #24
 8000a86:	f1c2 0c20 	rsb	ip, r2, #32
 8000a8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a92:	bf18      	it	ne
 8000a94:	f040 0001 	orrne.w	r0, r0, #1
 8000a98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aa0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000aa4:	ea40 000c 	orr.w	r0, r0, ip
 8000aa8:	fa23 f302 	lsr.w	r3, r3, r2
 8000aac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ab0:	e7cc      	b.n	8000a4c <__aeabi_d2f+0x14>
 8000ab2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ab6:	d107      	bne.n	8000ac8 <__aeabi_d2f+0x90>
 8000ab8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000abc:	bf1e      	ittt	ne
 8000abe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ac2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ac6:	4770      	bxne	lr
 8000ac8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000acc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ad0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_frsub>:
 8000ad8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000adc:	e002      	b.n	8000ae4 <__addsf3>
 8000ade:	bf00      	nop

08000ae0 <__aeabi_fsub>:
 8000ae0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ae4 <__addsf3>:
 8000ae4:	0042      	lsls	r2, r0, #1
 8000ae6:	bf1f      	itttt	ne
 8000ae8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000aec:	ea92 0f03 	teqne	r2, r3
 8000af0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000af4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000af8:	d06a      	beq.n	8000bd0 <__addsf3+0xec>
 8000afa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000afe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b02:	bfc1      	itttt	gt
 8000b04:	18d2      	addgt	r2, r2, r3
 8000b06:	4041      	eorgt	r1, r0
 8000b08:	4048      	eorgt	r0, r1
 8000b0a:	4041      	eorgt	r1, r0
 8000b0c:	bfb8      	it	lt
 8000b0e:	425b      	neglt	r3, r3
 8000b10:	2b19      	cmp	r3, #25
 8000b12:	bf88      	it	hi
 8000b14:	4770      	bxhi	lr
 8000b16:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b1a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b1e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4240      	negne	r0, r0
 8000b26:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b2e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b32:	bf18      	it	ne
 8000b34:	4249      	negne	r1, r1
 8000b36:	ea92 0f03 	teq	r2, r3
 8000b3a:	d03f      	beq.n	8000bbc <__addsf3+0xd8>
 8000b3c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b40:	fa41 fc03 	asr.w	ip, r1, r3
 8000b44:	eb10 000c 	adds.w	r0, r0, ip
 8000b48:	f1c3 0320 	rsb	r3, r3, #32
 8000b4c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b50:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b54:	d502      	bpl.n	8000b5c <__addsf3+0x78>
 8000b56:	4249      	negs	r1, r1
 8000b58:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b5c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b60:	d313      	bcc.n	8000b8a <__addsf3+0xa6>
 8000b62:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b66:	d306      	bcc.n	8000b76 <__addsf3+0x92>
 8000b68:	0840      	lsrs	r0, r0, #1
 8000b6a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b6e:	f102 0201 	add.w	r2, r2, #1
 8000b72:	2afe      	cmp	r2, #254	; 0xfe
 8000b74:	d251      	bcs.n	8000c1a <__addsf3+0x136>
 8000b76:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b7a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b7e:	bf08      	it	eq
 8000b80:	f020 0001 	biceq.w	r0, r0, #1
 8000b84:	ea40 0003 	orr.w	r0, r0, r3
 8000b88:	4770      	bx	lr
 8000b8a:	0049      	lsls	r1, r1, #1
 8000b8c:	eb40 0000 	adc.w	r0, r0, r0
 8000b90:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b94:	f1a2 0201 	sub.w	r2, r2, #1
 8000b98:	d1ed      	bne.n	8000b76 <__addsf3+0x92>
 8000b9a:	fab0 fc80 	clz	ip, r0
 8000b9e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000ba2:	ebb2 020c 	subs.w	r2, r2, ip
 8000ba6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000baa:	bfaa      	itet	ge
 8000bac:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bb0:	4252      	neglt	r2, r2
 8000bb2:	4318      	orrge	r0, r3
 8000bb4:	bfbc      	itt	lt
 8000bb6:	40d0      	lsrlt	r0, r2
 8000bb8:	4318      	orrlt	r0, r3
 8000bba:	4770      	bx	lr
 8000bbc:	f092 0f00 	teq	r2, #0
 8000bc0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bc4:	bf06      	itte	eq
 8000bc6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bca:	3201      	addeq	r2, #1
 8000bcc:	3b01      	subne	r3, #1
 8000bce:	e7b5      	b.n	8000b3c <__addsf3+0x58>
 8000bd0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bd8:	bf18      	it	ne
 8000bda:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bde:	d021      	beq.n	8000c24 <__addsf3+0x140>
 8000be0:	ea92 0f03 	teq	r2, r3
 8000be4:	d004      	beq.n	8000bf0 <__addsf3+0x10c>
 8000be6:	f092 0f00 	teq	r2, #0
 8000bea:	bf08      	it	eq
 8000bec:	4608      	moveq	r0, r1
 8000bee:	4770      	bx	lr
 8000bf0:	ea90 0f01 	teq	r0, r1
 8000bf4:	bf1c      	itt	ne
 8000bf6:	2000      	movne	r0, #0
 8000bf8:	4770      	bxne	lr
 8000bfa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bfe:	d104      	bne.n	8000c0a <__addsf3+0x126>
 8000c00:	0040      	lsls	r0, r0, #1
 8000c02:	bf28      	it	cs
 8000c04:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c08:	4770      	bx	lr
 8000c0a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c0e:	bf3c      	itt	cc
 8000c10:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c14:	4770      	bxcc	lr
 8000c16:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c1a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c22:	4770      	bx	lr
 8000c24:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c28:	bf16      	itet	ne
 8000c2a:	4608      	movne	r0, r1
 8000c2c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c30:	4601      	movne	r1, r0
 8000c32:	0242      	lsls	r2, r0, #9
 8000c34:	bf06      	itte	eq
 8000c36:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c3a:	ea90 0f01 	teqeq	r0, r1
 8000c3e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c42:	4770      	bx	lr

08000c44 <__aeabi_ui2f>:
 8000c44:	f04f 0300 	mov.w	r3, #0
 8000c48:	e004      	b.n	8000c54 <__aeabi_i2f+0x8>
 8000c4a:	bf00      	nop

08000c4c <__aeabi_i2f>:
 8000c4c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c50:	bf48      	it	mi
 8000c52:	4240      	negmi	r0, r0
 8000c54:	ea5f 0c00 	movs.w	ip, r0
 8000c58:	bf08      	it	eq
 8000c5a:	4770      	bxeq	lr
 8000c5c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c60:	4601      	mov	r1, r0
 8000c62:	f04f 0000 	mov.w	r0, #0
 8000c66:	e01c      	b.n	8000ca2 <__aeabi_l2f+0x2a>

08000c68 <__aeabi_ul2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f04f 0300 	mov.w	r3, #0
 8000c74:	e00a      	b.n	8000c8c <__aeabi_l2f+0x14>
 8000c76:	bf00      	nop

08000c78 <__aeabi_l2f>:
 8000c78:	ea50 0201 	orrs.w	r2, r0, r1
 8000c7c:	bf08      	it	eq
 8000c7e:	4770      	bxeq	lr
 8000c80:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c84:	d502      	bpl.n	8000c8c <__aeabi_l2f+0x14>
 8000c86:	4240      	negs	r0, r0
 8000c88:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c8c:	ea5f 0c01 	movs.w	ip, r1
 8000c90:	bf02      	ittt	eq
 8000c92:	4684      	moveq	ip, r0
 8000c94:	4601      	moveq	r1, r0
 8000c96:	2000      	moveq	r0, #0
 8000c98:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c9c:	bf08      	it	eq
 8000c9e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ca2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000ca6:	fabc f28c 	clz	r2, ip
 8000caa:	3a08      	subs	r2, #8
 8000cac:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cb0:	db10      	blt.n	8000cd4 <__aeabi_l2f+0x5c>
 8000cb2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cb6:	4463      	add	r3, ip
 8000cb8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cbc:	f1c2 0220 	rsb	r2, r2, #32
 8000cc0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cc4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cc8:	eb43 0002 	adc.w	r0, r3, r2
 8000ccc:	bf08      	it	eq
 8000cce:	f020 0001 	biceq.w	r0, r0, #1
 8000cd2:	4770      	bx	lr
 8000cd4:	f102 0220 	add.w	r2, r2, #32
 8000cd8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cdc:	f1c2 0220 	rsb	r2, r2, #32
 8000ce0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ce4:	fa21 f202 	lsr.w	r2, r1, r2
 8000ce8:	eb43 0002 	adc.w	r0, r3, r2
 8000cec:	bf08      	it	eq
 8000cee:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cf2:	4770      	bx	lr

08000cf4 <__aeabi_fmul>:
 8000cf4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cf8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cfc:	bf1e      	ittt	ne
 8000cfe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d02:	ea92 0f0c 	teqne	r2, ip
 8000d06:	ea93 0f0c 	teqne	r3, ip
 8000d0a:	d06f      	beq.n	8000dec <__aeabi_fmul+0xf8>
 8000d0c:	441a      	add	r2, r3
 8000d0e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d12:	0240      	lsls	r0, r0, #9
 8000d14:	bf18      	it	ne
 8000d16:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d1a:	d01e      	beq.n	8000d5a <__aeabi_fmul+0x66>
 8000d1c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d20:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d24:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d28:	fba0 3101 	umull	r3, r1, r0, r1
 8000d2c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d30:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d34:	bf3e      	ittt	cc
 8000d36:	0049      	lslcc	r1, r1, #1
 8000d38:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d3c:	005b      	lslcc	r3, r3, #1
 8000d3e:	ea40 0001 	orr.w	r0, r0, r1
 8000d42:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d46:	2afd      	cmp	r2, #253	; 0xfd
 8000d48:	d81d      	bhi.n	8000d86 <__aeabi_fmul+0x92>
 8000d4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d4e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d52:	bf08      	it	eq
 8000d54:	f020 0001 	biceq.w	r0, r0, #1
 8000d58:	4770      	bx	lr
 8000d5a:	f090 0f00 	teq	r0, #0
 8000d5e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d62:	bf08      	it	eq
 8000d64:	0249      	lsleq	r1, r1, #9
 8000d66:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d6a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d6e:	3a7f      	subs	r2, #127	; 0x7f
 8000d70:	bfc2      	ittt	gt
 8000d72:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d76:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d7a:	4770      	bxgt	lr
 8000d7c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d80:	f04f 0300 	mov.w	r3, #0
 8000d84:	3a01      	subs	r2, #1
 8000d86:	dc5d      	bgt.n	8000e44 <__aeabi_fmul+0x150>
 8000d88:	f112 0f19 	cmn.w	r2, #25
 8000d8c:	bfdc      	itt	le
 8000d8e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d92:	4770      	bxle	lr
 8000d94:	f1c2 0200 	rsb	r2, r2, #0
 8000d98:	0041      	lsls	r1, r0, #1
 8000d9a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d9e:	f1c2 0220 	rsb	r2, r2, #32
 8000da2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000da6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000daa:	f140 0000 	adc.w	r0, r0, #0
 8000dae:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000db2:	bf08      	it	eq
 8000db4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000db8:	4770      	bx	lr
 8000dba:	f092 0f00 	teq	r2, #0
 8000dbe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dc2:	bf02      	ittt	eq
 8000dc4:	0040      	lsleq	r0, r0, #1
 8000dc6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dca:	3a01      	subeq	r2, #1
 8000dcc:	d0f9      	beq.n	8000dc2 <__aeabi_fmul+0xce>
 8000dce:	ea40 000c 	orr.w	r0, r0, ip
 8000dd2:	f093 0f00 	teq	r3, #0
 8000dd6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dda:	bf02      	ittt	eq
 8000ddc:	0049      	lsleq	r1, r1, #1
 8000dde:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000de2:	3b01      	subeq	r3, #1
 8000de4:	d0f9      	beq.n	8000dda <__aeabi_fmul+0xe6>
 8000de6:	ea41 010c 	orr.w	r1, r1, ip
 8000dea:	e78f      	b.n	8000d0c <__aeabi_fmul+0x18>
 8000dec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000df0:	ea92 0f0c 	teq	r2, ip
 8000df4:	bf18      	it	ne
 8000df6:	ea93 0f0c 	teqne	r3, ip
 8000dfa:	d00a      	beq.n	8000e12 <__aeabi_fmul+0x11e>
 8000dfc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e00:	bf18      	it	ne
 8000e02:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e06:	d1d8      	bne.n	8000dba <__aeabi_fmul+0xc6>
 8000e08:	ea80 0001 	eor.w	r0, r0, r1
 8000e0c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e10:	4770      	bx	lr
 8000e12:	f090 0f00 	teq	r0, #0
 8000e16:	bf17      	itett	ne
 8000e18:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e1c:	4608      	moveq	r0, r1
 8000e1e:	f091 0f00 	teqne	r1, #0
 8000e22:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e26:	d014      	beq.n	8000e52 <__aeabi_fmul+0x15e>
 8000e28:	ea92 0f0c 	teq	r2, ip
 8000e2c:	d101      	bne.n	8000e32 <__aeabi_fmul+0x13e>
 8000e2e:	0242      	lsls	r2, r0, #9
 8000e30:	d10f      	bne.n	8000e52 <__aeabi_fmul+0x15e>
 8000e32:	ea93 0f0c 	teq	r3, ip
 8000e36:	d103      	bne.n	8000e40 <__aeabi_fmul+0x14c>
 8000e38:	024b      	lsls	r3, r1, #9
 8000e3a:	bf18      	it	ne
 8000e3c:	4608      	movne	r0, r1
 8000e3e:	d108      	bne.n	8000e52 <__aeabi_fmul+0x15e>
 8000e40:	ea80 0001 	eor.w	r0, r0, r1
 8000e44:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e50:	4770      	bx	lr
 8000e52:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e56:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e5a:	4770      	bx	lr

08000e5c <__aeabi_fdiv>:
 8000e5c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e60:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e64:	bf1e      	ittt	ne
 8000e66:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e6a:	ea92 0f0c 	teqne	r2, ip
 8000e6e:	ea93 0f0c 	teqne	r3, ip
 8000e72:	d069      	beq.n	8000f48 <__aeabi_fdiv+0xec>
 8000e74:	eba2 0203 	sub.w	r2, r2, r3
 8000e78:	ea80 0c01 	eor.w	ip, r0, r1
 8000e7c:	0249      	lsls	r1, r1, #9
 8000e7e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e82:	d037      	beq.n	8000ef4 <__aeabi_fdiv+0x98>
 8000e84:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e88:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e8c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e90:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e94:	428b      	cmp	r3, r1
 8000e96:	bf38      	it	cc
 8000e98:	005b      	lslcc	r3, r3, #1
 8000e9a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e9e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ea2:	428b      	cmp	r3, r1
 8000ea4:	bf24      	itt	cs
 8000ea6:	1a5b      	subcs	r3, r3, r1
 8000ea8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000eac:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000eb0:	bf24      	itt	cs
 8000eb2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000eb6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eba:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ebe:	bf24      	itt	cs
 8000ec0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ec4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ec8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ecc:	bf24      	itt	cs
 8000ece:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ed2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ed6:	011b      	lsls	r3, r3, #4
 8000ed8:	bf18      	it	ne
 8000eda:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ede:	d1e0      	bne.n	8000ea2 <__aeabi_fdiv+0x46>
 8000ee0:	2afd      	cmp	r2, #253	; 0xfd
 8000ee2:	f63f af50 	bhi.w	8000d86 <__aeabi_fmul+0x92>
 8000ee6:	428b      	cmp	r3, r1
 8000ee8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eec:	bf08      	it	eq
 8000eee:	f020 0001 	biceq.w	r0, r0, #1
 8000ef2:	4770      	bx	lr
 8000ef4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ef8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000efc:	327f      	adds	r2, #127	; 0x7f
 8000efe:	bfc2      	ittt	gt
 8000f00:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f04:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f08:	4770      	bxgt	lr
 8000f0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f0e:	f04f 0300 	mov.w	r3, #0
 8000f12:	3a01      	subs	r2, #1
 8000f14:	e737      	b.n	8000d86 <__aeabi_fmul+0x92>
 8000f16:	f092 0f00 	teq	r2, #0
 8000f1a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f1e:	bf02      	ittt	eq
 8000f20:	0040      	lsleq	r0, r0, #1
 8000f22:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f26:	3a01      	subeq	r2, #1
 8000f28:	d0f9      	beq.n	8000f1e <__aeabi_fdiv+0xc2>
 8000f2a:	ea40 000c 	orr.w	r0, r0, ip
 8000f2e:	f093 0f00 	teq	r3, #0
 8000f32:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f36:	bf02      	ittt	eq
 8000f38:	0049      	lsleq	r1, r1, #1
 8000f3a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f3e:	3b01      	subeq	r3, #1
 8000f40:	d0f9      	beq.n	8000f36 <__aeabi_fdiv+0xda>
 8000f42:	ea41 010c 	orr.w	r1, r1, ip
 8000f46:	e795      	b.n	8000e74 <__aeabi_fdiv+0x18>
 8000f48:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f4c:	ea92 0f0c 	teq	r2, ip
 8000f50:	d108      	bne.n	8000f64 <__aeabi_fdiv+0x108>
 8000f52:	0242      	lsls	r2, r0, #9
 8000f54:	f47f af7d 	bne.w	8000e52 <__aeabi_fmul+0x15e>
 8000f58:	ea93 0f0c 	teq	r3, ip
 8000f5c:	f47f af70 	bne.w	8000e40 <__aeabi_fmul+0x14c>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e776      	b.n	8000e52 <__aeabi_fmul+0x15e>
 8000f64:	ea93 0f0c 	teq	r3, ip
 8000f68:	d104      	bne.n	8000f74 <__aeabi_fdiv+0x118>
 8000f6a:	024b      	lsls	r3, r1, #9
 8000f6c:	f43f af4c 	beq.w	8000e08 <__aeabi_fmul+0x114>
 8000f70:	4608      	mov	r0, r1
 8000f72:	e76e      	b.n	8000e52 <__aeabi_fmul+0x15e>
 8000f74:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f78:	bf18      	it	ne
 8000f7a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f7e:	d1ca      	bne.n	8000f16 <__aeabi_fdiv+0xba>
 8000f80:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f84:	f47f af5c 	bne.w	8000e40 <__aeabi_fmul+0x14c>
 8000f88:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f8c:	f47f af3c 	bne.w	8000e08 <__aeabi_fmul+0x114>
 8000f90:	e75f      	b.n	8000e52 <__aeabi_fmul+0x15e>
 8000f92:	bf00      	nop

08000f94 <__gesf2>:
 8000f94:	f04f 3cff 	mov.w	ip, #4294967295
 8000f98:	e006      	b.n	8000fa8 <__cmpsf2+0x4>
 8000f9a:	bf00      	nop

08000f9c <__lesf2>:
 8000f9c:	f04f 0c01 	mov.w	ip, #1
 8000fa0:	e002      	b.n	8000fa8 <__cmpsf2+0x4>
 8000fa2:	bf00      	nop

08000fa4 <__cmpsf2>:
 8000fa4:	f04f 0c01 	mov.w	ip, #1
 8000fa8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fac:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fb0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fb4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fb8:	bf18      	it	ne
 8000fba:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fbe:	d011      	beq.n	8000fe4 <__cmpsf2+0x40>
 8000fc0:	b001      	add	sp, #4
 8000fc2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fc6:	bf18      	it	ne
 8000fc8:	ea90 0f01 	teqne	r0, r1
 8000fcc:	bf58      	it	pl
 8000fce:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fd2:	bf88      	it	hi
 8000fd4:	17c8      	asrhi	r0, r1, #31
 8000fd6:	bf38      	it	cc
 8000fd8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fdc:	bf18      	it	ne
 8000fde:	f040 0001 	orrne.w	r0, r0, #1
 8000fe2:	4770      	bx	lr
 8000fe4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fe8:	d102      	bne.n	8000ff0 <__cmpsf2+0x4c>
 8000fea:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fee:	d105      	bne.n	8000ffc <__cmpsf2+0x58>
 8000ff0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ff4:	d1e4      	bne.n	8000fc0 <__cmpsf2+0x1c>
 8000ff6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000ffa:	d0e1      	beq.n	8000fc0 <__cmpsf2+0x1c>
 8000ffc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop

08001004 <__aeabi_cfrcmple>:
 8001004:	4684      	mov	ip, r0
 8001006:	4608      	mov	r0, r1
 8001008:	4661      	mov	r1, ip
 800100a:	e7ff      	b.n	800100c <__aeabi_cfcmpeq>

0800100c <__aeabi_cfcmpeq>:
 800100c:	b50f      	push	{r0, r1, r2, r3, lr}
 800100e:	f7ff ffc9 	bl	8000fa4 <__cmpsf2>
 8001012:	2800      	cmp	r0, #0
 8001014:	bf48      	it	mi
 8001016:	f110 0f00 	cmnmi.w	r0, #0
 800101a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800101c <__aeabi_fcmpeq>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff fff4 	bl	800100c <__aeabi_cfcmpeq>
 8001024:	bf0c      	ite	eq
 8001026:	2001      	moveq	r0, #1
 8001028:	2000      	movne	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <__aeabi_fcmplt>:
 8001030:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001034:	f7ff ffea 	bl	800100c <__aeabi_cfcmpeq>
 8001038:	bf34      	ite	cc
 800103a:	2001      	movcc	r0, #1
 800103c:	2000      	movcs	r0, #0
 800103e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001042:	bf00      	nop

08001044 <__aeabi_fcmple>:
 8001044:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001048:	f7ff ffe0 	bl	800100c <__aeabi_cfcmpeq>
 800104c:	bf94      	ite	ls
 800104e:	2001      	movls	r0, #1
 8001050:	2000      	movhi	r0, #0
 8001052:	f85d fb08 	ldr.w	pc, [sp], #8
 8001056:	bf00      	nop

08001058 <__aeabi_fcmpge>:
 8001058:	f84d ed08 	str.w	lr, [sp, #-8]!
 800105c:	f7ff ffd2 	bl	8001004 <__aeabi_cfrcmple>
 8001060:	bf94      	ite	ls
 8001062:	2001      	movls	r0, #1
 8001064:	2000      	movhi	r0, #0
 8001066:	f85d fb08 	ldr.w	pc, [sp], #8
 800106a:	bf00      	nop

0800106c <__aeabi_fcmpgt>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff ffc8 	bl	8001004 <__aeabi_cfrcmple>
 8001074:	bf34      	ite	cc
 8001076:	2001      	movcc	r0, #1
 8001078:	2000      	movcs	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_f2iz>:
 8001080:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001084:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001088:	d30f      	bcc.n	80010aa <__aeabi_f2iz+0x2a>
 800108a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800108e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001092:	d90d      	bls.n	80010b0 <__aeabi_f2iz+0x30>
 8001094:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001098:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800109c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010a0:	fa23 f002 	lsr.w	r0, r3, r2
 80010a4:	bf18      	it	ne
 80010a6:	4240      	negne	r0, r0
 80010a8:	4770      	bx	lr
 80010aa:	f04f 0000 	mov.w	r0, #0
 80010ae:	4770      	bx	lr
 80010b0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010b4:	d101      	bne.n	80010ba <__aeabi_f2iz+0x3a>
 80010b6:	0242      	lsls	r2, r0, #9
 80010b8:	d105      	bne.n	80010c6 <__aeabi_f2iz+0x46>
 80010ba:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80010be:	bf08      	it	eq
 80010c0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80010c4:	4770      	bx	lr
 80010c6:	f04f 0000 	mov.w	r0, #0
 80010ca:	4770      	bx	lr

080010cc <__aeabi_f2uiz>:
 80010cc:	0042      	lsls	r2, r0, #1
 80010ce:	d20e      	bcs.n	80010ee <__aeabi_f2uiz+0x22>
 80010d0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010d4:	d30b      	bcc.n	80010ee <__aeabi_f2uiz+0x22>
 80010d6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010da:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010de:	d409      	bmi.n	80010f4 <__aeabi_f2uiz+0x28>
 80010e0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010e8:	fa23 f002 	lsr.w	r0, r3, r2
 80010ec:	4770      	bx	lr
 80010ee:	f04f 0000 	mov.w	r0, #0
 80010f2:	4770      	bx	lr
 80010f4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010f8:	d101      	bne.n	80010fe <__aeabi_f2uiz+0x32>
 80010fa:	0242      	lsls	r2, r0, #9
 80010fc:	d102      	bne.n	8001104 <__aeabi_f2uiz+0x38>
 80010fe:	f04f 30ff 	mov.w	r0, #4294967295
 8001102:	4770      	bx	lr
 8001104:	f04f 0000 	mov.w	r0, #0
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop

0800110c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001110:	4b08      	ldr	r3, [pc, #32]	; (8001134 <HAL_Init+0x28>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a07      	ldr	r2, [pc, #28]	; (8001134 <HAL_Init+0x28>)
 8001116:	f043 0310 	orr.w	r3, r3, #16
 800111a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800111c:	2003      	movs	r0, #3
 800111e:	f000 f923 	bl	8001368 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001122:	2000      	movs	r0, #0
 8001124:	f000 f808 	bl	8001138 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001128:	f007 fafe 	bl	8008728 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800112c:	2300      	movs	r3, #0
}
 800112e:	4618      	mov	r0, r3
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40022000 	.word	0x40022000

08001138 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001140:	4b12      	ldr	r3, [pc, #72]	; (800118c <HAL_InitTick+0x54>)
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	4b12      	ldr	r3, [pc, #72]	; (8001190 <HAL_InitTick+0x58>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	4619      	mov	r1, r3
 800114a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800114e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001152:	fbb2 f3f3 	udiv	r3, r2, r3
 8001156:	4618      	mov	r0, r3
 8001158:	f000 f93b 	bl	80013d2 <HAL_SYSTICK_Config>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	e00e      	b.n	8001184 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2b0f      	cmp	r3, #15
 800116a:	d80a      	bhi.n	8001182 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800116c:	2200      	movs	r2, #0
 800116e:	6879      	ldr	r1, [r7, #4]
 8001170:	f04f 30ff 	mov.w	r0, #4294967295
 8001174:	f000 f903 	bl	800137e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001178:	4a06      	ldr	r2, [pc, #24]	; (8001194 <HAL_InitTick+0x5c>)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800117e:	2300      	movs	r3, #0
 8001180:	e000      	b.n	8001184 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
}
 8001184:	4618      	mov	r0, r3
 8001186:	3708      	adds	r7, #8
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	20000060 	.word	0x20000060
 8001190:	20000004 	.word	0x20000004
 8001194:	20000000 	.word	0x20000000

08001198 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800119c:	4b05      	ldr	r3, [pc, #20]	; (80011b4 <HAL_IncTick+0x1c>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	461a      	mov	r2, r3
 80011a2:	4b05      	ldr	r3, [pc, #20]	; (80011b8 <HAL_IncTick+0x20>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4413      	add	r3, r2
 80011a8:	4a03      	ldr	r2, [pc, #12]	; (80011b8 <HAL_IncTick+0x20>)
 80011aa:	6013      	str	r3, [r2, #0]
}
 80011ac:	bf00      	nop
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bc80      	pop	{r7}
 80011b2:	4770      	bx	lr
 80011b4:	20000004 	.word	0x20000004
 80011b8:	2000051c 	.word	0x2000051c

080011bc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  return uwTick;
 80011c0:	4b02      	ldr	r3, [pc, #8]	; (80011cc <HAL_GetTick+0x10>)
 80011c2:	681b      	ldr	r3, [r3, #0]
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bc80      	pop	{r7}
 80011ca:	4770      	bx	lr
 80011cc:	2000051c 	.word	0x2000051c

080011d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b085      	sub	sp, #20
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f003 0307 	and.w	r3, r3, #7
 80011de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011e0:	4b0c      	ldr	r3, [pc, #48]	; (8001214 <__NVIC_SetPriorityGrouping+0x44>)
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011e6:	68ba      	ldr	r2, [r7, #8]
 80011e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011ec:	4013      	ands	r3, r2
 80011ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001200:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001202:	4a04      	ldr	r2, [pc, #16]	; (8001214 <__NVIC_SetPriorityGrouping+0x44>)
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	60d3      	str	r3, [r2, #12]
}
 8001208:	bf00      	nop
 800120a:	3714      	adds	r7, #20
 800120c:	46bd      	mov	sp, r7
 800120e:	bc80      	pop	{r7}
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	e000ed00 	.word	0xe000ed00

08001218 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800121c:	4b04      	ldr	r3, [pc, #16]	; (8001230 <__NVIC_GetPriorityGrouping+0x18>)
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	0a1b      	lsrs	r3, r3, #8
 8001222:	f003 0307 	and.w	r3, r3, #7
}
 8001226:	4618      	mov	r0, r3
 8001228:	46bd      	mov	sp, r7
 800122a:	bc80      	pop	{r7}
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	e000ed00 	.word	0xe000ed00

08001234 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800123e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001242:	2b00      	cmp	r3, #0
 8001244:	db0b      	blt.n	800125e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001246:	79fb      	ldrb	r3, [r7, #7]
 8001248:	f003 021f 	and.w	r2, r3, #31
 800124c:	4906      	ldr	r1, [pc, #24]	; (8001268 <__NVIC_EnableIRQ+0x34>)
 800124e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001252:	095b      	lsrs	r3, r3, #5
 8001254:	2001      	movs	r0, #1
 8001256:	fa00 f202 	lsl.w	r2, r0, r2
 800125a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800125e:	bf00      	nop
 8001260:	370c      	adds	r7, #12
 8001262:	46bd      	mov	sp, r7
 8001264:	bc80      	pop	{r7}
 8001266:	4770      	bx	lr
 8001268:	e000e100 	.word	0xe000e100

0800126c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	6039      	str	r1, [r7, #0]
 8001276:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001278:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127c:	2b00      	cmp	r3, #0
 800127e:	db0a      	blt.n	8001296 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	b2da      	uxtb	r2, r3
 8001284:	490c      	ldr	r1, [pc, #48]	; (80012b8 <__NVIC_SetPriority+0x4c>)
 8001286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128a:	0112      	lsls	r2, r2, #4
 800128c:	b2d2      	uxtb	r2, r2
 800128e:	440b      	add	r3, r1
 8001290:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001294:	e00a      	b.n	80012ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	b2da      	uxtb	r2, r3
 800129a:	4908      	ldr	r1, [pc, #32]	; (80012bc <__NVIC_SetPriority+0x50>)
 800129c:	79fb      	ldrb	r3, [r7, #7]
 800129e:	f003 030f 	and.w	r3, r3, #15
 80012a2:	3b04      	subs	r3, #4
 80012a4:	0112      	lsls	r2, r2, #4
 80012a6:	b2d2      	uxtb	r2, r2
 80012a8:	440b      	add	r3, r1
 80012aa:	761a      	strb	r2, [r3, #24]
}
 80012ac:	bf00      	nop
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bc80      	pop	{r7}
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	e000e100 	.word	0xe000e100
 80012bc:	e000ed00 	.word	0xe000ed00

080012c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b089      	sub	sp, #36	; 0x24
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	60f8      	str	r0, [r7, #12]
 80012c8:	60b9      	str	r1, [r7, #8]
 80012ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	f003 0307 	and.w	r3, r3, #7
 80012d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	f1c3 0307 	rsb	r3, r3, #7
 80012da:	2b04      	cmp	r3, #4
 80012dc:	bf28      	it	cs
 80012de:	2304      	movcs	r3, #4
 80012e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	3304      	adds	r3, #4
 80012e6:	2b06      	cmp	r3, #6
 80012e8:	d902      	bls.n	80012f0 <NVIC_EncodePriority+0x30>
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	3b03      	subs	r3, #3
 80012ee:	e000      	b.n	80012f2 <NVIC_EncodePriority+0x32>
 80012f0:	2300      	movs	r3, #0
 80012f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f4:	f04f 32ff 	mov.w	r2, #4294967295
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	fa02 f303 	lsl.w	r3, r2, r3
 80012fe:	43da      	mvns	r2, r3
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	401a      	ands	r2, r3
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001308:	f04f 31ff 	mov.w	r1, #4294967295
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	fa01 f303 	lsl.w	r3, r1, r3
 8001312:	43d9      	mvns	r1, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001318:	4313      	orrs	r3, r2
         );
}
 800131a:	4618      	mov	r0, r3
 800131c:	3724      	adds	r7, #36	; 0x24
 800131e:	46bd      	mov	sp, r7
 8001320:	bc80      	pop	{r7}
 8001322:	4770      	bx	lr

08001324 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	3b01      	subs	r3, #1
 8001330:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001334:	d301      	bcc.n	800133a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001336:	2301      	movs	r3, #1
 8001338:	e00f      	b.n	800135a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800133a:	4a0a      	ldr	r2, [pc, #40]	; (8001364 <SysTick_Config+0x40>)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	3b01      	subs	r3, #1
 8001340:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001342:	210f      	movs	r1, #15
 8001344:	f04f 30ff 	mov.w	r0, #4294967295
 8001348:	f7ff ff90 	bl	800126c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800134c:	4b05      	ldr	r3, [pc, #20]	; (8001364 <SysTick_Config+0x40>)
 800134e:	2200      	movs	r2, #0
 8001350:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001352:	4b04      	ldr	r3, [pc, #16]	; (8001364 <SysTick_Config+0x40>)
 8001354:	2207      	movs	r2, #7
 8001356:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001358:	2300      	movs	r3, #0
}
 800135a:	4618      	mov	r0, r3
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	e000e010 	.word	0xe000e010

08001368 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f7ff ff2d 	bl	80011d0 <__NVIC_SetPriorityGrouping>
}
 8001376:	bf00      	nop
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800137e:	b580      	push	{r7, lr}
 8001380:	b086      	sub	sp, #24
 8001382:	af00      	add	r7, sp, #0
 8001384:	4603      	mov	r3, r0
 8001386:	60b9      	str	r1, [r7, #8]
 8001388:	607a      	str	r2, [r7, #4]
 800138a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800138c:	2300      	movs	r3, #0
 800138e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001390:	f7ff ff42 	bl	8001218 <__NVIC_GetPriorityGrouping>
 8001394:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001396:	687a      	ldr	r2, [r7, #4]
 8001398:	68b9      	ldr	r1, [r7, #8]
 800139a:	6978      	ldr	r0, [r7, #20]
 800139c:	f7ff ff90 	bl	80012c0 <NVIC_EncodePriority>
 80013a0:	4602      	mov	r2, r0
 80013a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013a6:	4611      	mov	r1, r2
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff ff5f 	bl	800126c <__NVIC_SetPriority>
}
 80013ae:	bf00      	nop
 80013b0:	3718      	adds	r7, #24
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b082      	sub	sp, #8
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	4603      	mov	r3, r0
 80013be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff ff35 	bl	8001234 <__NVIC_EnableIRQ>
}
 80013ca:	bf00      	nop
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b082      	sub	sp, #8
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f7ff ffa2 	bl	8001324 <SysTick_Config>
 80013e0:	4603      	mov	r3, r0
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
	...

080013ec <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b085      	sub	sp, #20
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80013f4:	2300      	movs	r3, #0
 80013f6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d101      	bne.n	8001402 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	e043      	b.n	800148a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	461a      	mov	r2, r3
 8001408:	4b22      	ldr	r3, [pc, #136]	; (8001494 <HAL_DMA_Init+0xa8>)
 800140a:	4413      	add	r3, r2
 800140c:	4a22      	ldr	r2, [pc, #136]	; (8001498 <HAL_DMA_Init+0xac>)
 800140e:	fba2 2303 	umull	r2, r3, r2, r3
 8001412:	091b      	lsrs	r3, r3, #4
 8001414:	009a      	lsls	r2, r3, #2
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a1f      	ldr	r2, [pc, #124]	; (800149c <HAL_DMA_Init+0xb0>)
 800141e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2202      	movs	r2, #2
 8001424:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001436:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800143a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001444:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	68db      	ldr	r3, [r3, #12]
 800144a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001450:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	695b      	ldr	r3, [r3, #20]
 8001456:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800145c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	69db      	ldr	r3, [r3, #28]
 8001462:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001464:	68fa      	ldr	r2, [r7, #12]
 8001466:	4313      	orrs	r3, r2
 8001468:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	68fa      	ldr	r2, [r7, #12]
 8001470:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2200      	movs	r2, #0
 8001476:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2201      	movs	r2, #1
 800147c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2200      	movs	r2, #0
 8001484:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001488:	2300      	movs	r3, #0
}
 800148a:	4618      	mov	r0, r3
 800148c:	3714      	adds	r7, #20
 800148e:	46bd      	mov	sp, r7
 8001490:	bc80      	pop	{r7}
 8001492:	4770      	bx	lr
 8001494:	bffdfff8 	.word	0xbffdfff8
 8001498:	cccccccd 	.word	0xcccccccd
 800149c:	40020000 	.word	0x40020000

080014a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b086      	sub	sp, #24
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	60f8      	str	r0, [r7, #12]
 80014a8:	60b9      	str	r1, [r7, #8]
 80014aa:	607a      	str	r2, [r7, #4]
 80014ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80014ae:	2300      	movs	r3, #0
 80014b0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d101      	bne.n	80014c0 <HAL_DMA_Start_IT+0x20>
 80014bc:	2302      	movs	r3, #2
 80014be:	e04a      	b.n	8001556 <HAL_DMA_Start_IT+0xb6>
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	2201      	movs	r2, #1
 80014c4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d13a      	bne.n	8001548 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	2202      	movs	r2, #2
 80014d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	2200      	movs	r2, #0
 80014de:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f022 0201 	bic.w	r2, r2, #1
 80014ee:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	687a      	ldr	r2, [r7, #4]
 80014f4:	68b9      	ldr	r1, [r7, #8]
 80014f6:	68f8      	ldr	r0, [r7, #12]
 80014f8:	f000 f9ae 	bl	8001858 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001500:	2b00      	cmp	r3, #0
 8001502:	d008      	beq.n	8001516 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f042 020e 	orr.w	r2, r2, #14
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	e00f      	b.n	8001536 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f022 0204 	bic.w	r2, r2, #4
 8001524:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f042 020a 	orr.w	r2, r2, #10
 8001534:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f042 0201 	orr.w	r2, r2, #1
 8001544:	601a      	str	r2, [r3, #0]
 8001546:	e005      	b.n	8001554 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	2200      	movs	r2, #0
 800154c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001550:	2302      	movs	r3, #2
 8001552:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001554:	7dfb      	ldrb	r3, [r7, #23]
}
 8001556:	4618      	mov	r0, r3
 8001558:	3718      	adds	r7, #24
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
	...

08001560 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001568:	2300      	movs	r3, #0
 800156a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001572:	2b02      	cmp	r3, #2
 8001574:	d005      	beq.n	8001582 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2204      	movs	r2, #4
 800157a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	73fb      	strb	r3, [r7, #15]
 8001580:	e051      	b.n	8001626 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f022 020e 	bic.w	r2, r2, #14
 8001590:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f022 0201 	bic.w	r2, r2, #1
 80015a0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a22      	ldr	r2, [pc, #136]	; (8001630 <HAL_DMA_Abort_IT+0xd0>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d029      	beq.n	8001600 <HAL_DMA_Abort_IT+0xa0>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a20      	ldr	r2, [pc, #128]	; (8001634 <HAL_DMA_Abort_IT+0xd4>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d022      	beq.n	80015fc <HAL_DMA_Abort_IT+0x9c>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a1f      	ldr	r2, [pc, #124]	; (8001638 <HAL_DMA_Abort_IT+0xd8>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d01a      	beq.n	80015f6 <HAL_DMA_Abort_IT+0x96>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a1d      	ldr	r2, [pc, #116]	; (800163c <HAL_DMA_Abort_IT+0xdc>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d012      	beq.n	80015f0 <HAL_DMA_Abort_IT+0x90>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a1c      	ldr	r2, [pc, #112]	; (8001640 <HAL_DMA_Abort_IT+0xe0>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d00a      	beq.n	80015ea <HAL_DMA_Abort_IT+0x8a>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a1a      	ldr	r2, [pc, #104]	; (8001644 <HAL_DMA_Abort_IT+0xe4>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d102      	bne.n	80015e4 <HAL_DMA_Abort_IT+0x84>
 80015de:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80015e2:	e00e      	b.n	8001602 <HAL_DMA_Abort_IT+0xa2>
 80015e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80015e8:	e00b      	b.n	8001602 <HAL_DMA_Abort_IT+0xa2>
 80015ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015ee:	e008      	b.n	8001602 <HAL_DMA_Abort_IT+0xa2>
 80015f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015f4:	e005      	b.n	8001602 <HAL_DMA_Abort_IT+0xa2>
 80015f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015fa:	e002      	b.n	8001602 <HAL_DMA_Abort_IT+0xa2>
 80015fc:	2310      	movs	r3, #16
 80015fe:	e000      	b.n	8001602 <HAL_DMA_Abort_IT+0xa2>
 8001600:	2301      	movs	r3, #1
 8001602:	4a11      	ldr	r2, [pc, #68]	; (8001648 <HAL_DMA_Abort_IT+0xe8>)
 8001604:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2201      	movs	r2, #1
 800160a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2200      	movs	r2, #0
 8001612:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800161a:	2b00      	cmp	r3, #0
 800161c:	d003      	beq.n	8001626 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	4798      	blx	r3
    } 
  }
  return status;
 8001626:	7bfb      	ldrb	r3, [r7, #15]
}
 8001628:	4618      	mov	r0, r3
 800162a:	3710      	adds	r7, #16
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	40020008 	.word	0x40020008
 8001634:	4002001c 	.word	0x4002001c
 8001638:	40020030 	.word	0x40020030
 800163c:	40020044 	.word	0x40020044
 8001640:	40020058 	.word	0x40020058
 8001644:	4002006c 	.word	0x4002006c
 8001648:	40020000 	.word	0x40020000

0800164c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001668:	2204      	movs	r2, #4
 800166a:	409a      	lsls	r2, r3
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	4013      	ands	r3, r2
 8001670:	2b00      	cmp	r3, #0
 8001672:	d04f      	beq.n	8001714 <HAL_DMA_IRQHandler+0xc8>
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	f003 0304 	and.w	r3, r3, #4
 800167a:	2b00      	cmp	r3, #0
 800167c:	d04a      	beq.n	8001714 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 0320 	and.w	r3, r3, #32
 8001688:	2b00      	cmp	r3, #0
 800168a:	d107      	bne.n	800169c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f022 0204 	bic.w	r2, r2, #4
 800169a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a66      	ldr	r2, [pc, #408]	; (800183c <HAL_DMA_IRQHandler+0x1f0>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d029      	beq.n	80016fa <HAL_DMA_IRQHandler+0xae>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a65      	ldr	r2, [pc, #404]	; (8001840 <HAL_DMA_IRQHandler+0x1f4>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d022      	beq.n	80016f6 <HAL_DMA_IRQHandler+0xaa>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a63      	ldr	r2, [pc, #396]	; (8001844 <HAL_DMA_IRQHandler+0x1f8>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d01a      	beq.n	80016f0 <HAL_DMA_IRQHandler+0xa4>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a62      	ldr	r2, [pc, #392]	; (8001848 <HAL_DMA_IRQHandler+0x1fc>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d012      	beq.n	80016ea <HAL_DMA_IRQHandler+0x9e>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a60      	ldr	r2, [pc, #384]	; (800184c <HAL_DMA_IRQHandler+0x200>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d00a      	beq.n	80016e4 <HAL_DMA_IRQHandler+0x98>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a5f      	ldr	r2, [pc, #380]	; (8001850 <HAL_DMA_IRQHandler+0x204>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d102      	bne.n	80016de <HAL_DMA_IRQHandler+0x92>
 80016d8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016dc:	e00e      	b.n	80016fc <HAL_DMA_IRQHandler+0xb0>
 80016de:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80016e2:	e00b      	b.n	80016fc <HAL_DMA_IRQHandler+0xb0>
 80016e4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80016e8:	e008      	b.n	80016fc <HAL_DMA_IRQHandler+0xb0>
 80016ea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80016ee:	e005      	b.n	80016fc <HAL_DMA_IRQHandler+0xb0>
 80016f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016f4:	e002      	b.n	80016fc <HAL_DMA_IRQHandler+0xb0>
 80016f6:	2340      	movs	r3, #64	; 0x40
 80016f8:	e000      	b.n	80016fc <HAL_DMA_IRQHandler+0xb0>
 80016fa:	2304      	movs	r3, #4
 80016fc:	4a55      	ldr	r2, [pc, #340]	; (8001854 <HAL_DMA_IRQHandler+0x208>)
 80016fe:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001704:	2b00      	cmp	r3, #0
 8001706:	f000 8094 	beq.w	8001832 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001712:	e08e      	b.n	8001832 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001718:	2202      	movs	r2, #2
 800171a:	409a      	lsls	r2, r3
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	4013      	ands	r3, r2
 8001720:	2b00      	cmp	r3, #0
 8001722:	d056      	beq.n	80017d2 <HAL_DMA_IRQHandler+0x186>
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	f003 0302 	and.w	r3, r3, #2
 800172a:	2b00      	cmp	r3, #0
 800172c:	d051      	beq.n	80017d2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 0320 	and.w	r3, r3, #32
 8001738:	2b00      	cmp	r3, #0
 800173a:	d10b      	bne.n	8001754 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f022 020a 	bic.w	r2, r2, #10
 800174a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2201      	movs	r2, #1
 8001750:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a38      	ldr	r2, [pc, #224]	; (800183c <HAL_DMA_IRQHandler+0x1f0>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d029      	beq.n	80017b2 <HAL_DMA_IRQHandler+0x166>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a37      	ldr	r2, [pc, #220]	; (8001840 <HAL_DMA_IRQHandler+0x1f4>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d022      	beq.n	80017ae <HAL_DMA_IRQHandler+0x162>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a35      	ldr	r2, [pc, #212]	; (8001844 <HAL_DMA_IRQHandler+0x1f8>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d01a      	beq.n	80017a8 <HAL_DMA_IRQHandler+0x15c>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a34      	ldr	r2, [pc, #208]	; (8001848 <HAL_DMA_IRQHandler+0x1fc>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d012      	beq.n	80017a2 <HAL_DMA_IRQHandler+0x156>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a32      	ldr	r2, [pc, #200]	; (800184c <HAL_DMA_IRQHandler+0x200>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d00a      	beq.n	800179c <HAL_DMA_IRQHandler+0x150>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a31      	ldr	r2, [pc, #196]	; (8001850 <HAL_DMA_IRQHandler+0x204>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d102      	bne.n	8001796 <HAL_DMA_IRQHandler+0x14a>
 8001790:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001794:	e00e      	b.n	80017b4 <HAL_DMA_IRQHandler+0x168>
 8001796:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800179a:	e00b      	b.n	80017b4 <HAL_DMA_IRQHandler+0x168>
 800179c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017a0:	e008      	b.n	80017b4 <HAL_DMA_IRQHandler+0x168>
 80017a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017a6:	e005      	b.n	80017b4 <HAL_DMA_IRQHandler+0x168>
 80017a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017ac:	e002      	b.n	80017b4 <HAL_DMA_IRQHandler+0x168>
 80017ae:	2320      	movs	r3, #32
 80017b0:	e000      	b.n	80017b4 <HAL_DMA_IRQHandler+0x168>
 80017b2:	2302      	movs	r3, #2
 80017b4:	4a27      	ldr	r2, [pc, #156]	; (8001854 <HAL_DMA_IRQHandler+0x208>)
 80017b6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2200      	movs	r2, #0
 80017bc:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d034      	beq.n	8001832 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80017d0:	e02f      	b.n	8001832 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d6:	2208      	movs	r2, #8
 80017d8:	409a      	lsls	r2, r3
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	4013      	ands	r3, r2
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d028      	beq.n	8001834 <HAL_DMA_IRQHandler+0x1e8>
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	f003 0308 	and.w	r3, r3, #8
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d023      	beq.n	8001834 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f022 020e 	bic.w	r2, r2, #14
 80017fa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001804:	2101      	movs	r1, #1
 8001806:	fa01 f202 	lsl.w	r2, r1, r2
 800180a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2201      	movs	r2, #1
 8001810:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2201      	movs	r2, #1
 8001816:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2200      	movs	r2, #0
 800181e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001826:	2b00      	cmp	r3, #0
 8001828:	d004      	beq.n	8001834 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	4798      	blx	r3
    }
  }
  return;
 8001832:	bf00      	nop
 8001834:	bf00      	nop
}
 8001836:	3710      	adds	r7, #16
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	40020008 	.word	0x40020008
 8001840:	4002001c 	.word	0x4002001c
 8001844:	40020030 	.word	0x40020030
 8001848:	40020044 	.word	0x40020044
 800184c:	40020058 	.word	0x40020058
 8001850:	4002006c 	.word	0x4002006c
 8001854:	40020000 	.word	0x40020000

08001858 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001858:	b480      	push	{r7}
 800185a:	b085      	sub	sp, #20
 800185c:	af00      	add	r7, sp, #0
 800185e:	60f8      	str	r0, [r7, #12]
 8001860:	60b9      	str	r1, [r7, #8]
 8001862:	607a      	str	r2, [r7, #4]
 8001864:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800186e:	2101      	movs	r1, #1
 8001870:	fa01 f202 	lsl.w	r2, r1, r2
 8001874:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	683a      	ldr	r2, [r7, #0]
 800187c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	2b10      	cmp	r3, #16
 8001884:	d108      	bne.n	8001898 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	68ba      	ldr	r2, [r7, #8]
 8001894:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001896:	e007      	b.n	80018a8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	68ba      	ldr	r2, [r7, #8]
 800189e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	60da      	str	r2, [r3, #12]
}
 80018a8:	bf00      	nop
 80018aa:	3714      	adds	r7, #20
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bc80      	pop	{r7}
 80018b0:	4770      	bx	lr
	...

080018b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b08b      	sub	sp, #44	; 0x2c
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018be:	2300      	movs	r3, #0
 80018c0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80018c2:	2300      	movs	r3, #0
 80018c4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018c6:	e127      	b.n	8001b18 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80018c8:	2201      	movs	r2, #1
 80018ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018cc:	fa02 f303 	lsl.w	r3, r2, r3
 80018d0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	69fa      	ldr	r2, [r7, #28]
 80018d8:	4013      	ands	r3, r2
 80018da:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80018dc:	69ba      	ldr	r2, [r7, #24]
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	f040 8116 	bne.w	8001b12 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	2b12      	cmp	r3, #18
 80018ec:	d034      	beq.n	8001958 <HAL_GPIO_Init+0xa4>
 80018ee:	2b12      	cmp	r3, #18
 80018f0:	d80d      	bhi.n	800190e <HAL_GPIO_Init+0x5a>
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d02b      	beq.n	800194e <HAL_GPIO_Init+0x9a>
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d804      	bhi.n	8001904 <HAL_GPIO_Init+0x50>
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d031      	beq.n	8001962 <HAL_GPIO_Init+0xae>
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d01c      	beq.n	800193c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001902:	e048      	b.n	8001996 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001904:	2b03      	cmp	r3, #3
 8001906:	d043      	beq.n	8001990 <HAL_GPIO_Init+0xdc>
 8001908:	2b11      	cmp	r3, #17
 800190a:	d01b      	beq.n	8001944 <HAL_GPIO_Init+0x90>
          break;
 800190c:	e043      	b.n	8001996 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800190e:	4a89      	ldr	r2, [pc, #548]	; (8001b34 <HAL_GPIO_Init+0x280>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d026      	beq.n	8001962 <HAL_GPIO_Init+0xae>
 8001914:	4a87      	ldr	r2, [pc, #540]	; (8001b34 <HAL_GPIO_Init+0x280>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d806      	bhi.n	8001928 <HAL_GPIO_Init+0x74>
 800191a:	4a87      	ldr	r2, [pc, #540]	; (8001b38 <HAL_GPIO_Init+0x284>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d020      	beq.n	8001962 <HAL_GPIO_Init+0xae>
 8001920:	4a86      	ldr	r2, [pc, #536]	; (8001b3c <HAL_GPIO_Init+0x288>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d01d      	beq.n	8001962 <HAL_GPIO_Init+0xae>
          break;
 8001926:	e036      	b.n	8001996 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001928:	4a85      	ldr	r2, [pc, #532]	; (8001b40 <HAL_GPIO_Init+0x28c>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d019      	beq.n	8001962 <HAL_GPIO_Init+0xae>
 800192e:	4a85      	ldr	r2, [pc, #532]	; (8001b44 <HAL_GPIO_Init+0x290>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d016      	beq.n	8001962 <HAL_GPIO_Init+0xae>
 8001934:	4a84      	ldr	r2, [pc, #528]	; (8001b48 <HAL_GPIO_Init+0x294>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d013      	beq.n	8001962 <HAL_GPIO_Init+0xae>
          break;
 800193a:	e02c      	b.n	8001996 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	623b      	str	r3, [r7, #32]
          break;
 8001942:	e028      	b.n	8001996 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	3304      	adds	r3, #4
 800194a:	623b      	str	r3, [r7, #32]
          break;
 800194c:	e023      	b.n	8001996 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	68db      	ldr	r3, [r3, #12]
 8001952:	3308      	adds	r3, #8
 8001954:	623b      	str	r3, [r7, #32]
          break;
 8001956:	e01e      	b.n	8001996 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	330c      	adds	r3, #12
 800195e:	623b      	str	r3, [r7, #32]
          break;
 8001960:	e019      	b.n	8001996 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d102      	bne.n	8001970 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800196a:	2304      	movs	r3, #4
 800196c:	623b      	str	r3, [r7, #32]
          break;
 800196e:	e012      	b.n	8001996 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	2b01      	cmp	r3, #1
 8001976:	d105      	bne.n	8001984 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001978:	2308      	movs	r3, #8
 800197a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	69fa      	ldr	r2, [r7, #28]
 8001980:	611a      	str	r2, [r3, #16]
          break;
 8001982:	e008      	b.n	8001996 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001984:	2308      	movs	r3, #8
 8001986:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	69fa      	ldr	r2, [r7, #28]
 800198c:	615a      	str	r2, [r3, #20]
          break;
 800198e:	e002      	b.n	8001996 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001990:	2300      	movs	r3, #0
 8001992:	623b      	str	r3, [r7, #32]
          break;
 8001994:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	2bff      	cmp	r3, #255	; 0xff
 800199a:	d801      	bhi.n	80019a0 <HAL_GPIO_Init+0xec>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	e001      	b.n	80019a4 <HAL_GPIO_Init+0xf0>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	3304      	adds	r3, #4
 80019a4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	2bff      	cmp	r3, #255	; 0xff
 80019aa:	d802      	bhi.n	80019b2 <HAL_GPIO_Init+0xfe>
 80019ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	e002      	b.n	80019b8 <HAL_GPIO_Init+0x104>
 80019b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b4:	3b08      	subs	r3, #8
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	210f      	movs	r1, #15
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	fa01 f303 	lsl.w	r3, r1, r3
 80019c6:	43db      	mvns	r3, r3
 80019c8:	401a      	ands	r2, r3
 80019ca:	6a39      	ldr	r1, [r7, #32]
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	fa01 f303 	lsl.w	r3, r1, r3
 80019d2:	431a      	orrs	r2, r3
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	f000 8096 	beq.w	8001b12 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019e6:	4b59      	ldr	r3, [pc, #356]	; (8001b4c <HAL_GPIO_Init+0x298>)
 80019e8:	699b      	ldr	r3, [r3, #24]
 80019ea:	4a58      	ldr	r2, [pc, #352]	; (8001b4c <HAL_GPIO_Init+0x298>)
 80019ec:	f043 0301 	orr.w	r3, r3, #1
 80019f0:	6193      	str	r3, [r2, #24]
 80019f2:	4b56      	ldr	r3, [pc, #344]	; (8001b4c <HAL_GPIO_Init+0x298>)
 80019f4:	699b      	ldr	r3, [r3, #24]
 80019f6:	f003 0301 	and.w	r3, r3, #1
 80019fa:	60bb      	str	r3, [r7, #8]
 80019fc:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80019fe:	4a54      	ldr	r2, [pc, #336]	; (8001b50 <HAL_GPIO_Init+0x29c>)
 8001a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a02:	089b      	lsrs	r3, r3, #2
 8001a04:	3302      	adds	r3, #2
 8001a06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a0a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0e:	f003 0303 	and.w	r3, r3, #3
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	220f      	movs	r2, #15
 8001a16:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1a:	43db      	mvns	r3, r3
 8001a1c:	68fa      	ldr	r2, [r7, #12]
 8001a1e:	4013      	ands	r3, r2
 8001a20:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4a4b      	ldr	r2, [pc, #300]	; (8001b54 <HAL_GPIO_Init+0x2a0>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d013      	beq.n	8001a52 <HAL_GPIO_Init+0x19e>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4a4a      	ldr	r2, [pc, #296]	; (8001b58 <HAL_GPIO_Init+0x2a4>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d00d      	beq.n	8001a4e <HAL_GPIO_Init+0x19a>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4a49      	ldr	r2, [pc, #292]	; (8001b5c <HAL_GPIO_Init+0x2a8>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d007      	beq.n	8001a4a <HAL_GPIO_Init+0x196>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4a48      	ldr	r2, [pc, #288]	; (8001b60 <HAL_GPIO_Init+0x2ac>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d101      	bne.n	8001a46 <HAL_GPIO_Init+0x192>
 8001a42:	2303      	movs	r3, #3
 8001a44:	e006      	b.n	8001a54 <HAL_GPIO_Init+0x1a0>
 8001a46:	2304      	movs	r3, #4
 8001a48:	e004      	b.n	8001a54 <HAL_GPIO_Init+0x1a0>
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	e002      	b.n	8001a54 <HAL_GPIO_Init+0x1a0>
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e000      	b.n	8001a54 <HAL_GPIO_Init+0x1a0>
 8001a52:	2300      	movs	r3, #0
 8001a54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a56:	f002 0203 	and.w	r2, r2, #3
 8001a5a:	0092      	lsls	r2, r2, #2
 8001a5c:	4093      	lsls	r3, r2
 8001a5e:	68fa      	ldr	r2, [r7, #12]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a64:	493a      	ldr	r1, [pc, #232]	; (8001b50 <HAL_GPIO_Init+0x29c>)
 8001a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a68:	089b      	lsrs	r3, r3, #2
 8001a6a:	3302      	adds	r3, #2
 8001a6c:	68fa      	ldr	r2, [r7, #12]
 8001a6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d006      	beq.n	8001a8c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a7e:	4b39      	ldr	r3, [pc, #228]	; (8001b64 <HAL_GPIO_Init+0x2b0>)
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	4938      	ldr	r1, [pc, #224]	; (8001b64 <HAL_GPIO_Init+0x2b0>)
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	600b      	str	r3, [r1, #0]
 8001a8a:	e006      	b.n	8001a9a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a8c:	4b35      	ldr	r3, [pc, #212]	; (8001b64 <HAL_GPIO_Init+0x2b0>)
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	43db      	mvns	r3, r3
 8001a94:	4933      	ldr	r1, [pc, #204]	; (8001b64 <HAL_GPIO_Init+0x2b0>)
 8001a96:	4013      	ands	r3, r2
 8001a98:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d006      	beq.n	8001ab4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001aa6:	4b2f      	ldr	r3, [pc, #188]	; (8001b64 <HAL_GPIO_Init+0x2b0>)
 8001aa8:	685a      	ldr	r2, [r3, #4]
 8001aaa:	492e      	ldr	r1, [pc, #184]	; (8001b64 <HAL_GPIO_Init+0x2b0>)
 8001aac:	69bb      	ldr	r3, [r7, #24]
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	604b      	str	r3, [r1, #4]
 8001ab2:	e006      	b.n	8001ac2 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ab4:	4b2b      	ldr	r3, [pc, #172]	; (8001b64 <HAL_GPIO_Init+0x2b0>)
 8001ab6:	685a      	ldr	r2, [r3, #4]
 8001ab8:	69bb      	ldr	r3, [r7, #24]
 8001aba:	43db      	mvns	r3, r3
 8001abc:	4929      	ldr	r1, [pc, #164]	; (8001b64 <HAL_GPIO_Init+0x2b0>)
 8001abe:	4013      	ands	r3, r2
 8001ac0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d006      	beq.n	8001adc <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ace:	4b25      	ldr	r3, [pc, #148]	; (8001b64 <HAL_GPIO_Init+0x2b0>)
 8001ad0:	689a      	ldr	r2, [r3, #8]
 8001ad2:	4924      	ldr	r1, [pc, #144]	; (8001b64 <HAL_GPIO_Init+0x2b0>)
 8001ad4:	69bb      	ldr	r3, [r7, #24]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	608b      	str	r3, [r1, #8]
 8001ada:	e006      	b.n	8001aea <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001adc:	4b21      	ldr	r3, [pc, #132]	; (8001b64 <HAL_GPIO_Init+0x2b0>)
 8001ade:	689a      	ldr	r2, [r3, #8]
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	43db      	mvns	r3, r3
 8001ae4:	491f      	ldr	r1, [pc, #124]	; (8001b64 <HAL_GPIO_Init+0x2b0>)
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d006      	beq.n	8001b04 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001af6:	4b1b      	ldr	r3, [pc, #108]	; (8001b64 <HAL_GPIO_Init+0x2b0>)
 8001af8:	68da      	ldr	r2, [r3, #12]
 8001afa:	491a      	ldr	r1, [pc, #104]	; (8001b64 <HAL_GPIO_Init+0x2b0>)
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	4313      	orrs	r3, r2
 8001b00:	60cb      	str	r3, [r1, #12]
 8001b02:	e006      	b.n	8001b12 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b04:	4b17      	ldr	r3, [pc, #92]	; (8001b64 <HAL_GPIO_Init+0x2b0>)
 8001b06:	68da      	ldr	r2, [r3, #12]
 8001b08:	69bb      	ldr	r3, [r7, #24]
 8001b0a:	43db      	mvns	r3, r3
 8001b0c:	4915      	ldr	r1, [pc, #84]	; (8001b64 <HAL_GPIO_Init+0x2b0>)
 8001b0e:	4013      	ands	r3, r2
 8001b10:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b14:	3301      	adds	r3, #1
 8001b16:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	f47f aed0 	bne.w	80018c8 <HAL_GPIO_Init+0x14>
  }
}
 8001b28:	bf00      	nop
 8001b2a:	372c      	adds	r7, #44	; 0x2c
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bc80      	pop	{r7}
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	10210000 	.word	0x10210000
 8001b38:	10110000 	.word	0x10110000
 8001b3c:	10120000 	.word	0x10120000
 8001b40:	10310000 	.word	0x10310000
 8001b44:	10320000 	.word	0x10320000
 8001b48:	10220000 	.word	0x10220000
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	40010000 	.word	0x40010000
 8001b54:	40010800 	.word	0x40010800
 8001b58:	40010c00 	.word	0x40010c00
 8001b5c:	40011000 	.word	0x40011000
 8001b60:	40011400 	.word	0x40011400
 8001b64:	40010400 	.word	0x40010400

08001b68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	460b      	mov	r3, r1
 8001b72:	807b      	strh	r3, [r7, #2]
 8001b74:	4613      	mov	r3, r2
 8001b76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b78:	787b      	ldrb	r3, [r7, #1]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d003      	beq.n	8001b86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b7e:	887a      	ldrh	r2, [r7, #2]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b84:	e003      	b.n	8001b8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b86:	887b      	ldrh	r3, [r7, #2]
 8001b88:	041a      	lsls	r2, r3, #16
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	611a      	str	r2, [r3, #16]
}
 8001b8e:	bf00      	nop
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bc80      	pop	{r7}
 8001b96:	4770      	bx	lr

08001b98 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b085      	sub	sp, #20
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001baa:	887a      	ldrh	r2, [r7, #2]
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	4013      	ands	r3, r2
 8001bb0:	041a      	lsls	r2, r3, #16
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	43d9      	mvns	r1, r3
 8001bb6:	887b      	ldrh	r3, [r7, #2]
 8001bb8:	400b      	ands	r3, r1
 8001bba:	431a      	orrs	r2, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	611a      	str	r2, [r3, #16]
}
 8001bc0:	bf00      	nop
 8001bc2:	3714      	adds	r7, #20
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bc80      	pop	{r7}
 8001bc8:	4770      	bx	lr
	...

08001bcc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d101      	bne.n	8001bde <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e11f      	b.n	8001e1e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d106      	bne.n	8001bf8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2200      	movs	r2, #0
 8001bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f006 fdca 	bl	800878c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2224      	movs	r2, #36	; 0x24
 8001bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f022 0201 	bic.w	r2, r2, #1
 8001c0e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c1e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c2e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001c30:	f001 fb90 	bl	8003354 <HAL_RCC_GetPCLK1Freq>
 8001c34:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	4a7b      	ldr	r2, [pc, #492]	; (8001e28 <HAL_I2C_Init+0x25c>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d807      	bhi.n	8001c50 <HAL_I2C_Init+0x84>
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	4a7a      	ldr	r2, [pc, #488]	; (8001e2c <HAL_I2C_Init+0x260>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	bf94      	ite	ls
 8001c48:	2301      	movls	r3, #1
 8001c4a:	2300      	movhi	r3, #0
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	e006      	b.n	8001c5e <HAL_I2C_Init+0x92>
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	4a77      	ldr	r2, [pc, #476]	; (8001e30 <HAL_I2C_Init+0x264>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	bf94      	ite	ls
 8001c58:	2301      	movls	r3, #1
 8001c5a:	2300      	movhi	r3, #0
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e0db      	b.n	8001e1e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	4a72      	ldr	r2, [pc, #456]	; (8001e34 <HAL_I2C_Init+0x268>)
 8001c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c6e:	0c9b      	lsrs	r3, r3, #18
 8001c70:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	68ba      	ldr	r2, [r7, #8]
 8001c82:	430a      	orrs	r2, r1
 8001c84:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	6a1b      	ldr	r3, [r3, #32]
 8001c8c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	4a64      	ldr	r2, [pc, #400]	; (8001e28 <HAL_I2C_Init+0x25c>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d802      	bhi.n	8001ca0 <HAL_I2C_Init+0xd4>
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	e009      	b.n	8001cb4 <HAL_I2C_Init+0xe8>
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001ca6:	fb02 f303 	mul.w	r3, r2, r3
 8001caa:	4a63      	ldr	r2, [pc, #396]	; (8001e38 <HAL_I2C_Init+0x26c>)
 8001cac:	fba2 2303 	umull	r2, r3, r2, r3
 8001cb0:	099b      	lsrs	r3, r3, #6
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	6812      	ldr	r2, [r2, #0]
 8001cb8:	430b      	orrs	r3, r1
 8001cba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	69db      	ldr	r3, [r3, #28]
 8001cc2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001cc6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	4956      	ldr	r1, [pc, #344]	; (8001e28 <HAL_I2C_Init+0x25c>)
 8001cd0:	428b      	cmp	r3, r1
 8001cd2:	d80d      	bhi.n	8001cf0 <HAL_I2C_Init+0x124>
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	1e59      	subs	r1, r3, #1
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ce2:	3301      	adds	r3, #1
 8001ce4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ce8:	2b04      	cmp	r3, #4
 8001cea:	bf38      	it	cc
 8001cec:	2304      	movcc	r3, #4
 8001cee:	e04f      	b.n	8001d90 <HAL_I2C_Init+0x1c4>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d111      	bne.n	8001d1c <HAL_I2C_Init+0x150>
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	1e58      	subs	r0, r3, #1
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6859      	ldr	r1, [r3, #4]
 8001d00:	460b      	mov	r3, r1
 8001d02:	005b      	lsls	r3, r3, #1
 8001d04:	440b      	add	r3, r1
 8001d06:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	bf0c      	ite	eq
 8001d14:	2301      	moveq	r3, #1
 8001d16:	2300      	movne	r3, #0
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	e012      	b.n	8001d42 <HAL_I2C_Init+0x176>
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	1e58      	subs	r0, r3, #1
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6859      	ldr	r1, [r3, #4]
 8001d24:	460b      	mov	r3, r1
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	440b      	add	r3, r1
 8001d2a:	0099      	lsls	r1, r3, #2
 8001d2c:	440b      	add	r3, r1
 8001d2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d32:	3301      	adds	r3, #1
 8001d34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	bf0c      	ite	eq
 8001d3c:	2301      	moveq	r3, #1
 8001d3e:	2300      	movne	r3, #0
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <HAL_I2C_Init+0x17e>
 8001d46:	2301      	movs	r3, #1
 8001d48:	e022      	b.n	8001d90 <HAL_I2C_Init+0x1c4>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d10e      	bne.n	8001d70 <HAL_I2C_Init+0x1a4>
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	1e58      	subs	r0, r3, #1
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6859      	ldr	r1, [r3, #4]
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	440b      	add	r3, r1
 8001d60:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d64:	3301      	adds	r3, #1
 8001d66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d6e:	e00f      	b.n	8001d90 <HAL_I2C_Init+0x1c4>
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	1e58      	subs	r0, r3, #1
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6859      	ldr	r1, [r3, #4]
 8001d78:	460b      	mov	r3, r1
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	440b      	add	r3, r1
 8001d7e:	0099      	lsls	r1, r3, #2
 8001d80:	440b      	add	r3, r1
 8001d82:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d86:	3301      	adds	r3, #1
 8001d88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d8c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d90:	6879      	ldr	r1, [r7, #4]
 8001d92:	6809      	ldr	r1, [r1, #0]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	69da      	ldr	r2, [r3, #28]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6a1b      	ldr	r3, [r3, #32]
 8001daa:	431a      	orrs	r2, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	430a      	orrs	r2, r1
 8001db2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001dbe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	6911      	ldr	r1, [r2, #16]
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	68d2      	ldr	r2, [r2, #12]
 8001dca:	4311      	orrs	r1, r2
 8001dcc:	687a      	ldr	r2, [r7, #4]
 8001dce:	6812      	ldr	r2, [r2, #0]
 8001dd0:	430b      	orrs	r3, r1
 8001dd2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	68db      	ldr	r3, [r3, #12]
 8001dda:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	695a      	ldr	r2, [r3, #20]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	699b      	ldr	r3, [r3, #24]
 8001de6:	431a      	orrs	r2, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	430a      	orrs	r2, r1
 8001dee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f042 0201 	orr.w	r2, r2, #1
 8001dfe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2200      	movs	r2, #0
 8001e04:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2220      	movs	r2, #32
 8001e0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2200      	movs	r2, #0
 8001e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001e1c:	2300      	movs	r3, #0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3710      	adds	r7, #16
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	000186a0 	.word	0x000186a0
 8001e2c:	001e847f 	.word	0x001e847f
 8001e30:	003d08ff 	.word	0x003d08ff
 8001e34:	431bde83 	.word	0x431bde83
 8001e38:	10624dd3 	.word	0x10624dd3

08001e3c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b088      	sub	sp, #32
 8001e40:	af02      	add	r7, sp, #8
 8001e42:	60f8      	str	r0, [r7, #12]
 8001e44:	4608      	mov	r0, r1
 8001e46:	4611      	mov	r1, r2
 8001e48:	461a      	mov	r2, r3
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	817b      	strh	r3, [r7, #10]
 8001e4e:	460b      	mov	r3, r1
 8001e50:	813b      	strh	r3, [r7, #8]
 8001e52:	4613      	mov	r3, r2
 8001e54:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001e56:	f7ff f9b1 	bl	80011bc <HAL_GetTick>
 8001e5a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	2b20      	cmp	r3, #32
 8001e66:	f040 80d9 	bne.w	800201c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	9300      	str	r3, [sp, #0]
 8001e6e:	2319      	movs	r3, #25
 8001e70:	2201      	movs	r2, #1
 8001e72:	496d      	ldr	r1, [pc, #436]	; (8002028 <HAL_I2C_Mem_Write+0x1ec>)
 8001e74:	68f8      	ldr	r0, [r7, #12]
 8001e76:	f000 fcbb 	bl	80027f0 <I2C_WaitOnFlagUntilTimeout>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d001      	beq.n	8001e84 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001e80:	2302      	movs	r3, #2
 8001e82:	e0cc      	b.n	800201e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d101      	bne.n	8001e92 <HAL_I2C_Mem_Write+0x56>
 8001e8e:	2302      	movs	r3, #2
 8001e90:	e0c5      	b.n	800201e <HAL_I2C_Mem_Write+0x1e2>
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2201      	movs	r2, #1
 8001e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 0301 	and.w	r3, r3, #1
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d007      	beq.n	8001eb8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f042 0201 	orr.w	r2, r2, #1
 8001eb6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ec6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2221      	movs	r2, #33	; 0x21
 8001ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2240      	movs	r2, #64	; 0x40
 8001ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2200      	movs	r2, #0
 8001edc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	6a3a      	ldr	r2, [r7, #32]
 8001ee2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001ee8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eee:	b29a      	uxth	r2, r3
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	4a4d      	ldr	r2, [pc, #308]	; (800202c <HAL_I2C_Mem_Write+0x1f0>)
 8001ef8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001efa:	88f8      	ldrh	r0, [r7, #6]
 8001efc:	893a      	ldrh	r2, [r7, #8]
 8001efe:	8979      	ldrh	r1, [r7, #10]
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	9301      	str	r3, [sp, #4]
 8001f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f06:	9300      	str	r3, [sp, #0]
 8001f08:	4603      	mov	r3, r0
 8001f0a:	68f8      	ldr	r0, [r7, #12]
 8001f0c:	f000 faf2 	bl	80024f4 <I2C_RequestMemoryWrite>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d052      	beq.n	8001fbc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e081      	b.n	800201e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f1a:	697a      	ldr	r2, [r7, #20]
 8001f1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f1e:	68f8      	ldr	r0, [r7, #12]
 8001f20:	f000 fd3c 	bl	800299c <I2C_WaitOnTXEFlagUntilTimeout>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d00d      	beq.n	8001f46 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2e:	2b04      	cmp	r3, #4
 8001f30:	d107      	bne.n	8001f42 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f40:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e06b      	b.n	800201e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4a:	781a      	ldrb	r2, [r3, #0]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f56:	1c5a      	adds	r2, r3, #1
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f60:	3b01      	subs	r3, #1
 8001f62:	b29a      	uxth	r2, r3
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f6c:	b29b      	uxth	r3, r3
 8001f6e:	3b01      	subs	r3, #1
 8001f70:	b29a      	uxth	r2, r3
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	695b      	ldr	r3, [r3, #20]
 8001f7c:	f003 0304 	and.w	r3, r3, #4
 8001f80:	2b04      	cmp	r3, #4
 8001f82:	d11b      	bne.n	8001fbc <HAL_I2C_Mem_Write+0x180>
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d017      	beq.n	8001fbc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f90:	781a      	ldrb	r2, [r3, #0]
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f9c:	1c5a      	adds	r2, r3, #1
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fa6:	3b01      	subs	r3, #1
 8001fa8:	b29a      	uxth	r2, r3
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	3b01      	subs	r3, #1
 8001fb6:	b29a      	uxth	r2, r3
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d1aa      	bne.n	8001f1a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fc4:	697a      	ldr	r2, [r7, #20]
 8001fc6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001fc8:	68f8      	ldr	r0, [r7, #12]
 8001fca:	f000 fd28 	bl	8002a1e <I2C_WaitOnBTFFlagUntilTimeout>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d00d      	beq.n	8001ff0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd8:	2b04      	cmp	r3, #4
 8001fda:	d107      	bne.n	8001fec <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fea:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e016      	b.n	800201e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ffe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2220      	movs	r2, #32
 8002004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2200      	movs	r2, #0
 800200c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2200      	movs	r2, #0
 8002014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002018:	2300      	movs	r3, #0
 800201a:	e000      	b.n	800201e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800201c:	2302      	movs	r3, #2
  }
}
 800201e:	4618      	mov	r0, r3
 8002020:	3718      	adds	r7, #24
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	00100002 	.word	0x00100002
 800202c:	ffff0000 	.word	0xffff0000

08002030 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b08c      	sub	sp, #48	; 0x30
 8002034:	af02      	add	r7, sp, #8
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	4608      	mov	r0, r1
 800203a:	4611      	mov	r1, r2
 800203c:	461a      	mov	r2, r3
 800203e:	4603      	mov	r3, r0
 8002040:	817b      	strh	r3, [r7, #10]
 8002042:	460b      	mov	r3, r1
 8002044:	813b      	strh	r3, [r7, #8]
 8002046:	4613      	mov	r3, r2
 8002048:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800204a:	2300      	movs	r3, #0
 800204c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800204e:	f7ff f8b5 	bl	80011bc <HAL_GetTick>
 8002052:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800205a:	b2db      	uxtb	r3, r3
 800205c:	2b20      	cmp	r3, #32
 800205e:	f040 823d 	bne.w	80024dc <HAL_I2C_Mem_Read+0x4ac>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002064:	9300      	str	r3, [sp, #0]
 8002066:	2319      	movs	r3, #25
 8002068:	2201      	movs	r2, #1
 800206a:	4981      	ldr	r1, [pc, #516]	; (8002270 <HAL_I2C_Mem_Read+0x240>)
 800206c:	68f8      	ldr	r0, [r7, #12]
 800206e:	f000 fbbf 	bl	80027f0 <I2C_WaitOnFlagUntilTimeout>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002078:	2302      	movs	r3, #2
 800207a:	e230      	b.n	80024de <HAL_I2C_Mem_Read+0x4ae>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002082:	2b01      	cmp	r3, #1
 8002084:	d101      	bne.n	800208a <HAL_I2C_Mem_Read+0x5a>
 8002086:	2302      	movs	r3, #2
 8002088:	e229      	b.n	80024de <HAL_I2C_Mem_Read+0x4ae>
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2201      	movs	r2, #1
 800208e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0301 	and.w	r3, r3, #1
 800209c:	2b01      	cmp	r3, #1
 800209e:	d007      	beq.n	80020b0 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f042 0201 	orr.w	r2, r2, #1
 80020ae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020be:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2222      	movs	r2, #34	; 0x22
 80020c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2240      	movs	r2, #64	; 0x40
 80020cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2200      	movs	r2, #0
 80020d4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80020da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80020e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020e6:	b29a      	uxth	r2, r3
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	4a61      	ldr	r2, [pc, #388]	; (8002274 <HAL_I2C_Mem_Read+0x244>)
 80020f0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80020f2:	88f8      	ldrh	r0, [r7, #6]
 80020f4:	893a      	ldrh	r2, [r7, #8]
 80020f6:	8979      	ldrh	r1, [r7, #10]
 80020f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fa:	9301      	str	r3, [sp, #4]
 80020fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020fe:	9300      	str	r3, [sp, #0]
 8002100:	4603      	mov	r3, r0
 8002102:	68f8      	ldr	r0, [r7, #12]
 8002104:	f000 fa8c 	bl	8002620 <I2C_RequestMemoryRead>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e1e5      	b.n	80024de <HAL_I2C_Mem_Read+0x4ae>
    }

    if (hi2c->XferSize == 0U)
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002116:	2b00      	cmp	r3, #0
 8002118:	d113      	bne.n	8002142 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800211a:	2300      	movs	r3, #0
 800211c:	61fb      	str	r3, [r7, #28]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	695b      	ldr	r3, [r3, #20]
 8002124:	61fb      	str	r3, [r7, #28]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	699b      	ldr	r3, [r3, #24]
 800212c:	61fb      	str	r3, [r7, #28]
 800212e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800213e:	601a      	str	r2, [r3, #0]
 8002140:	e1b9      	b.n	80024b6 <HAL_I2C_Mem_Read+0x486>
    }
    else if (hi2c->XferSize == 1U)
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002146:	2b01      	cmp	r3, #1
 8002148:	d11d      	bne.n	8002186 <HAL_I2C_Mem_Read+0x156>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002158:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800215a:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800215c:	2300      	movs	r3, #0
 800215e:	61bb      	str	r3, [r7, #24]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	695b      	ldr	r3, [r3, #20]
 8002166:	61bb      	str	r3, [r7, #24]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	699b      	ldr	r3, [r3, #24]
 800216e:	61bb      	str	r3, [r7, #24]
 8002170:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002180:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002182:	b662      	cpsie	i
 8002184:	e197      	b.n	80024b6 <HAL_I2C_Mem_Read+0x486>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800218a:	2b02      	cmp	r3, #2
 800218c:	d11d      	bne.n	80021ca <HAL_I2C_Mem_Read+0x19a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800219c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800219e:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021a0:	2300      	movs	r3, #0
 80021a2:	617b      	str	r3, [r7, #20]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	695b      	ldr	r3, [r3, #20]
 80021aa:	617b      	str	r3, [r7, #20]
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	699b      	ldr	r3, [r3, #24]
 80021b2:	617b      	str	r3, [r7, #20]
 80021b4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021c4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80021c6:	b662      	cpsie	i
 80021c8:	e175      	b.n	80024b6 <HAL_I2C_Mem_Read+0x486>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80021d8:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021da:	2300      	movs	r3, #0
 80021dc:	613b      	str	r3, [r7, #16]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	695b      	ldr	r3, [r3, #20]
 80021e4:	613b      	str	r3, [r7, #16]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	699b      	ldr	r3, [r3, #24]
 80021ec:	613b      	str	r3, [r7, #16]
 80021ee:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80021f0:	e161      	b.n	80024b6 <HAL_I2C_Mem_Read+0x486>
    {
      if (hi2c->XferSize <= 3U)
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021f6:	2b03      	cmp	r3, #3
 80021f8:	f200 811a 	bhi.w	8002430 <HAL_I2C_Mem_Read+0x400>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002200:	2b01      	cmp	r3, #1
 8002202:	d123      	bne.n	800224c <HAL_I2C_Mem_Read+0x21c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002204:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002206:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002208:	68f8      	ldr	r0, [r7, #12]
 800220a:	f000 fc49 	bl	8002aa0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d001      	beq.n	8002218 <HAL_I2C_Mem_Read+0x1e8>
          {
            return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e162      	b.n	80024de <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	691a      	ldr	r2, [r3, #16]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002222:	b2d2      	uxtb	r2, r2
 8002224:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222a:	1c5a      	adds	r2, r3, #1
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002234:	3b01      	subs	r3, #1
 8002236:	b29a      	uxth	r2, r3
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002240:	b29b      	uxth	r3, r3
 8002242:	3b01      	subs	r3, #1
 8002244:	b29a      	uxth	r2, r3
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	855a      	strh	r2, [r3, #42]	; 0x2a
 800224a:	e134      	b.n	80024b6 <HAL_I2C_Mem_Read+0x486>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002250:	2b02      	cmp	r3, #2
 8002252:	d150      	bne.n	80022f6 <HAL_I2C_Mem_Read+0x2c6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002256:	9300      	str	r3, [sp, #0]
 8002258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800225a:	2200      	movs	r2, #0
 800225c:	4906      	ldr	r1, [pc, #24]	; (8002278 <HAL_I2C_Mem_Read+0x248>)
 800225e:	68f8      	ldr	r0, [r7, #12]
 8002260:	f000 fac6 	bl	80027f0 <I2C_WaitOnFlagUntilTimeout>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d008      	beq.n	800227c <HAL_I2C_Mem_Read+0x24c>
          {
            return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e137      	b.n	80024de <HAL_I2C_Mem_Read+0x4ae>
 800226e:	bf00      	nop
 8002270:	00100002 	.word	0x00100002
 8002274:	ffff0000 	.word	0xffff0000
 8002278:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800227c:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800228c:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	691a      	ldr	r2, [r3, #16]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002298:	b2d2      	uxtb	r2, r2
 800229a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a0:	1c5a      	adds	r2, r3, #1
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022aa:	3b01      	subs	r3, #1
 80022ac:	b29a      	uxth	r2, r3
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	3b01      	subs	r3, #1
 80022ba:	b29a      	uxth	r2, r3
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80022c0:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	691a      	ldr	r2, [r3, #16]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022cc:	b2d2      	uxtb	r2, r2
 80022ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d4:	1c5a      	adds	r2, r3, #1
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022de:	3b01      	subs	r3, #1
 80022e0:	b29a      	uxth	r2, r3
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	3b01      	subs	r3, #1
 80022ee:	b29a      	uxth	r2, r3
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80022f4:	e0df      	b.n	80024b6 <HAL_I2C_Mem_Read+0x486>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80022f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f8:	9300      	str	r3, [sp, #0]
 80022fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022fc:	2200      	movs	r2, #0
 80022fe:	497a      	ldr	r1, [pc, #488]	; (80024e8 <HAL_I2C_Mem_Read+0x4b8>)
 8002300:	68f8      	ldr	r0, [r7, #12]
 8002302:	f000 fa75 	bl	80027f0 <I2C_WaitOnFlagUntilTimeout>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d001      	beq.n	8002310 <HAL_I2C_Mem_Read+0x2e0>
          {
            return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e0e6      	b.n	80024de <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800231e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002320:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	691a      	ldr	r2, [r3, #16]
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232c:	b2d2      	uxtb	r2, r2
 800232e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002334:	1c5a      	adds	r2, r3, #1
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800233e:	3b01      	subs	r3, #1
 8002340:	b29a      	uxth	r2, r3
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800234a:	b29b      	uxth	r3, r3
 800234c:	3b01      	subs	r3, #1
 800234e:	b29a      	uxth	r2, r3
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002354:	4b65      	ldr	r3, [pc, #404]	; (80024ec <HAL_I2C_Mem_Read+0x4bc>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	08db      	lsrs	r3, r3, #3
 800235a:	4a65      	ldr	r2, [pc, #404]	; (80024f0 <HAL_I2C_Mem_Read+0x4c0>)
 800235c:	fba2 2303 	umull	r2, r3, r2, r3
 8002360:	0a1a      	lsrs	r2, r3, #8
 8002362:	4613      	mov	r3, r2
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	4413      	add	r3, r2
 8002368:	00da      	lsls	r2, r3, #3
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800236e:	6a3b      	ldr	r3, [r7, #32]
 8002370:	3b01      	subs	r3, #1
 8002372:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002374:	6a3b      	ldr	r3, [r7, #32]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d117      	bne.n	80023aa <HAL_I2C_Mem_Read+0x37a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2200      	movs	r2, #0
 800237e:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2220      	movs	r2, #32
 8002384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2200      	movs	r2, #0
 800238c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002394:	f043 0220 	orr.w	r2, r3, #32
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800239c:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2200      	movs	r2, #0
 80023a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e099      	b.n	80024de <HAL_I2C_Mem_Read+0x4ae>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	695b      	ldr	r3, [r3, #20]
 80023b0:	f003 0304 	and.w	r3, r3, #4
 80023b4:	2b04      	cmp	r3, #4
 80023b6:	d1da      	bne.n	800236e <HAL_I2C_Mem_Read+0x33e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	691a      	ldr	r2, [r3, #16]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d2:	b2d2      	uxtb	r2, r2
 80023d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023da:	1c5a      	adds	r2, r3, #1
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023e4:	3b01      	subs	r3, #1
 80023e6:	b29a      	uxth	r2, r3
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	3b01      	subs	r3, #1
 80023f4:	b29a      	uxth	r2, r3
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80023fa:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	691a      	ldr	r2, [r3, #16]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002406:	b2d2      	uxtb	r2, r2
 8002408:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240e:	1c5a      	adds	r2, r3, #1
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002418:	3b01      	subs	r3, #1
 800241a:	b29a      	uxth	r2, r3
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002424:	b29b      	uxth	r3, r3
 8002426:	3b01      	subs	r3, #1
 8002428:	b29a      	uxth	r2, r3
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800242e:	e042      	b.n	80024b6 <HAL_I2C_Mem_Read+0x486>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002430:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002432:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002434:	68f8      	ldr	r0, [r7, #12]
 8002436:	f000 fb33 	bl	8002aa0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d001      	beq.n	8002444 <HAL_I2C_Mem_Read+0x414>
        {
          return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e04c      	b.n	80024de <HAL_I2C_Mem_Read+0x4ae>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	691a      	ldr	r2, [r3, #16]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244e:	b2d2      	uxtb	r2, r2
 8002450:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002456:	1c5a      	adds	r2, r3, #1
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002460:	3b01      	subs	r3, #1
 8002462:	b29a      	uxth	r2, r3
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800246c:	b29b      	uxth	r3, r3
 800246e:	3b01      	subs	r3, #1
 8002470:	b29a      	uxth	r2, r3
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	695b      	ldr	r3, [r3, #20]
 800247c:	f003 0304 	and.w	r3, r3, #4
 8002480:	2b04      	cmp	r3, #4
 8002482:	d118      	bne.n	80024b6 <HAL_I2C_Mem_Read+0x486>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	691a      	ldr	r2, [r3, #16]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248e:	b2d2      	uxtb	r2, r2
 8002490:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002496:	1c5a      	adds	r2, r3, #1
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024a0:	3b01      	subs	r3, #1
 80024a2:	b29a      	uxth	r2, r3
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	3b01      	subs	r3, #1
 80024b0:	b29a      	uxth	r2, r3
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	f47f ae99 	bne.w	80021f2 <HAL_I2C_Mem_Read+0x1c2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2220      	movs	r2, #32
 80024c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2200      	movs	r2, #0
 80024cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2200      	movs	r2, #0
 80024d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80024d8:	2300      	movs	r3, #0
 80024da:	e000      	b.n	80024de <HAL_I2C_Mem_Read+0x4ae>
  }
  else
  {
    return HAL_BUSY;
 80024dc:	2302      	movs	r3, #2
  }
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3728      	adds	r7, #40	; 0x28
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	00010004 	.word	0x00010004
 80024ec:	20000060 	.word	0x20000060
 80024f0:	14f8b589 	.word	0x14f8b589

080024f4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b088      	sub	sp, #32
 80024f8:	af02      	add	r7, sp, #8
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	4608      	mov	r0, r1
 80024fe:	4611      	mov	r1, r2
 8002500:	461a      	mov	r2, r3
 8002502:	4603      	mov	r3, r0
 8002504:	817b      	strh	r3, [r7, #10]
 8002506:	460b      	mov	r3, r1
 8002508:	813b      	strh	r3, [r7, #8]
 800250a:	4613      	mov	r3, r2
 800250c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800251c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800251e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002520:	9300      	str	r3, [sp, #0]
 8002522:	6a3b      	ldr	r3, [r7, #32]
 8002524:	2200      	movs	r2, #0
 8002526:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800252a:	68f8      	ldr	r0, [r7, #12]
 800252c:	f000 f960 	bl	80027f0 <I2C_WaitOnFlagUntilTimeout>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d00d      	beq.n	8002552 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002540:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002544:	d103      	bne.n	800254e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	f44f 7200 	mov.w	r2, #512	; 0x200
 800254c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e05f      	b.n	8002612 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002552:	897b      	ldrh	r3, [r7, #10]
 8002554:	b2db      	uxtb	r3, r3
 8002556:	461a      	mov	r2, r3
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002560:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002564:	6a3a      	ldr	r2, [r7, #32]
 8002566:	492d      	ldr	r1, [pc, #180]	; (800261c <I2C_RequestMemoryWrite+0x128>)
 8002568:	68f8      	ldr	r0, [r7, #12]
 800256a:	f000 f998 	bl	800289e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d001      	beq.n	8002578 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e04c      	b.n	8002612 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002578:	2300      	movs	r3, #0
 800257a:	617b      	str	r3, [r7, #20]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	695b      	ldr	r3, [r3, #20]
 8002582:	617b      	str	r3, [r7, #20]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	699b      	ldr	r3, [r3, #24]
 800258a:	617b      	str	r3, [r7, #20]
 800258c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800258e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002590:	6a39      	ldr	r1, [r7, #32]
 8002592:	68f8      	ldr	r0, [r7, #12]
 8002594:	f000 fa02 	bl	800299c <I2C_WaitOnTXEFlagUntilTimeout>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d00d      	beq.n	80025ba <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a2:	2b04      	cmp	r3, #4
 80025a4:	d107      	bne.n	80025b6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025b4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e02b      	b.n	8002612 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80025ba:	88fb      	ldrh	r3, [r7, #6]
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d105      	bne.n	80025cc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80025c0:	893b      	ldrh	r3, [r7, #8]
 80025c2:	b2da      	uxtb	r2, r3
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	611a      	str	r2, [r3, #16]
 80025ca:	e021      	b.n	8002610 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80025cc:	893b      	ldrh	r3, [r7, #8]
 80025ce:	0a1b      	lsrs	r3, r3, #8
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	b2da      	uxtb	r2, r3
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025dc:	6a39      	ldr	r1, [r7, #32]
 80025de:	68f8      	ldr	r0, [r7, #12]
 80025e0:	f000 f9dc 	bl	800299c <I2C_WaitOnTXEFlagUntilTimeout>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d00d      	beq.n	8002606 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ee:	2b04      	cmp	r3, #4
 80025f0:	d107      	bne.n	8002602 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002600:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e005      	b.n	8002612 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002606:	893b      	ldrh	r3, [r7, #8]
 8002608:	b2da      	uxtb	r2, r3
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002610:	2300      	movs	r3, #0
}
 8002612:	4618      	mov	r0, r3
 8002614:	3718      	adds	r7, #24
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	00010002 	.word	0x00010002

08002620 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b088      	sub	sp, #32
 8002624:	af02      	add	r7, sp, #8
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	4608      	mov	r0, r1
 800262a:	4611      	mov	r1, r2
 800262c:	461a      	mov	r2, r3
 800262e:	4603      	mov	r3, r0
 8002630:	817b      	strh	r3, [r7, #10]
 8002632:	460b      	mov	r3, r1
 8002634:	813b      	strh	r3, [r7, #8]
 8002636:	4613      	mov	r3, r2
 8002638:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002648:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002658:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800265a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265c:	9300      	str	r3, [sp, #0]
 800265e:	6a3b      	ldr	r3, [r7, #32]
 8002660:	2200      	movs	r2, #0
 8002662:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002666:	68f8      	ldr	r0, [r7, #12]
 8002668:	f000 f8c2 	bl	80027f0 <I2C_WaitOnFlagUntilTimeout>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d00d      	beq.n	800268e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800267c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002680:	d103      	bne.n	800268a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002688:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	e0aa      	b.n	80027e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800268e:	897b      	ldrh	r3, [r7, #10]
 8002690:	b2db      	uxtb	r3, r3
 8002692:	461a      	mov	r2, r3
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800269c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800269e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a0:	6a3a      	ldr	r2, [r7, #32]
 80026a2:	4952      	ldr	r1, [pc, #328]	; (80027ec <I2C_RequestMemoryRead+0x1cc>)
 80026a4:	68f8      	ldr	r0, [r7, #12]
 80026a6:	f000 f8fa 	bl	800289e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d001      	beq.n	80026b4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e097      	b.n	80027e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026b4:	2300      	movs	r3, #0
 80026b6:	617b      	str	r3, [r7, #20]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	695b      	ldr	r3, [r3, #20]
 80026be:	617b      	str	r3, [r7, #20]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	699b      	ldr	r3, [r3, #24]
 80026c6:	617b      	str	r3, [r7, #20]
 80026c8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026cc:	6a39      	ldr	r1, [r7, #32]
 80026ce:	68f8      	ldr	r0, [r7, #12]
 80026d0:	f000 f964 	bl	800299c <I2C_WaitOnTXEFlagUntilTimeout>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d00d      	beq.n	80026f6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026de:	2b04      	cmp	r3, #4
 80026e0:	d107      	bne.n	80026f2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026f0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e076      	b.n	80027e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80026f6:	88fb      	ldrh	r3, [r7, #6]
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d105      	bne.n	8002708 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80026fc:	893b      	ldrh	r3, [r7, #8]
 80026fe:	b2da      	uxtb	r2, r3
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	611a      	str	r2, [r3, #16]
 8002706:	e021      	b.n	800274c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002708:	893b      	ldrh	r3, [r7, #8]
 800270a:	0a1b      	lsrs	r3, r3, #8
 800270c:	b29b      	uxth	r3, r3
 800270e:	b2da      	uxtb	r2, r3
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002716:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002718:	6a39      	ldr	r1, [r7, #32]
 800271a:	68f8      	ldr	r0, [r7, #12]
 800271c:	f000 f93e 	bl	800299c <I2C_WaitOnTXEFlagUntilTimeout>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d00d      	beq.n	8002742 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272a:	2b04      	cmp	r3, #4
 800272c:	d107      	bne.n	800273e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800273c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e050      	b.n	80027e4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002742:	893b      	ldrh	r3, [r7, #8]
 8002744:	b2da      	uxtb	r2, r3
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800274c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800274e:	6a39      	ldr	r1, [r7, #32]
 8002750:	68f8      	ldr	r0, [r7, #12]
 8002752:	f000 f923 	bl	800299c <I2C_WaitOnTXEFlagUntilTimeout>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d00d      	beq.n	8002778 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002760:	2b04      	cmp	r3, #4
 8002762:	d107      	bne.n	8002774 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002772:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e035      	b.n	80027e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002786:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278a:	9300      	str	r3, [sp, #0]
 800278c:	6a3b      	ldr	r3, [r7, #32]
 800278e:	2200      	movs	r2, #0
 8002790:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002794:	68f8      	ldr	r0, [r7, #12]
 8002796:	f000 f82b 	bl	80027f0 <I2C_WaitOnFlagUntilTimeout>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d00d      	beq.n	80027bc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027ae:	d103      	bne.n	80027b8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80027b8:	2303      	movs	r3, #3
 80027ba:	e013      	b.n	80027e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80027bc:	897b      	ldrh	r3, [r7, #10]
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	f043 0301 	orr.w	r3, r3, #1
 80027c4:	b2da      	uxtb	r2, r3
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80027cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ce:	6a3a      	ldr	r2, [r7, #32]
 80027d0:	4906      	ldr	r1, [pc, #24]	; (80027ec <I2C_RequestMemoryRead+0x1cc>)
 80027d2:	68f8      	ldr	r0, [r7, #12]
 80027d4:	f000 f863 	bl	800289e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d001      	beq.n	80027e2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e000      	b.n	80027e4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80027e2:	2300      	movs	r3, #0
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3718      	adds	r7, #24
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	00010002 	.word	0x00010002

080027f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	60f8      	str	r0, [r7, #12]
 80027f8:	60b9      	str	r1, [r7, #8]
 80027fa:	603b      	str	r3, [r7, #0]
 80027fc:	4613      	mov	r3, r2
 80027fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002800:	e025      	b.n	800284e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002808:	d021      	beq.n	800284e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800280a:	f7fe fcd7 	bl	80011bc <HAL_GetTick>
 800280e:	4602      	mov	r2, r0
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	683a      	ldr	r2, [r7, #0]
 8002816:	429a      	cmp	r2, r3
 8002818:	d302      	bcc.n	8002820 <I2C_WaitOnFlagUntilTimeout+0x30>
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d116      	bne.n	800284e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2200      	movs	r2, #0
 8002824:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2220      	movs	r2, #32
 800282a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2200      	movs	r2, #0
 8002832:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283a:	f043 0220 	orr.w	r2, r3, #32
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2200      	movs	r2, #0
 8002846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e023      	b.n	8002896 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	0c1b      	lsrs	r3, r3, #16
 8002852:	b2db      	uxtb	r3, r3
 8002854:	2b01      	cmp	r3, #1
 8002856:	d10d      	bne.n	8002874 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	695b      	ldr	r3, [r3, #20]
 800285e:	43da      	mvns	r2, r3
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	4013      	ands	r3, r2
 8002864:	b29b      	uxth	r3, r3
 8002866:	2b00      	cmp	r3, #0
 8002868:	bf0c      	ite	eq
 800286a:	2301      	moveq	r3, #1
 800286c:	2300      	movne	r3, #0
 800286e:	b2db      	uxtb	r3, r3
 8002870:	461a      	mov	r2, r3
 8002872:	e00c      	b.n	800288e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	699b      	ldr	r3, [r3, #24]
 800287a:	43da      	mvns	r2, r3
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	4013      	ands	r3, r2
 8002880:	b29b      	uxth	r3, r3
 8002882:	2b00      	cmp	r3, #0
 8002884:	bf0c      	ite	eq
 8002886:	2301      	moveq	r3, #1
 8002888:	2300      	movne	r3, #0
 800288a:	b2db      	uxtb	r3, r3
 800288c:	461a      	mov	r2, r3
 800288e:	79fb      	ldrb	r3, [r7, #7]
 8002890:	429a      	cmp	r2, r3
 8002892:	d0b6      	beq.n	8002802 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002894:	2300      	movs	r3, #0
}
 8002896:	4618      	mov	r0, r3
 8002898:	3710      	adds	r7, #16
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}

0800289e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800289e:	b580      	push	{r7, lr}
 80028a0:	b084      	sub	sp, #16
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	60f8      	str	r0, [r7, #12]
 80028a6:	60b9      	str	r1, [r7, #8]
 80028a8:	607a      	str	r2, [r7, #4]
 80028aa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80028ac:	e051      	b.n	8002952 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	695b      	ldr	r3, [r3, #20]
 80028b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028bc:	d123      	bne.n	8002906 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028cc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80028d6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2200      	movs	r2, #0
 80028dc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2220      	movs	r2, #32
 80028e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2200      	movs	r2, #0
 80028ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f2:	f043 0204 	orr.w	r2, r3, #4
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2200      	movs	r2, #0
 80028fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e046      	b.n	8002994 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800290c:	d021      	beq.n	8002952 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800290e:	f7fe fc55 	bl	80011bc <HAL_GetTick>
 8002912:	4602      	mov	r2, r0
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	429a      	cmp	r2, r3
 800291c:	d302      	bcc.n	8002924 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d116      	bne.n	8002952 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2200      	movs	r2, #0
 8002928:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2220      	movs	r2, #32
 800292e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2200      	movs	r2, #0
 8002936:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293e:	f043 0220 	orr.w	r2, r3, #32
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2200      	movs	r2, #0
 800294a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e020      	b.n	8002994 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	0c1b      	lsrs	r3, r3, #16
 8002956:	b2db      	uxtb	r3, r3
 8002958:	2b01      	cmp	r3, #1
 800295a:	d10c      	bne.n	8002976 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	695b      	ldr	r3, [r3, #20]
 8002962:	43da      	mvns	r2, r3
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	4013      	ands	r3, r2
 8002968:	b29b      	uxth	r3, r3
 800296a:	2b00      	cmp	r3, #0
 800296c:	bf14      	ite	ne
 800296e:	2301      	movne	r3, #1
 8002970:	2300      	moveq	r3, #0
 8002972:	b2db      	uxtb	r3, r3
 8002974:	e00b      	b.n	800298e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	699b      	ldr	r3, [r3, #24]
 800297c:	43da      	mvns	r2, r3
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	4013      	ands	r3, r2
 8002982:	b29b      	uxth	r3, r3
 8002984:	2b00      	cmp	r3, #0
 8002986:	bf14      	ite	ne
 8002988:	2301      	movne	r3, #1
 800298a:	2300      	moveq	r3, #0
 800298c:	b2db      	uxtb	r3, r3
 800298e:	2b00      	cmp	r3, #0
 8002990:	d18d      	bne.n	80028ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002992:	2300      	movs	r3, #0
}
 8002994:	4618      	mov	r0, r3
 8002996:	3710      	adds	r7, #16
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}

0800299c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	60f8      	str	r0, [r7, #12]
 80029a4:	60b9      	str	r1, [r7, #8]
 80029a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029a8:	e02d      	b.n	8002a06 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80029aa:	68f8      	ldr	r0, [r7, #12]
 80029ac:	f000 f8ce 	bl	8002b4c <I2C_IsAcknowledgeFailed>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d001      	beq.n	80029ba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e02d      	b.n	8002a16 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029c0:	d021      	beq.n	8002a06 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029c2:	f7fe fbfb 	bl	80011bc <HAL_GetTick>
 80029c6:	4602      	mov	r2, r0
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	68ba      	ldr	r2, [r7, #8]
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d302      	bcc.n	80029d8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d116      	bne.n	8002a06 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2200      	movs	r2, #0
 80029dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2220      	movs	r2, #32
 80029e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2200      	movs	r2, #0
 80029ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f2:	f043 0220 	orr.w	r2, r3, #32
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e007      	b.n	8002a16 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	695b      	ldr	r3, [r3, #20]
 8002a0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a10:	2b80      	cmp	r3, #128	; 0x80
 8002a12:	d1ca      	bne.n	80029aa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3710      	adds	r7, #16
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}

08002a1e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a1e:	b580      	push	{r7, lr}
 8002a20:	b084      	sub	sp, #16
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	60f8      	str	r0, [r7, #12]
 8002a26:	60b9      	str	r1, [r7, #8]
 8002a28:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a2a:	e02d      	b.n	8002a88 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a2c:	68f8      	ldr	r0, [r7, #12]
 8002a2e:	f000 f88d 	bl	8002b4c <I2C_IsAcknowledgeFailed>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d001      	beq.n	8002a3c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e02d      	b.n	8002a98 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a42:	d021      	beq.n	8002a88 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a44:	f7fe fbba 	bl	80011bc <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	68ba      	ldr	r2, [r7, #8]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d302      	bcc.n	8002a5a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d116      	bne.n	8002a88 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2220      	movs	r2, #32
 8002a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a74:	f043 0220 	orr.w	r2, r3, #32
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e007      	b.n	8002a98 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	695b      	ldr	r3, [r3, #20]
 8002a8e:	f003 0304 	and.w	r3, r3, #4
 8002a92:	2b04      	cmp	r3, #4
 8002a94:	d1ca      	bne.n	8002a2c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a96:	2300      	movs	r3, #0
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3710      	adds	r7, #16
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	60b9      	str	r1, [r7, #8]
 8002aaa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002aac:	e042      	b.n	8002b34 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	695b      	ldr	r3, [r3, #20]
 8002ab4:	f003 0310 	and.w	r3, r3, #16
 8002ab8:	2b10      	cmp	r3, #16
 8002aba:	d119      	bne.n	8002af0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f06f 0210 	mvn.w	r2, #16
 8002ac4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2220      	movs	r2, #32
 8002ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e029      	b.n	8002b44 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002af0:	f7fe fb64 	bl	80011bc <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	68ba      	ldr	r2, [r7, #8]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d302      	bcc.n	8002b06 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d116      	bne.n	8002b34 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2220      	movs	r2, #32
 8002b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2200      	movs	r2, #0
 8002b18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b20:	f043 0220 	orr.w	r2, r3, #32
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e007      	b.n	8002b44 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	695b      	ldr	r3, [r3, #20]
 8002b3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b3e:	2b40      	cmp	r3, #64	; 0x40
 8002b40:	d1b5      	bne.n	8002aae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002b42:	2300      	movs	r3, #0
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3710      	adds	r7, #16
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	695b      	ldr	r3, [r3, #20]
 8002b5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b62:	d11b      	bne.n	8002b9c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b6c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2220      	movs	r2, #32
 8002b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b88:	f043 0204 	orr.w	r2, r3, #4
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e000      	b.n	8002b9e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	370c      	adds	r7, #12
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bc80      	pop	{r7}
 8002ba6:	4770      	bx	lr

08002ba8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b086      	sub	sp, #24
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d101      	bne.n	8002bba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e26c      	b.n	8003094 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0301 	and.w	r3, r3, #1
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	f000 8087 	beq.w	8002cd6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bc8:	4b92      	ldr	r3, [pc, #584]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f003 030c 	and.w	r3, r3, #12
 8002bd0:	2b04      	cmp	r3, #4
 8002bd2:	d00c      	beq.n	8002bee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002bd4:	4b8f      	ldr	r3, [pc, #572]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f003 030c 	and.w	r3, r3, #12
 8002bdc:	2b08      	cmp	r3, #8
 8002bde:	d112      	bne.n	8002c06 <HAL_RCC_OscConfig+0x5e>
 8002be0:	4b8c      	ldr	r3, [pc, #560]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002be8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bec:	d10b      	bne.n	8002c06 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bee:	4b89      	ldr	r3, [pc, #548]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d06c      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x12c>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d168      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e246      	b.n	8003094 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c0e:	d106      	bne.n	8002c1e <HAL_RCC_OscConfig+0x76>
 8002c10:	4b80      	ldr	r3, [pc, #512]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a7f      	ldr	r2, [pc, #508]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002c16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c1a:	6013      	str	r3, [r2, #0]
 8002c1c:	e02e      	b.n	8002c7c <HAL_RCC_OscConfig+0xd4>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d10c      	bne.n	8002c40 <HAL_RCC_OscConfig+0x98>
 8002c26:	4b7b      	ldr	r3, [pc, #492]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a7a      	ldr	r2, [pc, #488]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002c2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c30:	6013      	str	r3, [r2, #0]
 8002c32:	4b78      	ldr	r3, [pc, #480]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a77      	ldr	r2, [pc, #476]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002c38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c3c:	6013      	str	r3, [r2, #0]
 8002c3e:	e01d      	b.n	8002c7c <HAL_RCC_OscConfig+0xd4>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c48:	d10c      	bne.n	8002c64 <HAL_RCC_OscConfig+0xbc>
 8002c4a:	4b72      	ldr	r3, [pc, #456]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a71      	ldr	r2, [pc, #452]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002c50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c54:	6013      	str	r3, [r2, #0]
 8002c56:	4b6f      	ldr	r3, [pc, #444]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a6e      	ldr	r2, [pc, #440]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002c5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c60:	6013      	str	r3, [r2, #0]
 8002c62:	e00b      	b.n	8002c7c <HAL_RCC_OscConfig+0xd4>
 8002c64:	4b6b      	ldr	r3, [pc, #428]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a6a      	ldr	r2, [pc, #424]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002c6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c6e:	6013      	str	r3, [r2, #0]
 8002c70:	4b68      	ldr	r3, [pc, #416]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a67      	ldr	r2, [pc, #412]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002c76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c7a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d013      	beq.n	8002cac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c84:	f7fe fa9a 	bl	80011bc <HAL_GetTick>
 8002c88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c8a:	e008      	b.n	8002c9e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c8c:	f7fe fa96 	bl	80011bc <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	2b64      	cmp	r3, #100	; 0x64
 8002c98:	d901      	bls.n	8002c9e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e1fa      	b.n	8003094 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c9e:	4b5d      	ldr	r3, [pc, #372]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d0f0      	beq.n	8002c8c <HAL_RCC_OscConfig+0xe4>
 8002caa:	e014      	b.n	8002cd6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cac:	f7fe fa86 	bl	80011bc <HAL_GetTick>
 8002cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cb2:	e008      	b.n	8002cc6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cb4:	f7fe fa82 	bl	80011bc <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	2b64      	cmp	r3, #100	; 0x64
 8002cc0:	d901      	bls.n	8002cc6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e1e6      	b.n	8003094 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cc6:	4b53      	ldr	r3, [pc, #332]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d1f0      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x10c>
 8002cd2:	e000      	b.n	8002cd6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0302 	and.w	r3, r3, #2
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d063      	beq.n	8002daa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ce2:	4b4c      	ldr	r3, [pc, #304]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	f003 030c 	and.w	r3, r3, #12
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d00b      	beq.n	8002d06 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002cee:	4b49      	ldr	r3, [pc, #292]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	f003 030c 	and.w	r3, r3, #12
 8002cf6:	2b08      	cmp	r3, #8
 8002cf8:	d11c      	bne.n	8002d34 <HAL_RCC_OscConfig+0x18c>
 8002cfa:	4b46      	ldr	r3, [pc, #280]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d116      	bne.n	8002d34 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d06:	4b43      	ldr	r3, [pc, #268]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0302 	and.w	r3, r3, #2
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d005      	beq.n	8002d1e <HAL_RCC_OscConfig+0x176>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	691b      	ldr	r3, [r3, #16]
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d001      	beq.n	8002d1e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e1ba      	b.n	8003094 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d1e:	4b3d      	ldr	r3, [pc, #244]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	00db      	lsls	r3, r3, #3
 8002d2c:	4939      	ldr	r1, [pc, #228]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d32:	e03a      	b.n	8002daa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	691b      	ldr	r3, [r3, #16]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d020      	beq.n	8002d7e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d3c:	4b36      	ldr	r3, [pc, #216]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002d3e:	2201      	movs	r2, #1
 8002d40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d42:	f7fe fa3b 	bl	80011bc <HAL_GetTick>
 8002d46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d48:	e008      	b.n	8002d5c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d4a:	f7fe fa37 	bl	80011bc <HAL_GetTick>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d901      	bls.n	8002d5c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e19b      	b.n	8003094 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d5c:	4b2d      	ldr	r3, [pc, #180]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0302 	and.w	r3, r3, #2
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d0f0      	beq.n	8002d4a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d68:	4b2a      	ldr	r3, [pc, #168]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	695b      	ldr	r3, [r3, #20]
 8002d74:	00db      	lsls	r3, r3, #3
 8002d76:	4927      	ldr	r1, [pc, #156]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	600b      	str	r3, [r1, #0]
 8002d7c:	e015      	b.n	8002daa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d7e:	4b26      	ldr	r3, [pc, #152]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d84:	f7fe fa1a 	bl	80011bc <HAL_GetTick>
 8002d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d8a:	e008      	b.n	8002d9e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d8c:	f7fe fa16 	bl	80011bc <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d901      	bls.n	8002d9e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e17a      	b.n	8003094 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d9e:	4b1d      	ldr	r3, [pc, #116]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0302 	and.w	r3, r3, #2
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d1f0      	bne.n	8002d8c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0308 	and.w	r3, r3, #8
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d03a      	beq.n	8002e2c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	699b      	ldr	r3, [r3, #24]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d019      	beq.n	8002df2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dbe:	4b17      	ldr	r3, [pc, #92]	; (8002e1c <HAL_RCC_OscConfig+0x274>)
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dc4:	f7fe f9fa 	bl	80011bc <HAL_GetTick>
 8002dc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dca:	e008      	b.n	8002dde <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dcc:	f7fe f9f6 	bl	80011bc <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d901      	bls.n	8002dde <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e15a      	b.n	8003094 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dde:	4b0d      	ldr	r3, [pc, #52]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de2:	f003 0302 	and.w	r3, r3, #2
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d0f0      	beq.n	8002dcc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002dea:	2001      	movs	r0, #1
 8002dec:	f000 fada 	bl	80033a4 <RCC_Delay>
 8002df0:	e01c      	b.n	8002e2c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002df2:	4b0a      	ldr	r3, [pc, #40]	; (8002e1c <HAL_RCC_OscConfig+0x274>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002df8:	f7fe f9e0 	bl	80011bc <HAL_GetTick>
 8002dfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dfe:	e00f      	b.n	8002e20 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e00:	f7fe f9dc 	bl	80011bc <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d908      	bls.n	8002e20 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e140      	b.n	8003094 <HAL_RCC_OscConfig+0x4ec>
 8002e12:	bf00      	nop
 8002e14:	40021000 	.word	0x40021000
 8002e18:	42420000 	.word	0x42420000
 8002e1c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e20:	4b9e      	ldr	r3, [pc, #632]	; (800309c <HAL_RCC_OscConfig+0x4f4>)
 8002e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e24:	f003 0302 	and.w	r3, r3, #2
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d1e9      	bne.n	8002e00 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0304 	and.w	r3, r3, #4
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	f000 80a6 	beq.w	8002f86 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e3e:	4b97      	ldr	r3, [pc, #604]	; (800309c <HAL_RCC_OscConfig+0x4f4>)
 8002e40:	69db      	ldr	r3, [r3, #28]
 8002e42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d10d      	bne.n	8002e66 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e4a:	4b94      	ldr	r3, [pc, #592]	; (800309c <HAL_RCC_OscConfig+0x4f4>)
 8002e4c:	69db      	ldr	r3, [r3, #28]
 8002e4e:	4a93      	ldr	r2, [pc, #588]	; (800309c <HAL_RCC_OscConfig+0x4f4>)
 8002e50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e54:	61d3      	str	r3, [r2, #28]
 8002e56:	4b91      	ldr	r3, [pc, #580]	; (800309c <HAL_RCC_OscConfig+0x4f4>)
 8002e58:	69db      	ldr	r3, [r3, #28]
 8002e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e5e:	60bb      	str	r3, [r7, #8]
 8002e60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e62:	2301      	movs	r3, #1
 8002e64:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e66:	4b8e      	ldr	r3, [pc, #568]	; (80030a0 <HAL_RCC_OscConfig+0x4f8>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d118      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e72:	4b8b      	ldr	r3, [pc, #556]	; (80030a0 <HAL_RCC_OscConfig+0x4f8>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a8a      	ldr	r2, [pc, #552]	; (80030a0 <HAL_RCC_OscConfig+0x4f8>)
 8002e78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e7e:	f7fe f99d 	bl	80011bc <HAL_GetTick>
 8002e82:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e84:	e008      	b.n	8002e98 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e86:	f7fe f999 	bl	80011bc <HAL_GetTick>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	2b64      	cmp	r3, #100	; 0x64
 8002e92:	d901      	bls.n	8002e98 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002e94:	2303      	movs	r3, #3
 8002e96:	e0fd      	b.n	8003094 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e98:	4b81      	ldr	r3, [pc, #516]	; (80030a0 <HAL_RCC_OscConfig+0x4f8>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d0f0      	beq.n	8002e86 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d106      	bne.n	8002eba <HAL_RCC_OscConfig+0x312>
 8002eac:	4b7b      	ldr	r3, [pc, #492]	; (800309c <HAL_RCC_OscConfig+0x4f4>)
 8002eae:	6a1b      	ldr	r3, [r3, #32]
 8002eb0:	4a7a      	ldr	r2, [pc, #488]	; (800309c <HAL_RCC_OscConfig+0x4f4>)
 8002eb2:	f043 0301 	orr.w	r3, r3, #1
 8002eb6:	6213      	str	r3, [r2, #32]
 8002eb8:	e02d      	b.n	8002f16 <HAL_RCC_OscConfig+0x36e>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d10c      	bne.n	8002edc <HAL_RCC_OscConfig+0x334>
 8002ec2:	4b76      	ldr	r3, [pc, #472]	; (800309c <HAL_RCC_OscConfig+0x4f4>)
 8002ec4:	6a1b      	ldr	r3, [r3, #32]
 8002ec6:	4a75      	ldr	r2, [pc, #468]	; (800309c <HAL_RCC_OscConfig+0x4f4>)
 8002ec8:	f023 0301 	bic.w	r3, r3, #1
 8002ecc:	6213      	str	r3, [r2, #32]
 8002ece:	4b73      	ldr	r3, [pc, #460]	; (800309c <HAL_RCC_OscConfig+0x4f4>)
 8002ed0:	6a1b      	ldr	r3, [r3, #32]
 8002ed2:	4a72      	ldr	r2, [pc, #456]	; (800309c <HAL_RCC_OscConfig+0x4f4>)
 8002ed4:	f023 0304 	bic.w	r3, r3, #4
 8002ed8:	6213      	str	r3, [r2, #32]
 8002eda:	e01c      	b.n	8002f16 <HAL_RCC_OscConfig+0x36e>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	2b05      	cmp	r3, #5
 8002ee2:	d10c      	bne.n	8002efe <HAL_RCC_OscConfig+0x356>
 8002ee4:	4b6d      	ldr	r3, [pc, #436]	; (800309c <HAL_RCC_OscConfig+0x4f4>)
 8002ee6:	6a1b      	ldr	r3, [r3, #32]
 8002ee8:	4a6c      	ldr	r2, [pc, #432]	; (800309c <HAL_RCC_OscConfig+0x4f4>)
 8002eea:	f043 0304 	orr.w	r3, r3, #4
 8002eee:	6213      	str	r3, [r2, #32]
 8002ef0:	4b6a      	ldr	r3, [pc, #424]	; (800309c <HAL_RCC_OscConfig+0x4f4>)
 8002ef2:	6a1b      	ldr	r3, [r3, #32]
 8002ef4:	4a69      	ldr	r2, [pc, #420]	; (800309c <HAL_RCC_OscConfig+0x4f4>)
 8002ef6:	f043 0301 	orr.w	r3, r3, #1
 8002efa:	6213      	str	r3, [r2, #32]
 8002efc:	e00b      	b.n	8002f16 <HAL_RCC_OscConfig+0x36e>
 8002efe:	4b67      	ldr	r3, [pc, #412]	; (800309c <HAL_RCC_OscConfig+0x4f4>)
 8002f00:	6a1b      	ldr	r3, [r3, #32]
 8002f02:	4a66      	ldr	r2, [pc, #408]	; (800309c <HAL_RCC_OscConfig+0x4f4>)
 8002f04:	f023 0301 	bic.w	r3, r3, #1
 8002f08:	6213      	str	r3, [r2, #32]
 8002f0a:	4b64      	ldr	r3, [pc, #400]	; (800309c <HAL_RCC_OscConfig+0x4f4>)
 8002f0c:	6a1b      	ldr	r3, [r3, #32]
 8002f0e:	4a63      	ldr	r2, [pc, #396]	; (800309c <HAL_RCC_OscConfig+0x4f4>)
 8002f10:	f023 0304 	bic.w	r3, r3, #4
 8002f14:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d015      	beq.n	8002f4a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f1e:	f7fe f94d 	bl	80011bc <HAL_GetTick>
 8002f22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f24:	e00a      	b.n	8002f3c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f26:	f7fe f949 	bl	80011bc <HAL_GetTick>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d901      	bls.n	8002f3c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	e0ab      	b.n	8003094 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f3c:	4b57      	ldr	r3, [pc, #348]	; (800309c <HAL_RCC_OscConfig+0x4f4>)
 8002f3e:	6a1b      	ldr	r3, [r3, #32]
 8002f40:	f003 0302 	and.w	r3, r3, #2
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d0ee      	beq.n	8002f26 <HAL_RCC_OscConfig+0x37e>
 8002f48:	e014      	b.n	8002f74 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f4a:	f7fe f937 	bl	80011bc <HAL_GetTick>
 8002f4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f50:	e00a      	b.n	8002f68 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f52:	f7fe f933 	bl	80011bc <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d901      	bls.n	8002f68 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	e095      	b.n	8003094 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f68:	4b4c      	ldr	r3, [pc, #304]	; (800309c <HAL_RCC_OscConfig+0x4f4>)
 8002f6a:	6a1b      	ldr	r3, [r3, #32]
 8002f6c:	f003 0302 	and.w	r3, r3, #2
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d1ee      	bne.n	8002f52 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f74:	7dfb      	ldrb	r3, [r7, #23]
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d105      	bne.n	8002f86 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f7a:	4b48      	ldr	r3, [pc, #288]	; (800309c <HAL_RCC_OscConfig+0x4f4>)
 8002f7c:	69db      	ldr	r3, [r3, #28]
 8002f7e:	4a47      	ldr	r2, [pc, #284]	; (800309c <HAL_RCC_OscConfig+0x4f4>)
 8002f80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f84:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	69db      	ldr	r3, [r3, #28]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	f000 8081 	beq.w	8003092 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f90:	4b42      	ldr	r3, [pc, #264]	; (800309c <HAL_RCC_OscConfig+0x4f4>)
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f003 030c 	and.w	r3, r3, #12
 8002f98:	2b08      	cmp	r3, #8
 8002f9a:	d061      	beq.n	8003060 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	69db      	ldr	r3, [r3, #28]
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d146      	bne.n	8003032 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fa4:	4b3f      	ldr	r3, [pc, #252]	; (80030a4 <HAL_RCC_OscConfig+0x4fc>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002faa:	f7fe f907 	bl	80011bc <HAL_GetTick>
 8002fae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fb0:	e008      	b.n	8002fc4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fb2:	f7fe f903 	bl	80011bc <HAL_GetTick>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d901      	bls.n	8002fc4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	e067      	b.n	8003094 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fc4:	4b35      	ldr	r3, [pc, #212]	; (800309c <HAL_RCC_OscConfig+0x4f4>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d1f0      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6a1b      	ldr	r3, [r3, #32]
 8002fd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fd8:	d108      	bne.n	8002fec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002fda:	4b30      	ldr	r3, [pc, #192]	; (800309c <HAL_RCC_OscConfig+0x4f4>)
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	492d      	ldr	r1, [pc, #180]	; (800309c <HAL_RCC_OscConfig+0x4f4>)
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fec:	4b2b      	ldr	r3, [pc, #172]	; (800309c <HAL_RCC_OscConfig+0x4f4>)
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a19      	ldr	r1, [r3, #32]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffc:	430b      	orrs	r3, r1
 8002ffe:	4927      	ldr	r1, [pc, #156]	; (800309c <HAL_RCC_OscConfig+0x4f4>)
 8003000:	4313      	orrs	r3, r2
 8003002:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003004:	4b27      	ldr	r3, [pc, #156]	; (80030a4 <HAL_RCC_OscConfig+0x4fc>)
 8003006:	2201      	movs	r2, #1
 8003008:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800300a:	f7fe f8d7 	bl	80011bc <HAL_GetTick>
 800300e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003010:	e008      	b.n	8003024 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003012:	f7fe f8d3 	bl	80011bc <HAL_GetTick>
 8003016:	4602      	mov	r2, r0
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	2b02      	cmp	r3, #2
 800301e:	d901      	bls.n	8003024 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003020:	2303      	movs	r3, #3
 8003022:	e037      	b.n	8003094 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003024:	4b1d      	ldr	r3, [pc, #116]	; (800309c <HAL_RCC_OscConfig+0x4f4>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800302c:	2b00      	cmp	r3, #0
 800302e:	d0f0      	beq.n	8003012 <HAL_RCC_OscConfig+0x46a>
 8003030:	e02f      	b.n	8003092 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003032:	4b1c      	ldr	r3, [pc, #112]	; (80030a4 <HAL_RCC_OscConfig+0x4fc>)
 8003034:	2200      	movs	r2, #0
 8003036:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003038:	f7fe f8c0 	bl	80011bc <HAL_GetTick>
 800303c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800303e:	e008      	b.n	8003052 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003040:	f7fe f8bc 	bl	80011bc <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	2b02      	cmp	r3, #2
 800304c:	d901      	bls.n	8003052 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e020      	b.n	8003094 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003052:	4b12      	ldr	r3, [pc, #72]	; (800309c <HAL_RCC_OscConfig+0x4f4>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d1f0      	bne.n	8003040 <HAL_RCC_OscConfig+0x498>
 800305e:	e018      	b.n	8003092 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	69db      	ldr	r3, [r3, #28]
 8003064:	2b01      	cmp	r3, #1
 8003066:	d101      	bne.n	800306c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e013      	b.n	8003094 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800306c:	4b0b      	ldr	r3, [pc, #44]	; (800309c <HAL_RCC_OscConfig+0x4f4>)
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6a1b      	ldr	r3, [r3, #32]
 800307c:	429a      	cmp	r2, r3
 800307e:	d106      	bne.n	800308e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800308a:	429a      	cmp	r2, r3
 800308c:	d001      	beq.n	8003092 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e000      	b.n	8003094 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003092:	2300      	movs	r3, #0
}
 8003094:	4618      	mov	r0, r3
 8003096:	3718      	adds	r7, #24
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}
 800309c:	40021000 	.word	0x40021000
 80030a0:	40007000 	.word	0x40007000
 80030a4:	42420060 	.word	0x42420060

080030a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d101      	bne.n	80030bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e0d0      	b.n	800325e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030bc:	4b6a      	ldr	r3, [pc, #424]	; (8003268 <HAL_RCC_ClockConfig+0x1c0>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0307 	and.w	r3, r3, #7
 80030c4:	683a      	ldr	r2, [r7, #0]
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d910      	bls.n	80030ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ca:	4b67      	ldr	r3, [pc, #412]	; (8003268 <HAL_RCC_ClockConfig+0x1c0>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f023 0207 	bic.w	r2, r3, #7
 80030d2:	4965      	ldr	r1, [pc, #404]	; (8003268 <HAL_RCC_ClockConfig+0x1c0>)
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030da:	4b63      	ldr	r3, [pc, #396]	; (8003268 <HAL_RCC_ClockConfig+0x1c0>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0307 	and.w	r3, r3, #7
 80030e2:	683a      	ldr	r2, [r7, #0]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d001      	beq.n	80030ec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e0b8      	b.n	800325e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0302 	and.w	r3, r3, #2
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d020      	beq.n	800313a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 0304 	and.w	r3, r3, #4
 8003100:	2b00      	cmp	r3, #0
 8003102:	d005      	beq.n	8003110 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003104:	4b59      	ldr	r3, [pc, #356]	; (800326c <HAL_RCC_ClockConfig+0x1c4>)
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	4a58      	ldr	r2, [pc, #352]	; (800326c <HAL_RCC_ClockConfig+0x1c4>)
 800310a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800310e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0308 	and.w	r3, r3, #8
 8003118:	2b00      	cmp	r3, #0
 800311a:	d005      	beq.n	8003128 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800311c:	4b53      	ldr	r3, [pc, #332]	; (800326c <HAL_RCC_ClockConfig+0x1c4>)
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	4a52      	ldr	r2, [pc, #328]	; (800326c <HAL_RCC_ClockConfig+0x1c4>)
 8003122:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003126:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003128:	4b50      	ldr	r3, [pc, #320]	; (800326c <HAL_RCC_ClockConfig+0x1c4>)
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	494d      	ldr	r1, [pc, #308]	; (800326c <HAL_RCC_ClockConfig+0x1c4>)
 8003136:	4313      	orrs	r3, r2
 8003138:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0301 	and.w	r3, r3, #1
 8003142:	2b00      	cmp	r3, #0
 8003144:	d040      	beq.n	80031c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	2b01      	cmp	r3, #1
 800314c:	d107      	bne.n	800315e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800314e:	4b47      	ldr	r3, [pc, #284]	; (800326c <HAL_RCC_ClockConfig+0x1c4>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d115      	bne.n	8003186 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e07f      	b.n	800325e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	2b02      	cmp	r3, #2
 8003164:	d107      	bne.n	8003176 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003166:	4b41      	ldr	r3, [pc, #260]	; (800326c <HAL_RCC_ClockConfig+0x1c4>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d109      	bne.n	8003186 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e073      	b.n	800325e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003176:	4b3d      	ldr	r3, [pc, #244]	; (800326c <HAL_RCC_ClockConfig+0x1c4>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0302 	and.w	r3, r3, #2
 800317e:	2b00      	cmp	r3, #0
 8003180:	d101      	bne.n	8003186 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e06b      	b.n	800325e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003186:	4b39      	ldr	r3, [pc, #228]	; (800326c <HAL_RCC_ClockConfig+0x1c4>)
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f023 0203 	bic.w	r2, r3, #3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	4936      	ldr	r1, [pc, #216]	; (800326c <HAL_RCC_ClockConfig+0x1c4>)
 8003194:	4313      	orrs	r3, r2
 8003196:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003198:	f7fe f810 	bl	80011bc <HAL_GetTick>
 800319c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800319e:	e00a      	b.n	80031b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031a0:	f7fe f80c 	bl	80011bc <HAL_GetTick>
 80031a4:	4602      	mov	r2, r0
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d901      	bls.n	80031b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	e053      	b.n	800325e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031b6:	4b2d      	ldr	r3, [pc, #180]	; (800326c <HAL_RCC_ClockConfig+0x1c4>)
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	f003 020c 	and.w	r2, r3, #12
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d1eb      	bne.n	80031a0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031c8:	4b27      	ldr	r3, [pc, #156]	; (8003268 <HAL_RCC_ClockConfig+0x1c0>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0307 	and.w	r3, r3, #7
 80031d0:	683a      	ldr	r2, [r7, #0]
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d210      	bcs.n	80031f8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031d6:	4b24      	ldr	r3, [pc, #144]	; (8003268 <HAL_RCC_ClockConfig+0x1c0>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f023 0207 	bic.w	r2, r3, #7
 80031de:	4922      	ldr	r1, [pc, #136]	; (8003268 <HAL_RCC_ClockConfig+0x1c0>)
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031e6:	4b20      	ldr	r3, [pc, #128]	; (8003268 <HAL_RCC_ClockConfig+0x1c0>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0307 	and.w	r3, r3, #7
 80031ee:	683a      	ldr	r2, [r7, #0]
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d001      	beq.n	80031f8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e032      	b.n	800325e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0304 	and.w	r3, r3, #4
 8003200:	2b00      	cmp	r3, #0
 8003202:	d008      	beq.n	8003216 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003204:	4b19      	ldr	r3, [pc, #100]	; (800326c <HAL_RCC_ClockConfig+0x1c4>)
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	4916      	ldr	r1, [pc, #88]	; (800326c <HAL_RCC_ClockConfig+0x1c4>)
 8003212:	4313      	orrs	r3, r2
 8003214:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0308 	and.w	r3, r3, #8
 800321e:	2b00      	cmp	r3, #0
 8003220:	d009      	beq.n	8003236 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003222:	4b12      	ldr	r3, [pc, #72]	; (800326c <HAL_RCC_ClockConfig+0x1c4>)
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	691b      	ldr	r3, [r3, #16]
 800322e:	00db      	lsls	r3, r3, #3
 8003230:	490e      	ldr	r1, [pc, #56]	; (800326c <HAL_RCC_ClockConfig+0x1c4>)
 8003232:	4313      	orrs	r3, r2
 8003234:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003236:	f000 f821 	bl	800327c <HAL_RCC_GetSysClockFreq>
 800323a:	4601      	mov	r1, r0
 800323c:	4b0b      	ldr	r3, [pc, #44]	; (800326c <HAL_RCC_ClockConfig+0x1c4>)
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	091b      	lsrs	r3, r3, #4
 8003242:	f003 030f 	and.w	r3, r3, #15
 8003246:	4a0a      	ldr	r2, [pc, #40]	; (8003270 <HAL_RCC_ClockConfig+0x1c8>)
 8003248:	5cd3      	ldrb	r3, [r2, r3]
 800324a:	fa21 f303 	lsr.w	r3, r1, r3
 800324e:	4a09      	ldr	r2, [pc, #36]	; (8003274 <HAL_RCC_ClockConfig+0x1cc>)
 8003250:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003252:	4b09      	ldr	r3, [pc, #36]	; (8003278 <HAL_RCC_ClockConfig+0x1d0>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4618      	mov	r0, r3
 8003258:	f7fd ff6e 	bl	8001138 <HAL_InitTick>

  return HAL_OK;
 800325c:	2300      	movs	r3, #0
}
 800325e:	4618      	mov	r0, r3
 8003260:	3710      	adds	r7, #16
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	40022000 	.word	0x40022000
 800326c:	40021000 	.word	0x40021000
 8003270:	0800a17c 	.word	0x0800a17c
 8003274:	20000060 	.word	0x20000060
 8003278:	20000000 	.word	0x20000000

0800327c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800327c:	b490      	push	{r4, r7}
 800327e:	b08a      	sub	sp, #40	; 0x28
 8003280:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003282:	4b2a      	ldr	r3, [pc, #168]	; (800332c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003284:	1d3c      	adds	r4, r7, #4
 8003286:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003288:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800328c:	4b28      	ldr	r3, [pc, #160]	; (8003330 <HAL_RCC_GetSysClockFreq+0xb4>)
 800328e:	881b      	ldrh	r3, [r3, #0]
 8003290:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003292:	2300      	movs	r3, #0
 8003294:	61fb      	str	r3, [r7, #28]
 8003296:	2300      	movs	r3, #0
 8003298:	61bb      	str	r3, [r7, #24]
 800329a:	2300      	movs	r3, #0
 800329c:	627b      	str	r3, [r7, #36]	; 0x24
 800329e:	2300      	movs	r3, #0
 80032a0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80032a2:	2300      	movs	r3, #0
 80032a4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80032a6:	4b23      	ldr	r3, [pc, #140]	; (8003334 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	f003 030c 	and.w	r3, r3, #12
 80032b2:	2b04      	cmp	r3, #4
 80032b4:	d002      	beq.n	80032bc <HAL_RCC_GetSysClockFreq+0x40>
 80032b6:	2b08      	cmp	r3, #8
 80032b8:	d003      	beq.n	80032c2 <HAL_RCC_GetSysClockFreq+0x46>
 80032ba:	e02d      	b.n	8003318 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80032bc:	4b1e      	ldr	r3, [pc, #120]	; (8003338 <HAL_RCC_GetSysClockFreq+0xbc>)
 80032be:	623b      	str	r3, [r7, #32]
      break;
 80032c0:	e02d      	b.n	800331e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	0c9b      	lsrs	r3, r3, #18
 80032c6:	f003 030f 	and.w	r3, r3, #15
 80032ca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80032ce:	4413      	add	r3, r2
 80032d0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80032d4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d013      	beq.n	8003308 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80032e0:	4b14      	ldr	r3, [pc, #80]	; (8003334 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	0c5b      	lsrs	r3, r3, #17
 80032e6:	f003 0301 	and.w	r3, r3, #1
 80032ea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80032ee:	4413      	add	r3, r2
 80032f0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80032f4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	4a0f      	ldr	r2, [pc, #60]	; (8003338 <HAL_RCC_GetSysClockFreq+0xbc>)
 80032fa:	fb02 f203 	mul.w	r2, r2, r3
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	fbb2 f3f3 	udiv	r3, r2, r3
 8003304:	627b      	str	r3, [r7, #36]	; 0x24
 8003306:	e004      	b.n	8003312 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	4a0c      	ldr	r2, [pc, #48]	; (800333c <HAL_RCC_GetSysClockFreq+0xc0>)
 800330c:	fb02 f303 	mul.w	r3, r2, r3
 8003310:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003314:	623b      	str	r3, [r7, #32]
      break;
 8003316:	e002      	b.n	800331e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003318:	4b07      	ldr	r3, [pc, #28]	; (8003338 <HAL_RCC_GetSysClockFreq+0xbc>)
 800331a:	623b      	str	r3, [r7, #32]
      break;
 800331c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800331e:	6a3b      	ldr	r3, [r7, #32]
}
 8003320:	4618      	mov	r0, r3
 8003322:	3728      	adds	r7, #40	; 0x28
 8003324:	46bd      	mov	sp, r7
 8003326:	bc90      	pop	{r4, r7}
 8003328:	4770      	bx	lr
 800332a:	bf00      	nop
 800332c:	08009e50 	.word	0x08009e50
 8003330:	08009e60 	.word	0x08009e60
 8003334:	40021000 	.word	0x40021000
 8003338:	007a1200 	.word	0x007a1200
 800333c:	003d0900 	.word	0x003d0900

08003340 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003340:	b480      	push	{r7}
 8003342:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003344:	4b02      	ldr	r3, [pc, #8]	; (8003350 <HAL_RCC_GetHCLKFreq+0x10>)
 8003346:	681b      	ldr	r3, [r3, #0]
}
 8003348:	4618      	mov	r0, r3
 800334a:	46bd      	mov	sp, r7
 800334c:	bc80      	pop	{r7}
 800334e:	4770      	bx	lr
 8003350:	20000060 	.word	0x20000060

08003354 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003358:	f7ff fff2 	bl	8003340 <HAL_RCC_GetHCLKFreq>
 800335c:	4601      	mov	r1, r0
 800335e:	4b05      	ldr	r3, [pc, #20]	; (8003374 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	0a1b      	lsrs	r3, r3, #8
 8003364:	f003 0307 	and.w	r3, r3, #7
 8003368:	4a03      	ldr	r2, [pc, #12]	; (8003378 <HAL_RCC_GetPCLK1Freq+0x24>)
 800336a:	5cd3      	ldrb	r3, [r2, r3]
 800336c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003370:	4618      	mov	r0, r3
 8003372:	bd80      	pop	{r7, pc}
 8003374:	40021000 	.word	0x40021000
 8003378:	0800a18c 	.word	0x0800a18c

0800337c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003380:	f7ff ffde 	bl	8003340 <HAL_RCC_GetHCLKFreq>
 8003384:	4601      	mov	r1, r0
 8003386:	4b05      	ldr	r3, [pc, #20]	; (800339c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	0adb      	lsrs	r3, r3, #11
 800338c:	f003 0307 	and.w	r3, r3, #7
 8003390:	4a03      	ldr	r2, [pc, #12]	; (80033a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003392:	5cd3      	ldrb	r3, [r2, r3]
 8003394:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003398:	4618      	mov	r0, r3
 800339a:	bd80      	pop	{r7, pc}
 800339c:	40021000 	.word	0x40021000
 80033a0:	0800a18c 	.word	0x0800a18c

080033a4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b085      	sub	sp, #20
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80033ac:	4b0a      	ldr	r3, [pc, #40]	; (80033d8 <RCC_Delay+0x34>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a0a      	ldr	r2, [pc, #40]	; (80033dc <RCC_Delay+0x38>)
 80033b2:	fba2 2303 	umull	r2, r3, r2, r3
 80033b6:	0a5b      	lsrs	r3, r3, #9
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	fb02 f303 	mul.w	r3, r2, r3
 80033be:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80033c0:	bf00      	nop
  }
  while (Delay --);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	1e5a      	subs	r2, r3, #1
 80033c6:	60fa      	str	r2, [r7, #12]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d1f9      	bne.n	80033c0 <RCC_Delay+0x1c>
}
 80033cc:	bf00      	nop
 80033ce:	3714      	adds	r7, #20
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bc80      	pop	{r7}
 80033d4:	4770      	bx	lr
 80033d6:	bf00      	nop
 80033d8:	20000060 	.word	0x20000060
 80033dc:	10624dd3 	.word	0x10624dd3

080033e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b082      	sub	sp, #8
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d101      	bne.n	80033f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e041      	b.n	8003476 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d106      	bne.n	800340c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f005 fa10 	bl	800882c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2202      	movs	r2, #2
 8003410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	3304      	adds	r3, #4
 800341c:	4619      	mov	r1, r3
 800341e:	4610      	mov	r0, r2
 8003420:	f000 fd6c 	bl	8003efc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003474:	2300      	movs	r3, #0
}
 8003476:	4618      	mov	r0, r3
 8003478:	3708      	adds	r7, #8
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
	...

08003480 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003480:	b480      	push	{r7}
 8003482:	b085      	sub	sp, #20
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800348e:	b2db      	uxtb	r3, r3
 8003490:	2b01      	cmp	r3, #1
 8003492:	d001      	beq.n	8003498 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e03a      	b.n	800350e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2202      	movs	r2, #2
 800349c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	68da      	ldr	r2, [r3, #12]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f042 0201 	orr.w	r2, r2, #1
 80034ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a18      	ldr	r2, [pc, #96]	; (8003518 <HAL_TIM_Base_Start_IT+0x98>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d00e      	beq.n	80034d8 <HAL_TIM_Base_Start_IT+0x58>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034c2:	d009      	beq.n	80034d8 <HAL_TIM_Base_Start_IT+0x58>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a14      	ldr	r2, [pc, #80]	; (800351c <HAL_TIM_Base_Start_IT+0x9c>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d004      	beq.n	80034d8 <HAL_TIM_Base_Start_IT+0x58>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a13      	ldr	r2, [pc, #76]	; (8003520 <HAL_TIM_Base_Start_IT+0xa0>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d111      	bne.n	80034fc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	f003 0307 	and.w	r3, r3, #7
 80034e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2b06      	cmp	r3, #6
 80034e8:	d010      	beq.n	800350c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f042 0201 	orr.w	r2, r2, #1
 80034f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034fa:	e007      	b.n	800350c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f042 0201 	orr.w	r2, r2, #1
 800350a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800350c:	2300      	movs	r3, #0
}
 800350e:	4618      	mov	r0, r3
 8003510:	3714      	adds	r7, #20
 8003512:	46bd      	mov	sp, r7
 8003514:	bc80      	pop	{r7}
 8003516:	4770      	bx	lr
 8003518:	40012c00 	.word	0x40012c00
 800351c:	40000400 	.word	0x40000400
 8003520:	40000800 	.word	0x40000800

08003524 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b082      	sub	sp, #8
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d101      	bne.n	8003536 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e041      	b.n	80035ba <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800353c:	b2db      	uxtb	r3, r3
 800353e:	2b00      	cmp	r3, #0
 8003540:	d106      	bne.n	8003550 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 f839 	bl	80035c2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2202      	movs	r2, #2
 8003554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	3304      	adds	r3, #4
 8003560:	4619      	mov	r1, r3
 8003562:	4610      	mov	r0, r2
 8003564:	f000 fcca 	bl	8003efc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2201      	movs	r2, #1
 80035a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035b8:	2300      	movs	r3, #0
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3708      	adds	r7, #8
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}

080035c2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80035c2:	b480      	push	{r7}
 80035c4:	b083      	sub	sp, #12
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80035ca:	bf00      	nop
 80035cc:	370c      	adds	r7, #12
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bc80      	pop	{r7}
 80035d2:	4770      	bx	lr

080035d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b084      	sub	sp, #16
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d109      	bne.n	80035f8 <HAL_TIM_PWM_Start+0x24>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	bf14      	ite	ne
 80035f0:	2301      	movne	r3, #1
 80035f2:	2300      	moveq	r3, #0
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	e022      	b.n	800363e <HAL_TIM_PWM_Start+0x6a>
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	2b04      	cmp	r3, #4
 80035fc:	d109      	bne.n	8003612 <HAL_TIM_PWM_Start+0x3e>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003604:	b2db      	uxtb	r3, r3
 8003606:	2b01      	cmp	r3, #1
 8003608:	bf14      	ite	ne
 800360a:	2301      	movne	r3, #1
 800360c:	2300      	moveq	r3, #0
 800360e:	b2db      	uxtb	r3, r3
 8003610:	e015      	b.n	800363e <HAL_TIM_PWM_Start+0x6a>
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	2b08      	cmp	r3, #8
 8003616:	d109      	bne.n	800362c <HAL_TIM_PWM_Start+0x58>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800361e:	b2db      	uxtb	r3, r3
 8003620:	2b01      	cmp	r3, #1
 8003622:	bf14      	ite	ne
 8003624:	2301      	movne	r3, #1
 8003626:	2300      	moveq	r3, #0
 8003628:	b2db      	uxtb	r3, r3
 800362a:	e008      	b.n	800363e <HAL_TIM_PWM_Start+0x6a>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003632:	b2db      	uxtb	r3, r3
 8003634:	2b01      	cmp	r3, #1
 8003636:	bf14      	ite	ne
 8003638:	2301      	movne	r3, #1
 800363a:	2300      	moveq	r3, #0
 800363c:	b2db      	uxtb	r3, r3
 800363e:	2b00      	cmp	r3, #0
 8003640:	d001      	beq.n	8003646 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e05e      	b.n	8003704 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d104      	bne.n	8003656 <HAL_TIM_PWM_Start+0x82>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2202      	movs	r2, #2
 8003650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003654:	e013      	b.n	800367e <HAL_TIM_PWM_Start+0xaa>
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	2b04      	cmp	r3, #4
 800365a:	d104      	bne.n	8003666 <HAL_TIM_PWM_Start+0x92>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2202      	movs	r2, #2
 8003660:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003664:	e00b      	b.n	800367e <HAL_TIM_PWM_Start+0xaa>
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	2b08      	cmp	r3, #8
 800366a:	d104      	bne.n	8003676 <HAL_TIM_PWM_Start+0xa2>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2202      	movs	r2, #2
 8003670:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003674:	e003      	b.n	800367e <HAL_TIM_PWM_Start+0xaa>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2202      	movs	r2, #2
 800367a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	2201      	movs	r2, #1
 8003684:	6839      	ldr	r1, [r7, #0]
 8003686:	4618      	mov	r0, r3
 8003688:	f000 feb8 	bl	80043fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a1e      	ldr	r2, [pc, #120]	; (800370c <HAL_TIM_PWM_Start+0x138>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d107      	bne.n	80036a6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036a4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a18      	ldr	r2, [pc, #96]	; (800370c <HAL_TIM_PWM_Start+0x138>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d00e      	beq.n	80036ce <HAL_TIM_PWM_Start+0xfa>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036b8:	d009      	beq.n	80036ce <HAL_TIM_PWM_Start+0xfa>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a14      	ldr	r2, [pc, #80]	; (8003710 <HAL_TIM_PWM_Start+0x13c>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d004      	beq.n	80036ce <HAL_TIM_PWM_Start+0xfa>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a12      	ldr	r2, [pc, #72]	; (8003714 <HAL_TIM_PWM_Start+0x140>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d111      	bne.n	80036f2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	f003 0307 	and.w	r3, r3, #7
 80036d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2b06      	cmp	r3, #6
 80036de:	d010      	beq.n	8003702 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f042 0201 	orr.w	r2, r2, #1
 80036ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036f0:	e007      	b.n	8003702 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f042 0201 	orr.w	r2, r2, #1
 8003700:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003702:	2300      	movs	r3, #0
}
 8003704:	4618      	mov	r0, r3
 8003706:	3710      	adds	r7, #16
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}
 800370c:	40012c00 	.word	0x40012c00
 8003710:	40000400 	.word	0x40000400
 8003714:	40000800 	.word	0x40000800

08003718 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b086      	sub	sp, #24
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d101      	bne.n	800372c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e093      	b.n	8003854 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003732:	b2db      	uxtb	r3, r3
 8003734:	2b00      	cmp	r3, #0
 8003736:	d106      	bne.n	8003746 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f005 f8ab 	bl	800889c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2202      	movs	r2, #2
 800374a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	6812      	ldr	r2, [r2, #0]
 8003758:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800375c:	f023 0307 	bic.w	r3, r3, #7
 8003760:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	3304      	adds	r3, #4
 800376a:	4619      	mov	r1, r3
 800376c:	4610      	mov	r0, r2
 800376e:	f000 fbc5 	bl	8003efc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	699b      	ldr	r3, [r3, #24]
 8003780:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	6a1b      	ldr	r3, [r3, #32]
 8003788:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	697a      	ldr	r2, [r7, #20]
 8003790:	4313      	orrs	r3, r2
 8003792:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800379a:	f023 0303 	bic.w	r3, r3, #3
 800379e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	689a      	ldr	r2, [r3, #8]
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	699b      	ldr	r3, [r3, #24]
 80037a8:	021b      	lsls	r3, r3, #8
 80037aa:	4313      	orrs	r3, r2
 80037ac:	693a      	ldr	r2, [r7, #16]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80037b8:	f023 030c 	bic.w	r3, r3, #12
 80037bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80037c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	68da      	ldr	r2, [r3, #12]
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	69db      	ldr	r3, [r3, #28]
 80037d2:	021b      	lsls	r3, r3, #8
 80037d4:	4313      	orrs	r3, r2
 80037d6:	693a      	ldr	r2, [r7, #16]
 80037d8:	4313      	orrs	r3, r2
 80037da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	691b      	ldr	r3, [r3, #16]
 80037e0:	011a      	lsls	r2, r3, #4
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	6a1b      	ldr	r3, [r3, #32]
 80037e6:	031b      	lsls	r3, r3, #12
 80037e8:	4313      	orrs	r3, r2
 80037ea:	693a      	ldr	r2, [r7, #16]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80037f6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	685a      	ldr	r2, [r3, #4]
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	695b      	ldr	r3, [r3, #20]
 8003800:	011b      	lsls	r3, r3, #4
 8003802:	4313      	orrs	r3, r2
 8003804:	68fa      	ldr	r2, [r7, #12]
 8003806:	4313      	orrs	r3, r2
 8003808:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	697a      	ldr	r2, [r7, #20]
 8003810:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	693a      	ldr	r2, [r7, #16]
 8003818:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	68fa      	ldr	r2, [r7, #12]
 8003820:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2201      	movs	r2, #1
 8003826:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2201      	movs	r2, #1
 800382e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2201      	movs	r2, #1
 8003836:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2201      	movs	r2, #1
 800383e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2201      	movs	r2, #1
 8003846:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2201      	movs	r2, #1
 800384e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003852:	2300      	movs	r3, #0
}
 8003854:	4618      	mov	r0, r3
 8003856:	3718      	adds	r7, #24
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}

0800385c <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b084      	sub	sp, #16
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800386c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003874:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800387c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003884:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d110      	bne.n	80038ae <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800388c:	7bfb      	ldrb	r3, [r7, #15]
 800388e:	2b01      	cmp	r3, #1
 8003890:	d102      	bne.n	8003898 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003892:	7b7b      	ldrb	r3, [r7, #13]
 8003894:	2b01      	cmp	r3, #1
 8003896:	d001      	beq.n	800389c <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e088      	b.n	80039ae <HAL_TIM_Encoder_Start_IT+0x152>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2202      	movs	r2, #2
 80038a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2202      	movs	r2, #2
 80038a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038ac:	e031      	b.n	8003912 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	2b04      	cmp	r3, #4
 80038b2:	d110      	bne.n	80038d6 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80038b4:	7bbb      	ldrb	r3, [r7, #14]
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d102      	bne.n	80038c0 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80038ba:	7b3b      	ldrb	r3, [r7, #12]
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d001      	beq.n	80038c4 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e074      	b.n	80039ae <HAL_TIM_Encoder_Start_IT+0x152>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2202      	movs	r2, #2
 80038c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2202      	movs	r2, #2
 80038d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80038d4:	e01d      	b.n	8003912 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80038d6:	7bfb      	ldrb	r3, [r7, #15]
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d108      	bne.n	80038ee <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80038dc:	7bbb      	ldrb	r3, [r7, #14]
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d105      	bne.n	80038ee <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80038e2:	7b7b      	ldrb	r3, [r7, #13]
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d102      	bne.n	80038ee <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80038e8:	7b3b      	ldrb	r3, [r7, #12]
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d001      	beq.n	80038f2 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e05d      	b.n	80039ae <HAL_TIM_Encoder_Start_IT+0x152>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2202      	movs	r2, #2
 80038f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2202      	movs	r2, #2
 80038fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2202      	movs	r2, #2
 8003906:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2202      	movs	r2, #2
 800390e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d002      	beq.n	800391e <HAL_TIM_Encoder_Start_IT+0xc2>
 8003918:	2b04      	cmp	r3, #4
 800391a:	d010      	beq.n	800393e <HAL_TIM_Encoder_Start_IT+0xe2>
 800391c:	e01f      	b.n	800395e <HAL_TIM_Encoder_Start_IT+0x102>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	2201      	movs	r2, #1
 8003924:	2100      	movs	r1, #0
 8003926:	4618      	mov	r0, r3
 8003928:	f000 fd68 	bl	80043fc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	68da      	ldr	r2, [r3, #12]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f042 0202 	orr.w	r2, r2, #2
 800393a:	60da      	str	r2, [r3, #12]
      break;
 800393c:	e02e      	b.n	800399c <HAL_TIM_Encoder_Start_IT+0x140>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	2201      	movs	r2, #1
 8003944:	2104      	movs	r1, #4
 8003946:	4618      	mov	r0, r3
 8003948:	f000 fd58 	bl	80043fc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	68da      	ldr	r2, [r3, #12]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f042 0204 	orr.w	r2, r2, #4
 800395a:	60da      	str	r2, [r3, #12]
      break;
 800395c:	e01e      	b.n	800399c <HAL_TIM_Encoder_Start_IT+0x140>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	2201      	movs	r2, #1
 8003964:	2100      	movs	r1, #0
 8003966:	4618      	mov	r0, r3
 8003968:	f000 fd48 	bl	80043fc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	2201      	movs	r2, #1
 8003972:	2104      	movs	r1, #4
 8003974:	4618      	mov	r0, r3
 8003976:	f000 fd41 	bl	80043fc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	68da      	ldr	r2, [r3, #12]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f042 0202 	orr.w	r2, r2, #2
 8003988:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	68da      	ldr	r2, [r3, #12]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f042 0204 	orr.w	r2, r2, #4
 8003998:	60da      	str	r2, [r3, #12]
      break;
 800399a:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f042 0201 	orr.w	r2, r2, #1
 80039aa:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80039ac:	2300      	movs	r3, #0
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3710      	adds	r7, #16
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}

080039b6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80039b6:	b580      	push	{r7, lr}
 80039b8:	b082      	sub	sp, #8
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	691b      	ldr	r3, [r3, #16]
 80039c4:	f003 0302 	and.w	r3, r3, #2
 80039c8:	2b02      	cmp	r3, #2
 80039ca:	d122      	bne.n	8003a12 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	f003 0302 	and.w	r3, r3, #2
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d11b      	bne.n	8003a12 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f06f 0202 	mvn.w	r2, #2
 80039e2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	699b      	ldr	r3, [r3, #24]
 80039f0:	f003 0303 	and.w	r3, r3, #3
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d003      	beq.n	8003a00 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f000 fa63 	bl	8003ec4 <HAL_TIM_IC_CaptureCallback>
 80039fe:	e005      	b.n	8003a0c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f000 fa56 	bl	8003eb2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f000 fa65 	bl	8003ed6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	691b      	ldr	r3, [r3, #16]
 8003a18:	f003 0304 	and.w	r3, r3, #4
 8003a1c:	2b04      	cmp	r3, #4
 8003a1e:	d122      	bne.n	8003a66 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	f003 0304 	and.w	r3, r3, #4
 8003a2a:	2b04      	cmp	r3, #4
 8003a2c:	d11b      	bne.n	8003a66 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f06f 0204 	mvn.w	r2, #4
 8003a36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2202      	movs	r2, #2
 8003a3c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	699b      	ldr	r3, [r3, #24]
 8003a44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d003      	beq.n	8003a54 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f000 fa39 	bl	8003ec4 <HAL_TIM_IC_CaptureCallback>
 8003a52:	e005      	b.n	8003a60 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f000 fa2c 	bl	8003eb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f000 fa3b 	bl	8003ed6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	691b      	ldr	r3, [r3, #16]
 8003a6c:	f003 0308 	and.w	r3, r3, #8
 8003a70:	2b08      	cmp	r3, #8
 8003a72:	d122      	bne.n	8003aba <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	f003 0308 	and.w	r3, r3, #8
 8003a7e:	2b08      	cmp	r3, #8
 8003a80:	d11b      	bne.n	8003aba <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f06f 0208 	mvn.w	r2, #8
 8003a8a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2204      	movs	r2, #4
 8003a90:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	69db      	ldr	r3, [r3, #28]
 8003a98:	f003 0303 	and.w	r3, r3, #3
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d003      	beq.n	8003aa8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	f000 fa0f 	bl	8003ec4 <HAL_TIM_IC_CaptureCallback>
 8003aa6:	e005      	b.n	8003ab4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f000 fa02 	bl	8003eb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f000 fa11 	bl	8003ed6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	691b      	ldr	r3, [r3, #16]
 8003ac0:	f003 0310 	and.w	r3, r3, #16
 8003ac4:	2b10      	cmp	r3, #16
 8003ac6:	d122      	bne.n	8003b0e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	f003 0310 	and.w	r3, r3, #16
 8003ad2:	2b10      	cmp	r3, #16
 8003ad4:	d11b      	bne.n	8003b0e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f06f 0210 	mvn.w	r2, #16
 8003ade:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2208      	movs	r2, #8
 8003ae4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	69db      	ldr	r3, [r3, #28]
 8003aec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d003      	beq.n	8003afc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f000 f9e5 	bl	8003ec4 <HAL_TIM_IC_CaptureCallback>
 8003afa:	e005      	b.n	8003b08 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f000 f9d8 	bl	8003eb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f000 f9e7 	bl	8003ed6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	691b      	ldr	r3, [r3, #16]
 8003b14:	f003 0301 	and.w	r3, r3, #1
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d10e      	bne.n	8003b3a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	f003 0301 	and.w	r3, r3, #1
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d107      	bne.n	8003b3a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f06f 0201 	mvn.w	r2, #1
 8003b32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f001 fdf9 	bl	800572c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	691b      	ldr	r3, [r3, #16]
 8003b40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b44:	2b80      	cmp	r3, #128	; 0x80
 8003b46:	d10e      	bne.n	8003b66 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b52:	2b80      	cmp	r3, #128	; 0x80
 8003b54:	d107      	bne.n	8003b66 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003b5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f000 fcd6 	bl	8004512 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	691b      	ldr	r3, [r3, #16]
 8003b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b70:	2b40      	cmp	r3, #64	; 0x40
 8003b72:	d10e      	bne.n	8003b92 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	68db      	ldr	r3, [r3, #12]
 8003b7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b7e:	2b40      	cmp	r3, #64	; 0x40
 8003b80:	d107      	bne.n	8003b92 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f000 f9ab 	bl	8003ee8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	691b      	ldr	r3, [r3, #16]
 8003b98:	f003 0320 	and.w	r3, r3, #32
 8003b9c:	2b20      	cmp	r3, #32
 8003b9e:	d10e      	bne.n	8003bbe <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	f003 0320 	and.w	r3, r3, #32
 8003baa:	2b20      	cmp	r3, #32
 8003bac:	d107      	bne.n	8003bbe <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f06f 0220 	mvn.w	r2, #32
 8003bb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f000 fca1 	bl	8004500 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003bbe:	bf00      	nop
 8003bc0:	3708      	adds	r7, #8
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
	...

08003bc8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	60f8      	str	r0, [r7, #12]
 8003bd0:	60b9      	str	r1, [r7, #8]
 8003bd2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d101      	bne.n	8003be2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003bde:	2302      	movs	r3, #2
 8003be0:	e0ac      	b.n	8003d3c <HAL_TIM_PWM_ConfigChannel+0x174>
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2201      	movs	r2, #1
 8003be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2b0c      	cmp	r3, #12
 8003bee:	f200 809f 	bhi.w	8003d30 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003bf2:	a201      	add	r2, pc, #4	; (adr r2, 8003bf8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bf8:	08003c2d 	.word	0x08003c2d
 8003bfc:	08003d31 	.word	0x08003d31
 8003c00:	08003d31 	.word	0x08003d31
 8003c04:	08003d31 	.word	0x08003d31
 8003c08:	08003c6d 	.word	0x08003c6d
 8003c0c:	08003d31 	.word	0x08003d31
 8003c10:	08003d31 	.word	0x08003d31
 8003c14:	08003d31 	.word	0x08003d31
 8003c18:	08003caf 	.word	0x08003caf
 8003c1c:	08003d31 	.word	0x08003d31
 8003c20:	08003d31 	.word	0x08003d31
 8003c24:	08003d31 	.word	0x08003d31
 8003c28:	08003cef 	.word	0x08003cef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	68b9      	ldr	r1, [r7, #8]
 8003c32:	4618      	mov	r0, r3
 8003c34:	f000 f9c4 	bl	8003fc0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	699a      	ldr	r2, [r3, #24]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f042 0208 	orr.w	r2, r2, #8
 8003c46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	699a      	ldr	r2, [r3, #24]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f022 0204 	bic.w	r2, r2, #4
 8003c56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	6999      	ldr	r1, [r3, #24]
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	691a      	ldr	r2, [r3, #16]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	430a      	orrs	r2, r1
 8003c68:	619a      	str	r2, [r3, #24]
      break;
 8003c6a:	e062      	b.n	8003d32 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	68b9      	ldr	r1, [r7, #8]
 8003c72:	4618      	mov	r0, r3
 8003c74:	f000 fa0a 	bl	800408c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	699a      	ldr	r2, [r3, #24]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	699a      	ldr	r2, [r3, #24]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	6999      	ldr	r1, [r3, #24]
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	691b      	ldr	r3, [r3, #16]
 8003ca2:	021a      	lsls	r2, r3, #8
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	430a      	orrs	r2, r1
 8003caa:	619a      	str	r2, [r3, #24]
      break;
 8003cac:	e041      	b.n	8003d32 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	68b9      	ldr	r1, [r7, #8]
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f000 fa53 	bl	8004160 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	69da      	ldr	r2, [r3, #28]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f042 0208 	orr.w	r2, r2, #8
 8003cc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	69da      	ldr	r2, [r3, #28]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f022 0204 	bic.w	r2, r2, #4
 8003cd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	69d9      	ldr	r1, [r3, #28]
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	691a      	ldr	r2, [r3, #16]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	430a      	orrs	r2, r1
 8003cea:	61da      	str	r2, [r3, #28]
      break;
 8003cec:	e021      	b.n	8003d32 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	68b9      	ldr	r1, [r7, #8]
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f000 fa9d 	bl	8004234 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	69da      	ldr	r2, [r3, #28]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	69da      	ldr	r2, [r3, #28]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	69d9      	ldr	r1, [r3, #28]
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	691b      	ldr	r3, [r3, #16]
 8003d24:	021a      	lsls	r2, r3, #8
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	430a      	orrs	r2, r1
 8003d2c:	61da      	str	r2, [r3, #28]
      break;
 8003d2e:	e000      	b.n	8003d32 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003d30:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d3a:	2300      	movs	r3, #0
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3710      	adds	r7, #16
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}

08003d44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b084      	sub	sp, #16
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d101      	bne.n	8003d5c <HAL_TIM_ConfigClockSource+0x18>
 8003d58:	2302      	movs	r3, #2
 8003d5a:	e0a6      	b.n	8003eaa <HAL_TIM_ConfigClockSource+0x166>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2202      	movs	r2, #2
 8003d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d7a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d82:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	68fa      	ldr	r2, [r7, #12]
 8003d8a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2b40      	cmp	r3, #64	; 0x40
 8003d92:	d067      	beq.n	8003e64 <HAL_TIM_ConfigClockSource+0x120>
 8003d94:	2b40      	cmp	r3, #64	; 0x40
 8003d96:	d80b      	bhi.n	8003db0 <HAL_TIM_ConfigClockSource+0x6c>
 8003d98:	2b10      	cmp	r3, #16
 8003d9a:	d073      	beq.n	8003e84 <HAL_TIM_ConfigClockSource+0x140>
 8003d9c:	2b10      	cmp	r3, #16
 8003d9e:	d802      	bhi.n	8003da6 <HAL_TIM_ConfigClockSource+0x62>
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d06f      	beq.n	8003e84 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003da4:	e078      	b.n	8003e98 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003da6:	2b20      	cmp	r3, #32
 8003da8:	d06c      	beq.n	8003e84 <HAL_TIM_ConfigClockSource+0x140>
 8003daa:	2b30      	cmp	r3, #48	; 0x30
 8003dac:	d06a      	beq.n	8003e84 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003dae:	e073      	b.n	8003e98 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003db0:	2b70      	cmp	r3, #112	; 0x70
 8003db2:	d00d      	beq.n	8003dd0 <HAL_TIM_ConfigClockSource+0x8c>
 8003db4:	2b70      	cmp	r3, #112	; 0x70
 8003db6:	d804      	bhi.n	8003dc2 <HAL_TIM_ConfigClockSource+0x7e>
 8003db8:	2b50      	cmp	r3, #80	; 0x50
 8003dba:	d033      	beq.n	8003e24 <HAL_TIM_ConfigClockSource+0xe0>
 8003dbc:	2b60      	cmp	r3, #96	; 0x60
 8003dbe:	d041      	beq.n	8003e44 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003dc0:	e06a      	b.n	8003e98 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003dc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dc6:	d066      	beq.n	8003e96 <HAL_TIM_ConfigClockSource+0x152>
 8003dc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dcc:	d017      	beq.n	8003dfe <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003dce:	e063      	b.n	8003e98 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6818      	ldr	r0, [r3, #0]
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	6899      	ldr	r1, [r3, #8]
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	685a      	ldr	r2, [r3, #4]
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	f000 faed 	bl	80043be <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003df2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	68fa      	ldr	r2, [r7, #12]
 8003dfa:	609a      	str	r2, [r3, #8]
      break;
 8003dfc:	e04c      	b.n	8003e98 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6818      	ldr	r0, [r3, #0]
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	6899      	ldr	r1, [r3, #8]
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	685a      	ldr	r2, [r3, #4]
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	68db      	ldr	r3, [r3, #12]
 8003e0e:	f000 fad6 	bl	80043be <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	689a      	ldr	r2, [r3, #8]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e20:	609a      	str	r2, [r3, #8]
      break;
 8003e22:	e039      	b.n	8003e98 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6818      	ldr	r0, [r3, #0]
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	6859      	ldr	r1, [r3, #4]
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	461a      	mov	r2, r3
 8003e32:	f000 fa4d 	bl	80042d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	2150      	movs	r1, #80	; 0x50
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f000 faa4 	bl	800438a <TIM_ITRx_SetConfig>
      break;
 8003e42:	e029      	b.n	8003e98 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6818      	ldr	r0, [r3, #0]
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	6859      	ldr	r1, [r3, #4]
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	461a      	mov	r2, r3
 8003e52:	f000 fa6b 	bl	800432c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	2160      	movs	r1, #96	; 0x60
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f000 fa94 	bl	800438a <TIM_ITRx_SetConfig>
      break;
 8003e62:	e019      	b.n	8003e98 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6818      	ldr	r0, [r3, #0]
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	6859      	ldr	r1, [r3, #4]
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	461a      	mov	r2, r3
 8003e72:	f000 fa2d 	bl	80042d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	2140      	movs	r1, #64	; 0x40
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f000 fa84 	bl	800438a <TIM_ITRx_SetConfig>
      break;
 8003e82:	e009      	b.n	8003e98 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4619      	mov	r1, r3
 8003e8e:	4610      	mov	r0, r2
 8003e90:	f000 fa7b 	bl	800438a <TIM_ITRx_SetConfig>
        break;
 8003e94:	e000      	b.n	8003e98 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003e96:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ea8:	2300      	movs	r3, #0
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3710      	adds	r7, #16
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}

08003eb2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003eb2:	b480      	push	{r7}
 8003eb4:	b083      	sub	sp, #12
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003eba:	bf00      	nop
 8003ebc:	370c      	adds	r7, #12
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bc80      	pop	{r7}
 8003ec2:	4770      	bx	lr

08003ec4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b083      	sub	sp, #12
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ecc:	bf00      	nop
 8003ece:	370c      	adds	r7, #12
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bc80      	pop	{r7}
 8003ed4:	4770      	bx	lr

08003ed6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ed6:	b480      	push	{r7}
 8003ed8:	b083      	sub	sp, #12
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ede:	bf00      	nop
 8003ee0:	370c      	adds	r7, #12
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bc80      	pop	{r7}
 8003ee6:	4770      	bx	lr

08003ee8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ef0:	bf00      	nop
 8003ef2:	370c      	adds	r7, #12
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bc80      	pop	{r7}
 8003ef8:	4770      	bx	lr
	...

08003efc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b085      	sub	sp, #20
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	4a29      	ldr	r2, [pc, #164]	; (8003fb4 <TIM_Base_SetConfig+0xb8>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d00b      	beq.n	8003f2c <TIM_Base_SetConfig+0x30>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f1a:	d007      	beq.n	8003f2c <TIM_Base_SetConfig+0x30>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	4a26      	ldr	r2, [pc, #152]	; (8003fb8 <TIM_Base_SetConfig+0xbc>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d003      	beq.n	8003f2c <TIM_Base_SetConfig+0x30>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	4a25      	ldr	r2, [pc, #148]	; (8003fbc <TIM_Base_SetConfig+0xc0>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d108      	bne.n	8003f3e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	68fa      	ldr	r2, [r7, #12]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4a1c      	ldr	r2, [pc, #112]	; (8003fb4 <TIM_Base_SetConfig+0xb8>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d00b      	beq.n	8003f5e <TIM_Base_SetConfig+0x62>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f4c:	d007      	beq.n	8003f5e <TIM_Base_SetConfig+0x62>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4a19      	ldr	r2, [pc, #100]	; (8003fb8 <TIM_Base_SetConfig+0xbc>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d003      	beq.n	8003f5e <TIM_Base_SetConfig+0x62>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4a18      	ldr	r2, [pc, #96]	; (8003fbc <TIM_Base_SetConfig+0xc0>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d108      	bne.n	8003f70 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	68fa      	ldr	r2, [r7, #12]
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	695b      	ldr	r3, [r3, #20]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	68fa      	ldr	r2, [r7, #12]
 8003f82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	689a      	ldr	r2, [r3, #8]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	4a07      	ldr	r2, [pc, #28]	; (8003fb4 <TIM_Base_SetConfig+0xb8>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d103      	bne.n	8003fa4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	691a      	ldr	r2, [r3, #16]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	615a      	str	r2, [r3, #20]
}
 8003faa:	bf00      	nop
 8003fac:	3714      	adds	r7, #20
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bc80      	pop	{r7}
 8003fb2:	4770      	bx	lr
 8003fb4:	40012c00 	.word	0x40012c00
 8003fb8:	40000400 	.word	0x40000400
 8003fbc:	40000800 	.word	0x40000800

08003fc0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b087      	sub	sp, #28
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6a1b      	ldr	r3, [r3, #32]
 8003fce:	f023 0201 	bic.w	r2, r3, #1
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a1b      	ldr	r3, [r3, #32]
 8003fda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	699b      	ldr	r3, [r3, #24]
 8003fe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f023 0303 	bic.w	r3, r3, #3
 8003ff6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	68fa      	ldr	r2, [r7, #12]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	f023 0302 	bic.w	r3, r3, #2
 8004008:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	697a      	ldr	r2, [r7, #20]
 8004010:	4313      	orrs	r3, r2
 8004012:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	4a1c      	ldr	r2, [pc, #112]	; (8004088 <TIM_OC1_SetConfig+0xc8>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d10c      	bne.n	8004036 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	f023 0308 	bic.w	r3, r3, #8
 8004022:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	697a      	ldr	r2, [r7, #20]
 800402a:	4313      	orrs	r3, r2
 800402c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	f023 0304 	bic.w	r3, r3, #4
 8004034:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a13      	ldr	r2, [pc, #76]	; (8004088 <TIM_OC1_SetConfig+0xc8>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d111      	bne.n	8004062 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004044:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800404c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	695b      	ldr	r3, [r3, #20]
 8004052:	693a      	ldr	r2, [r7, #16]
 8004054:	4313      	orrs	r3, r2
 8004056:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	699b      	ldr	r3, [r3, #24]
 800405c:	693a      	ldr	r2, [r7, #16]
 800405e:	4313      	orrs	r3, r2
 8004060:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	693a      	ldr	r2, [r7, #16]
 8004066:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	68fa      	ldr	r2, [r7, #12]
 800406c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	685a      	ldr	r2, [r3, #4]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	697a      	ldr	r2, [r7, #20]
 800407a:	621a      	str	r2, [r3, #32]
}
 800407c:	bf00      	nop
 800407e:	371c      	adds	r7, #28
 8004080:	46bd      	mov	sp, r7
 8004082:	bc80      	pop	{r7}
 8004084:	4770      	bx	lr
 8004086:	bf00      	nop
 8004088:	40012c00 	.word	0x40012c00

0800408c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800408c:	b480      	push	{r7}
 800408e:	b087      	sub	sp, #28
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a1b      	ldr	r3, [r3, #32]
 800409a:	f023 0210 	bic.w	r2, r3, #16
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6a1b      	ldr	r3, [r3, #32]
 80040a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	699b      	ldr	r3, [r3, #24]
 80040b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	021b      	lsls	r3, r3, #8
 80040ca:	68fa      	ldr	r2, [r7, #12]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	f023 0320 	bic.w	r3, r3, #32
 80040d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	011b      	lsls	r3, r3, #4
 80040de:	697a      	ldr	r2, [r7, #20]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	4a1d      	ldr	r2, [pc, #116]	; (800415c <TIM_OC2_SetConfig+0xd0>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d10d      	bne.n	8004108 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	011b      	lsls	r3, r3, #4
 80040fa:	697a      	ldr	r2, [r7, #20]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004106:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	4a14      	ldr	r2, [pc, #80]	; (800415c <TIM_OC2_SetConfig+0xd0>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d113      	bne.n	8004138 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004116:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800411e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	695b      	ldr	r3, [r3, #20]
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	693a      	ldr	r2, [r7, #16]
 8004128:	4313      	orrs	r3, r2
 800412a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	699b      	ldr	r3, [r3, #24]
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	693a      	ldr	r2, [r7, #16]
 8004134:	4313      	orrs	r3, r2
 8004136:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	693a      	ldr	r2, [r7, #16]
 800413c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	68fa      	ldr	r2, [r7, #12]
 8004142:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	685a      	ldr	r2, [r3, #4]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	697a      	ldr	r2, [r7, #20]
 8004150:	621a      	str	r2, [r3, #32]
}
 8004152:	bf00      	nop
 8004154:	371c      	adds	r7, #28
 8004156:	46bd      	mov	sp, r7
 8004158:	bc80      	pop	{r7}
 800415a:	4770      	bx	lr
 800415c:	40012c00 	.word	0x40012c00

08004160 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004160:	b480      	push	{r7}
 8004162:	b087      	sub	sp, #28
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a1b      	ldr	r3, [r3, #32]
 800416e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a1b      	ldr	r3, [r3, #32]
 800417a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	69db      	ldr	r3, [r3, #28]
 8004186:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800418e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	f023 0303 	bic.w	r3, r3, #3
 8004196:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	68fa      	ldr	r2, [r7, #12]
 800419e:	4313      	orrs	r3, r2
 80041a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80041a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	021b      	lsls	r3, r3, #8
 80041b0:	697a      	ldr	r2, [r7, #20]
 80041b2:	4313      	orrs	r3, r2
 80041b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a1d      	ldr	r2, [pc, #116]	; (8004230 <TIM_OC3_SetConfig+0xd0>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d10d      	bne.n	80041da <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	021b      	lsls	r3, r3, #8
 80041cc:	697a      	ldr	r2, [r7, #20]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a14      	ldr	r2, [pc, #80]	; (8004230 <TIM_OC3_SetConfig+0xd0>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d113      	bne.n	800420a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80041e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80041f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	695b      	ldr	r3, [r3, #20]
 80041f6:	011b      	lsls	r3, r3, #4
 80041f8:	693a      	ldr	r2, [r7, #16]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	699b      	ldr	r3, [r3, #24]
 8004202:	011b      	lsls	r3, r3, #4
 8004204:	693a      	ldr	r2, [r7, #16]
 8004206:	4313      	orrs	r3, r2
 8004208:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	693a      	ldr	r2, [r7, #16]
 800420e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	68fa      	ldr	r2, [r7, #12]
 8004214:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	685a      	ldr	r2, [r3, #4]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	697a      	ldr	r2, [r7, #20]
 8004222:	621a      	str	r2, [r3, #32]
}
 8004224:	bf00      	nop
 8004226:	371c      	adds	r7, #28
 8004228:	46bd      	mov	sp, r7
 800422a:	bc80      	pop	{r7}
 800422c:	4770      	bx	lr
 800422e:	bf00      	nop
 8004230:	40012c00 	.word	0x40012c00

08004234 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004234:	b480      	push	{r7}
 8004236:	b087      	sub	sp, #28
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6a1b      	ldr	r3, [r3, #32]
 8004242:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6a1b      	ldr	r3, [r3, #32]
 800424e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	69db      	ldr	r3, [r3, #28]
 800425a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004262:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800426a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	021b      	lsls	r3, r3, #8
 8004272:	68fa      	ldr	r2, [r7, #12]
 8004274:	4313      	orrs	r3, r2
 8004276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800427e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	031b      	lsls	r3, r3, #12
 8004286:	693a      	ldr	r2, [r7, #16]
 8004288:	4313      	orrs	r3, r2
 800428a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	4a0f      	ldr	r2, [pc, #60]	; (80042cc <TIM_OC4_SetConfig+0x98>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d109      	bne.n	80042a8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800429a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	695b      	ldr	r3, [r3, #20]
 80042a0:	019b      	lsls	r3, r3, #6
 80042a2:	697a      	ldr	r2, [r7, #20]
 80042a4:	4313      	orrs	r3, r2
 80042a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	697a      	ldr	r2, [r7, #20]
 80042ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	68fa      	ldr	r2, [r7, #12]
 80042b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	685a      	ldr	r2, [r3, #4]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	693a      	ldr	r2, [r7, #16]
 80042c0:	621a      	str	r2, [r3, #32]
}
 80042c2:	bf00      	nop
 80042c4:	371c      	adds	r7, #28
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bc80      	pop	{r7}
 80042ca:	4770      	bx	lr
 80042cc:	40012c00 	.word	0x40012c00

080042d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b087      	sub	sp, #28
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	60f8      	str	r0, [r7, #12]
 80042d8:	60b9      	str	r1, [r7, #8]
 80042da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6a1b      	ldr	r3, [r3, #32]
 80042e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	6a1b      	ldr	r3, [r3, #32]
 80042e6:	f023 0201 	bic.w	r2, r3, #1
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	699b      	ldr	r3, [r3, #24]
 80042f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	011b      	lsls	r3, r3, #4
 8004300:	693a      	ldr	r2, [r7, #16]
 8004302:	4313      	orrs	r3, r2
 8004304:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	f023 030a 	bic.w	r3, r3, #10
 800430c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800430e:	697a      	ldr	r2, [r7, #20]
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	4313      	orrs	r3, r2
 8004314:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	693a      	ldr	r2, [r7, #16]
 800431a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	697a      	ldr	r2, [r7, #20]
 8004320:	621a      	str	r2, [r3, #32]
}
 8004322:	bf00      	nop
 8004324:	371c      	adds	r7, #28
 8004326:	46bd      	mov	sp, r7
 8004328:	bc80      	pop	{r7}
 800432a:	4770      	bx	lr

0800432c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800432c:	b480      	push	{r7}
 800432e:	b087      	sub	sp, #28
 8004330:	af00      	add	r7, sp, #0
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	60b9      	str	r1, [r7, #8]
 8004336:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6a1b      	ldr	r3, [r3, #32]
 800433c:	f023 0210 	bic.w	r2, r3, #16
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	699b      	ldr	r3, [r3, #24]
 8004348:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	6a1b      	ldr	r3, [r3, #32]
 800434e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004356:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	031b      	lsls	r3, r3, #12
 800435c:	697a      	ldr	r2, [r7, #20]
 800435e:	4313      	orrs	r3, r2
 8004360:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004368:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	011b      	lsls	r3, r3, #4
 800436e:	693a      	ldr	r2, [r7, #16]
 8004370:	4313      	orrs	r3, r2
 8004372:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	697a      	ldr	r2, [r7, #20]
 8004378:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	693a      	ldr	r2, [r7, #16]
 800437e:	621a      	str	r2, [r3, #32]
}
 8004380:	bf00      	nop
 8004382:	371c      	adds	r7, #28
 8004384:	46bd      	mov	sp, r7
 8004386:	bc80      	pop	{r7}
 8004388:	4770      	bx	lr

0800438a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800438a:	b480      	push	{r7}
 800438c:	b085      	sub	sp, #20
 800438e:	af00      	add	r7, sp, #0
 8004390:	6078      	str	r0, [r7, #4]
 8004392:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80043a2:	683a      	ldr	r2, [r7, #0]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	f043 0307 	orr.w	r3, r3, #7
 80043ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	68fa      	ldr	r2, [r7, #12]
 80043b2:	609a      	str	r2, [r3, #8]
}
 80043b4:	bf00      	nop
 80043b6:	3714      	adds	r7, #20
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bc80      	pop	{r7}
 80043bc:	4770      	bx	lr

080043be <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80043be:	b480      	push	{r7}
 80043c0:	b087      	sub	sp, #28
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	60f8      	str	r0, [r7, #12]
 80043c6:	60b9      	str	r1, [r7, #8]
 80043c8:	607a      	str	r2, [r7, #4]
 80043ca:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043d8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	021a      	lsls	r2, r3, #8
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	431a      	orrs	r2, r3
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	4313      	orrs	r3, r2
 80043e6:	697a      	ldr	r2, [r7, #20]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	697a      	ldr	r2, [r7, #20]
 80043f0:	609a      	str	r2, [r3, #8]
}
 80043f2:	bf00      	nop
 80043f4:	371c      	adds	r7, #28
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bc80      	pop	{r7}
 80043fa:	4770      	bx	lr

080043fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b087      	sub	sp, #28
 8004400:	af00      	add	r7, sp, #0
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	60b9      	str	r1, [r7, #8]
 8004406:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	f003 031f 	and.w	r3, r3, #31
 800440e:	2201      	movs	r2, #1
 8004410:	fa02 f303 	lsl.w	r3, r2, r3
 8004414:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	6a1a      	ldr	r2, [r3, #32]
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	43db      	mvns	r3, r3
 800441e:	401a      	ands	r2, r3
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6a1a      	ldr	r2, [r3, #32]
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	f003 031f 	and.w	r3, r3, #31
 800442e:	6879      	ldr	r1, [r7, #4]
 8004430:	fa01 f303 	lsl.w	r3, r1, r3
 8004434:	431a      	orrs	r2, r3
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	621a      	str	r2, [r3, #32]
}
 800443a:	bf00      	nop
 800443c:	371c      	adds	r7, #28
 800443e:	46bd      	mov	sp, r7
 8004440:	bc80      	pop	{r7}
 8004442:	4770      	bx	lr

08004444 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004444:	b480      	push	{r7}
 8004446:	b085      	sub	sp, #20
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004454:	2b01      	cmp	r3, #1
 8004456:	d101      	bne.n	800445c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004458:	2302      	movs	r3, #2
 800445a:	e046      	b.n	80044ea <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2202      	movs	r2, #2
 8004468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004482:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	68fa      	ldr	r2, [r7, #12]
 800448a:	4313      	orrs	r3, r2
 800448c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	68fa      	ldr	r2, [r7, #12]
 8004494:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a16      	ldr	r2, [pc, #88]	; (80044f4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d00e      	beq.n	80044be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044a8:	d009      	beq.n	80044be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a12      	ldr	r2, [pc, #72]	; (80044f8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d004      	beq.n	80044be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a10      	ldr	r2, [pc, #64]	; (80044fc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d10c      	bne.n	80044d8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	68ba      	ldr	r2, [r7, #8]
 80044cc:	4313      	orrs	r3, r2
 80044ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	68ba      	ldr	r2, [r7, #8]
 80044d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044e8:	2300      	movs	r3, #0
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3714      	adds	r7, #20
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bc80      	pop	{r7}
 80044f2:	4770      	bx	lr
 80044f4:	40012c00 	.word	0x40012c00
 80044f8:	40000400 	.word	0x40000400
 80044fc:	40000800 	.word	0x40000800

08004500 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004500:	b480      	push	{r7}
 8004502:	b083      	sub	sp, #12
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004508:	bf00      	nop
 800450a:	370c      	adds	r7, #12
 800450c:	46bd      	mov	sp, r7
 800450e:	bc80      	pop	{r7}
 8004510:	4770      	bx	lr

08004512 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004512:	b480      	push	{r7}
 8004514:	b083      	sub	sp, #12
 8004516:	af00      	add	r7, sp, #0
 8004518:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800451a:	bf00      	nop
 800451c:	370c      	adds	r7, #12
 800451e:	46bd      	mov	sp, r7
 8004520:	bc80      	pop	{r7}
 8004522:	4770      	bx	lr

08004524 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b082      	sub	sp, #8
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d101      	bne.n	8004536 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e03f      	b.n	80045b6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800453c:	b2db      	uxtb	r3, r3
 800453e:	2b00      	cmp	r3, #0
 8004540:	d106      	bne.n	8004550 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2200      	movs	r2, #0
 8004546:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f004 fa42 	bl	80089d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2224      	movs	r2, #36	; 0x24
 8004554:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	68da      	ldr	r2, [r3, #12]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004566:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f000 fbb3 	bl	8004cd4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	691a      	ldr	r2, [r3, #16]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800457c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	695a      	ldr	r2, [r3, #20]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800458c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	68da      	ldr	r2, [r3, #12]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800459c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2220      	movs	r2, #32
 80045a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2220      	movs	r2, #32
 80045b0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80045b4:	2300      	movs	r3, #0
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3708      	adds	r7, #8
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}

080045be <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045be:	b480      	push	{r7}
 80045c0:	b085      	sub	sp, #20
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	60f8      	str	r0, [r7, #12]
 80045c6:	60b9      	str	r1, [r7, #8]
 80045c8:	4613      	mov	r3, r2
 80045ca:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	2b20      	cmp	r3, #32
 80045d6:	d140      	bne.n	800465a <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d002      	beq.n	80045e4 <HAL_UART_Receive_IT+0x26>
 80045de:	88fb      	ldrh	r3, [r7, #6]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d101      	bne.n	80045e8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	e039      	b.n	800465c <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d101      	bne.n	80045f6 <HAL_UART_Receive_IT+0x38>
 80045f2:	2302      	movs	r3, #2
 80045f4:	e032      	b.n	800465c <HAL_UART_Receive_IT+0x9e>
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2201      	movs	r2, #1
 80045fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	68ba      	ldr	r2, [r7, #8]
 8004602:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	88fa      	ldrh	r2, [r7, #6]
 8004608:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	88fa      	ldrh	r2, [r7, #6]
 800460e:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2200      	movs	r2, #0
 8004614:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2222      	movs	r2, #34	; 0x22
 800461a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2200      	movs	r2, #0
 8004622:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	68da      	ldr	r2, [r3, #12]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004634:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	695a      	ldr	r2, [r3, #20]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f042 0201 	orr.w	r2, r2, #1
 8004644:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	68da      	ldr	r2, [r3, #12]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f042 0220 	orr.w	r2, r2, #32
 8004654:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004656:	2300      	movs	r3, #0
 8004658:	e000      	b.n	800465c <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800465a:	2302      	movs	r3, #2
  }
}
 800465c:	4618      	mov	r0, r3
 800465e:	3714      	adds	r7, #20
 8004660:	46bd      	mov	sp, r7
 8004662:	bc80      	pop	{r7}
 8004664:	4770      	bx	lr
	...

08004668 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b086      	sub	sp, #24
 800466c:	af00      	add	r7, sp, #0
 800466e:	60f8      	str	r0, [r7, #12]
 8004670:	60b9      	str	r1, [r7, #8]
 8004672:	4613      	mov	r3, r2
 8004674:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800467c:	b2db      	uxtb	r3, r3
 800467e:	2b20      	cmp	r3, #32
 8004680:	d153      	bne.n	800472a <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d002      	beq.n	800468e <HAL_UART_Transmit_DMA+0x26>
 8004688:	88fb      	ldrh	r3, [r7, #6]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d101      	bne.n	8004692 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e04c      	b.n	800472c <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004698:	2b01      	cmp	r3, #1
 800469a:	d101      	bne.n	80046a0 <HAL_UART_Transmit_DMA+0x38>
 800469c:	2302      	movs	r3, #2
 800469e:	e045      	b.n	800472c <HAL_UART_Transmit_DMA+0xc4>
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2201      	movs	r2, #1
 80046a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 80046a8:	68ba      	ldr	r2, [r7, #8]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	88fa      	ldrh	r2, [r7, #6]
 80046b2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	88fa      	ldrh	r2, [r7, #6]
 80046b8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2200      	movs	r2, #0
 80046be:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2221      	movs	r2, #33	; 0x21
 80046c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046cc:	4a19      	ldr	r2, [pc, #100]	; (8004734 <HAL_UART_Transmit_DMA+0xcc>)
 80046ce:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d4:	4a18      	ldr	r2, [pc, #96]	; (8004738 <HAL_UART_Transmit_DMA+0xd0>)
 80046d6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046dc:	4a17      	ldr	r2, [pc, #92]	; (800473c <HAL_UART_Transmit_DMA+0xd4>)
 80046de:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e4:	2200      	movs	r2, #0
 80046e6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 80046e8:	f107 0308 	add.w	r3, r7, #8
 80046ec:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	6819      	ldr	r1, [r3, #0]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	3304      	adds	r3, #4
 80046fc:	461a      	mov	r2, r3
 80046fe:	88fb      	ldrh	r3, [r7, #6]
 8004700:	f7fc fece 	bl	80014a0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800470c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2200      	movs	r2, #0
 8004712:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	695a      	ldr	r2, [r3, #20]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004724:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8004726:	2300      	movs	r3, #0
 8004728:	e000      	b.n	800472c <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800472a:	2302      	movs	r3, #2
  }
}
 800472c:	4618      	mov	r0, r3
 800472e:	3718      	adds	r7, #24
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}
 8004734:	08004977 	.word	0x08004977
 8004738:	080049c9 	.word	0x080049c9
 800473c:	080049e5 	.word	0x080049e5

08004740 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b088      	sub	sp, #32
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	68db      	ldr	r3, [r3, #12]
 8004756:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	695b      	ldr	r3, [r3, #20]
 800475e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004760:	2300      	movs	r3, #0
 8004762:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004764:	2300      	movs	r3, #0
 8004766:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004768:	69fb      	ldr	r3, [r7, #28]
 800476a:	f003 030f 	and.w	r3, r3, #15
 800476e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d10d      	bne.n	8004792 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	f003 0320 	and.w	r3, r3, #32
 800477c:	2b00      	cmp	r3, #0
 800477e:	d008      	beq.n	8004792 <HAL_UART_IRQHandler+0x52>
 8004780:	69bb      	ldr	r3, [r7, #24]
 8004782:	f003 0320 	and.w	r3, r3, #32
 8004786:	2b00      	cmp	r3, #0
 8004788:	d003      	beq.n	8004792 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f000 fa21 	bl	8004bd2 <UART_Receive_IT>
      return;
 8004790:	e0d1      	b.n	8004936 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	2b00      	cmp	r3, #0
 8004796:	f000 80b0 	beq.w	80048fa <HAL_UART_IRQHandler+0x1ba>
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	f003 0301 	and.w	r3, r3, #1
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d105      	bne.n	80047b0 <HAL_UART_IRQHandler+0x70>
 80047a4:	69bb      	ldr	r3, [r7, #24]
 80047a6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	f000 80a5 	beq.w	80048fa <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80047b0:	69fb      	ldr	r3, [r7, #28]
 80047b2:	f003 0301 	and.w	r3, r3, #1
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d00a      	beq.n	80047d0 <HAL_UART_IRQHandler+0x90>
 80047ba:	69bb      	ldr	r3, [r7, #24]
 80047bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d005      	beq.n	80047d0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047c8:	f043 0201 	orr.w	r2, r3, #1
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	f003 0304 	and.w	r3, r3, #4
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d00a      	beq.n	80047f0 <HAL_UART_IRQHandler+0xb0>
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	f003 0301 	and.w	r3, r3, #1
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d005      	beq.n	80047f0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047e8:	f043 0202 	orr.w	r2, r3, #2
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80047f0:	69fb      	ldr	r3, [r7, #28]
 80047f2:	f003 0302 	and.w	r3, r3, #2
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d00a      	beq.n	8004810 <HAL_UART_IRQHandler+0xd0>
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	f003 0301 	and.w	r3, r3, #1
 8004800:	2b00      	cmp	r3, #0
 8004802:	d005      	beq.n	8004810 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004808:	f043 0204 	orr.w	r2, r3, #4
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004810:	69fb      	ldr	r3, [r7, #28]
 8004812:	f003 0308 	and.w	r3, r3, #8
 8004816:	2b00      	cmp	r3, #0
 8004818:	d00f      	beq.n	800483a <HAL_UART_IRQHandler+0xfa>
 800481a:	69bb      	ldr	r3, [r7, #24]
 800481c:	f003 0320 	and.w	r3, r3, #32
 8004820:	2b00      	cmp	r3, #0
 8004822:	d104      	bne.n	800482e <HAL_UART_IRQHandler+0xee>
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	f003 0301 	and.w	r3, r3, #1
 800482a:	2b00      	cmp	r3, #0
 800482c:	d005      	beq.n	800483a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004832:	f043 0208 	orr.w	r2, r3, #8
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800483e:	2b00      	cmp	r3, #0
 8004840:	d078      	beq.n	8004934 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004842:	69fb      	ldr	r3, [r7, #28]
 8004844:	f003 0320 	and.w	r3, r3, #32
 8004848:	2b00      	cmp	r3, #0
 800484a:	d007      	beq.n	800485c <HAL_UART_IRQHandler+0x11c>
 800484c:	69bb      	ldr	r3, [r7, #24]
 800484e:	f003 0320 	and.w	r3, r3, #32
 8004852:	2b00      	cmp	r3, #0
 8004854:	d002      	beq.n	800485c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f000 f9bb 	bl	8004bd2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	695b      	ldr	r3, [r3, #20]
 8004862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004866:	2b00      	cmp	r3, #0
 8004868:	bf14      	ite	ne
 800486a:	2301      	movne	r3, #1
 800486c:	2300      	moveq	r3, #0
 800486e:	b2db      	uxtb	r3, r3
 8004870:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004876:	f003 0308 	and.w	r3, r3, #8
 800487a:	2b00      	cmp	r3, #0
 800487c:	d102      	bne.n	8004884 <HAL_UART_IRQHandler+0x144>
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d031      	beq.n	80048e8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f000 f90c 	bl	8004aa2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	695b      	ldr	r3, [r3, #20]
 8004890:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004894:	2b00      	cmp	r3, #0
 8004896:	d023      	beq.n	80048e0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	695a      	ldr	r2, [r3, #20]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048a6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d013      	beq.n	80048d8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048b4:	4a21      	ldr	r2, [pc, #132]	; (800493c <HAL_UART_IRQHandler+0x1fc>)
 80048b6:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048bc:	4618      	mov	r0, r3
 80048be:	f7fc fe4f 	bl	8001560 <HAL_DMA_Abort_IT>
 80048c2:	4603      	mov	r3, r0
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d016      	beq.n	80048f6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80048d2:	4610      	mov	r0, r2
 80048d4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048d6:	e00e      	b.n	80048f6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	f000 f843 	bl	8004964 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048de:	e00a      	b.n	80048f6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f000 f83f 	bl	8004964 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048e6:	e006      	b.n	80048f6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f000 f83b 	bl	8004964 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2200      	movs	r2, #0
 80048f2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80048f4:	e01e      	b.n	8004934 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048f6:	bf00      	nop
    return;
 80048f8:	e01c      	b.n	8004934 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80048fa:	69fb      	ldr	r3, [r7, #28]
 80048fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004900:	2b00      	cmp	r3, #0
 8004902:	d008      	beq.n	8004916 <HAL_UART_IRQHandler+0x1d6>
 8004904:	69bb      	ldr	r3, [r7, #24]
 8004906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800490a:	2b00      	cmp	r3, #0
 800490c:	d003      	beq.n	8004916 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f000 f8f8 	bl	8004b04 <UART_Transmit_IT>
    return;
 8004914:	e00f      	b.n	8004936 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004916:	69fb      	ldr	r3, [r7, #28]
 8004918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800491c:	2b00      	cmp	r3, #0
 800491e:	d00a      	beq.n	8004936 <HAL_UART_IRQHandler+0x1f6>
 8004920:	69bb      	ldr	r3, [r7, #24]
 8004922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004926:	2b00      	cmp	r3, #0
 8004928:	d005      	beq.n	8004936 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f000 f939 	bl	8004ba2 <UART_EndTransmit_IT>
    return;
 8004930:	bf00      	nop
 8004932:	e000      	b.n	8004936 <HAL_UART_IRQHandler+0x1f6>
    return;
 8004934:	bf00      	nop
  }
}
 8004936:	3720      	adds	r7, #32
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}
 800493c:	08004add 	.word	0x08004add

08004940 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004940:	b480      	push	{r7}
 8004942:	b083      	sub	sp, #12
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004948:	bf00      	nop
 800494a:	370c      	adds	r7, #12
 800494c:	46bd      	mov	sp, r7
 800494e:	bc80      	pop	{r7}
 8004950:	4770      	bx	lr

08004952 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004952:	b480      	push	{r7}
 8004954:	b083      	sub	sp, #12
 8004956:	af00      	add	r7, sp, #0
 8004958:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800495a:	bf00      	nop
 800495c:	370c      	adds	r7, #12
 800495e:	46bd      	mov	sp, r7
 8004960:	bc80      	pop	{r7}
 8004962:	4770      	bx	lr

08004964 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004964:	b480      	push	{r7}
 8004966:	b083      	sub	sp, #12
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800496c:	bf00      	nop
 800496e:	370c      	adds	r7, #12
 8004970:	46bd      	mov	sp, r7
 8004972:	bc80      	pop	{r7}
 8004974:	4770      	bx	lr

08004976 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004976:	b580      	push	{r7, lr}
 8004978:	b084      	sub	sp, #16
 800497a:	af00      	add	r7, sp, #0
 800497c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004982:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 0320 	and.w	r3, r3, #32
 800498e:	2b00      	cmp	r3, #0
 8004990:	d113      	bne.n	80049ba <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2200      	movs	r2, #0
 8004996:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	695a      	ldr	r2, [r3, #20]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80049a6:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	68da      	ldr	r2, [r3, #12]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049b6:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80049b8:	e002      	b.n	80049c0 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 80049ba:	68f8      	ldr	r0, [r7, #12]
 80049bc:	f7ff ffc0 	bl	8004940 <HAL_UART_TxCpltCallback>
}
 80049c0:	bf00      	nop
 80049c2:	3710      	adds	r7, #16
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}

080049c8 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b084      	sub	sp, #16
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80049d6:	68f8      	ldr	r0, [r7, #12]
 80049d8:	f7ff ffbb 	bl	8004952 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80049dc:	bf00      	nop
 80049de:	3710      	adds	r7, #16
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}

080049e4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b084      	sub	sp, #16
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80049ec:	2300      	movs	r3, #0
 80049ee:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	695b      	ldr	r3, [r3, #20]
 80049fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	bf14      	ite	ne
 8004a04:	2301      	movne	r3, #1
 8004a06:	2300      	moveq	r3, #0
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	2b21      	cmp	r3, #33	; 0x21
 8004a16:	d108      	bne.n	8004a2a <UART_DMAError+0x46>
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d005      	beq.n	8004a2a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	2200      	movs	r2, #0
 8004a22:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004a24:	68b8      	ldr	r0, [r7, #8]
 8004a26:	f000 f827 	bl	8004a78 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	695b      	ldr	r3, [r3, #20]
 8004a30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	bf14      	ite	ne
 8004a38:	2301      	movne	r3, #1
 8004a3a:	2300      	moveq	r3, #0
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	2b22      	cmp	r3, #34	; 0x22
 8004a4a:	d108      	bne.n	8004a5e <UART_DMAError+0x7a>
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d005      	beq.n	8004a5e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	2200      	movs	r2, #0
 8004a56:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004a58:	68b8      	ldr	r0, [r7, #8]
 8004a5a:	f000 f822 	bl	8004aa2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a62:	f043 0210 	orr.w	r2, r3, #16
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a6a:	68b8      	ldr	r0, [r7, #8]
 8004a6c:	f7ff ff7a 	bl	8004964 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a70:	bf00      	nop
 8004a72:	3710      	adds	r7, #16
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}

08004a78 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	68da      	ldr	r2, [r3, #12]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004a8e:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2220      	movs	r2, #32
 8004a94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8004a98:	bf00      	nop
 8004a9a:	370c      	adds	r7, #12
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bc80      	pop	{r7}
 8004aa0:	4770      	bx	lr

08004aa2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004aa2:	b480      	push	{r7}
 8004aa4:	b083      	sub	sp, #12
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	68da      	ldr	r2, [r3, #12]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004ab8:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	695a      	ldr	r2, [r3, #20]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f022 0201 	bic.w	r2, r2, #1
 8004ac8:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2220      	movs	r2, #32
 8004ace:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004ad2:	bf00      	nop
 8004ad4:	370c      	adds	r7, #12
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bc80      	pop	{r7}
 8004ada:	4770      	bx	lr

08004adc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b084      	sub	sp, #16
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2200      	movs	r2, #0
 8004aee:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2200      	movs	r2, #0
 8004af4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004af6:	68f8      	ldr	r0, [r7, #12]
 8004af8:	f7ff ff34 	bl	8004964 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004afc:	bf00      	nop
 8004afe:	3710      	adds	r7, #16
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}

08004b04 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b085      	sub	sp, #20
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	2b21      	cmp	r3, #33	; 0x21
 8004b16:	d13e      	bne.n	8004b96 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b20:	d114      	bne.n	8004b4c <UART_Transmit_IT+0x48>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	691b      	ldr	r3, [r3, #16]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d110      	bne.n	8004b4c <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6a1b      	ldr	r3, [r3, #32]
 8004b2e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	881b      	ldrh	r3, [r3, #0]
 8004b34:	461a      	mov	r2, r3
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b3e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6a1b      	ldr	r3, [r3, #32]
 8004b44:	1c9a      	adds	r2, r3, #2
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	621a      	str	r2, [r3, #32]
 8004b4a:	e008      	b.n	8004b5e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6a1b      	ldr	r3, [r3, #32]
 8004b50:	1c59      	adds	r1, r3, #1
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	6211      	str	r1, [r2, #32]
 8004b56:	781a      	ldrb	r2, [r3, #0]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	3b01      	subs	r3, #1
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	4619      	mov	r1, r3
 8004b6c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d10f      	bne.n	8004b92 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	68da      	ldr	r2, [r3, #12]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b80:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	68da      	ldr	r2, [r3, #12]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b90:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004b92:	2300      	movs	r3, #0
 8004b94:	e000      	b.n	8004b98 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004b96:	2302      	movs	r3, #2
  }
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3714      	adds	r7, #20
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bc80      	pop	{r7}
 8004ba0:	4770      	bx	lr

08004ba2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004ba2:	b580      	push	{r7, lr}
 8004ba4:	b082      	sub	sp, #8
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	68da      	ldr	r2, [r3, #12]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bb8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2220      	movs	r2, #32
 8004bbe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f7ff febc 	bl	8004940 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004bc8:	2300      	movs	r3, #0
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3708      	adds	r7, #8
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}

08004bd2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004bd2:	b580      	push	{r7, lr}
 8004bd4:	b084      	sub	sp, #16
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	2b22      	cmp	r3, #34	; 0x22
 8004be4:	d170      	bne.n	8004cc8 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bee:	d117      	bne.n	8004c20 <UART_Receive_IT+0x4e>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	691b      	ldr	r3, [r3, #16]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d113      	bne.n	8004c20 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c00:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c0e:	b29a      	uxth	r2, r3
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c18:	1c9a      	adds	r2, r3, #2
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	629a      	str	r2, [r3, #40]	; 0x28
 8004c1e:	e026      	b.n	8004c6e <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c24:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8004c26:	2300      	movs	r3, #0
 8004c28:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c32:	d007      	beq.n	8004c44 <UART_Receive_IT+0x72>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d10a      	bne.n	8004c52 <UART_Receive_IT+0x80>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	691b      	ldr	r3, [r3, #16]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d106      	bne.n	8004c52 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	b2da      	uxtb	r2, r3
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	701a      	strb	r2, [r3, #0]
 8004c50:	e008      	b.n	8004c64 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c5e:	b2da      	uxtb	r2, r3
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c68:	1c5a      	adds	r2, r3, #1
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	3b01      	subs	r3, #1
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	4619      	mov	r1, r3
 8004c7c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d120      	bne.n	8004cc4 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	68da      	ldr	r2, [r3, #12]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f022 0220 	bic.w	r2, r2, #32
 8004c90:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	68da      	ldr	r2, [r3, #12]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ca0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	695a      	ldr	r2, [r3, #20]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f022 0201 	bic.w	r2, r2, #1
 8004cb0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2220      	movs	r2, #32
 8004cb6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f000 fe9c 	bl	80059f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	e002      	b.n	8004cca <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	e000      	b.n	8004cca <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8004cc8:	2302      	movs	r3, #2
  }
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3710      	adds	r7, #16
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}
	...

08004cd4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b084      	sub	sp, #16
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	691b      	ldr	r3, [r3, #16]
 8004ce2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	68da      	ldr	r2, [r3, #12]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	430a      	orrs	r2, r1
 8004cf0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	689a      	ldr	r2, [r3, #8]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	691b      	ldr	r3, [r3, #16]
 8004cfa:	431a      	orrs	r2, r3
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	695b      	ldr	r3, [r3, #20]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	68db      	ldr	r3, [r3, #12]
 8004d0a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004d0e:	f023 030c 	bic.w	r3, r3, #12
 8004d12:	687a      	ldr	r2, [r7, #4]
 8004d14:	6812      	ldr	r2, [r2, #0]
 8004d16:	68b9      	ldr	r1, [r7, #8]
 8004d18:	430b      	orrs	r3, r1
 8004d1a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	695b      	ldr	r3, [r3, #20]
 8004d22:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	699a      	ldr	r2, [r3, #24]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	430a      	orrs	r2, r1
 8004d30:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a2c      	ldr	r2, [pc, #176]	; (8004de8 <UART_SetConfig+0x114>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d103      	bne.n	8004d44 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004d3c:	f7fe fb1e 	bl	800337c <HAL_RCC_GetPCLK2Freq>
 8004d40:	60f8      	str	r0, [r7, #12]
 8004d42:	e002      	b.n	8004d4a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004d44:	f7fe fb06 	bl	8003354 <HAL_RCC_GetPCLK1Freq>
 8004d48:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d4a:	68fa      	ldr	r2, [r7, #12]
 8004d4c:	4613      	mov	r3, r2
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	4413      	add	r3, r2
 8004d52:	009a      	lsls	r2, r3, #2
 8004d54:	441a      	add	r2, r3
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d60:	4a22      	ldr	r2, [pc, #136]	; (8004dec <UART_SetConfig+0x118>)
 8004d62:	fba2 2303 	umull	r2, r3, r2, r3
 8004d66:	095b      	lsrs	r3, r3, #5
 8004d68:	0119      	lsls	r1, r3, #4
 8004d6a:	68fa      	ldr	r2, [r7, #12]
 8004d6c:	4613      	mov	r3, r2
 8004d6e:	009b      	lsls	r3, r3, #2
 8004d70:	4413      	add	r3, r2
 8004d72:	009a      	lsls	r2, r3, #2
 8004d74:	441a      	add	r2, r3
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d80:	4b1a      	ldr	r3, [pc, #104]	; (8004dec <UART_SetConfig+0x118>)
 8004d82:	fba3 0302 	umull	r0, r3, r3, r2
 8004d86:	095b      	lsrs	r3, r3, #5
 8004d88:	2064      	movs	r0, #100	; 0x64
 8004d8a:	fb00 f303 	mul.w	r3, r0, r3
 8004d8e:	1ad3      	subs	r3, r2, r3
 8004d90:	011b      	lsls	r3, r3, #4
 8004d92:	3332      	adds	r3, #50	; 0x32
 8004d94:	4a15      	ldr	r2, [pc, #84]	; (8004dec <UART_SetConfig+0x118>)
 8004d96:	fba2 2303 	umull	r2, r3, r2, r3
 8004d9a:	095b      	lsrs	r3, r3, #5
 8004d9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004da0:	4419      	add	r1, r3
 8004da2:	68fa      	ldr	r2, [r7, #12]
 8004da4:	4613      	mov	r3, r2
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	4413      	add	r3, r2
 8004daa:	009a      	lsls	r2, r3, #2
 8004dac:	441a      	add	r2, r3
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	fbb2 f2f3 	udiv	r2, r2, r3
 8004db8:	4b0c      	ldr	r3, [pc, #48]	; (8004dec <UART_SetConfig+0x118>)
 8004dba:	fba3 0302 	umull	r0, r3, r3, r2
 8004dbe:	095b      	lsrs	r3, r3, #5
 8004dc0:	2064      	movs	r0, #100	; 0x64
 8004dc2:	fb00 f303 	mul.w	r3, r0, r3
 8004dc6:	1ad3      	subs	r3, r2, r3
 8004dc8:	011b      	lsls	r3, r3, #4
 8004dca:	3332      	adds	r3, #50	; 0x32
 8004dcc:	4a07      	ldr	r2, [pc, #28]	; (8004dec <UART_SetConfig+0x118>)
 8004dce:	fba2 2303 	umull	r2, r3, r2, r3
 8004dd2:	095b      	lsrs	r3, r3, #5
 8004dd4:	f003 020f 	and.w	r2, r3, #15
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	440a      	add	r2, r1
 8004dde:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004de0:	bf00      	nop
 8004de2:	3710      	adds	r7, #16
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}
 8004de8:	40013800 	.word	0x40013800
 8004dec:	51eb851f 	.word	0x51eb851f

08004df0 <SBR1_init>:
//static const float theta_NS_p[] = { -0.5000f, -0.3000f, 0.0000f };
//static const float theta_ZE_p[] = { -0.3000f, 0.0000f, 0.3000f };
//static const float theta_PS_p[] = { 0.0000f, 0.3000f, 0.5000f };
//static const float theta_PB_p[] = { 0.3000f, 0.5000f, 1.0000f, 3.0000f };

void SBR1_init( void ){
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b08a      	sub	sp, #40	; 0x28
 8004df4:	af0a      	add	r7, sp, #40	; 0x28
    /* Set inputs */
    qFIS_InputSetup( SBR1_inputs, theta, -1.0000f, 1.0000f );
 8004df6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004dfa:	4a8d      	ldr	r2, [pc, #564]	; (8005030 <SBR1_init+0x240>)
 8004dfc:	2100      	movs	r1, #0
 8004dfe:	488d      	ldr	r0, [pc, #564]	; (8005034 <SBR1_init+0x244>)
 8004e00:	f001 fe12 	bl	8006a28 <qFIS_InputSetup>
    qFIS_InputSetup( SBR1_inputs, thetadot, -1.0000f, 1.0000f );
 8004e04:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004e08:	4a89      	ldr	r2, [pc, #548]	; (8005030 <SBR1_init+0x240>)
 8004e0a:	2101      	movs	r1, #1
 8004e0c:	4889      	ldr	r0, [pc, #548]	; (8005034 <SBR1_init+0x244>)
 8004e0e:	f001 fe0b 	bl	8006a28 <qFIS_InputSetup>
    /* Set outputs */
    qFIS_OutputSetup( SBR1_outputs, u, -1.0000f, 1.0000f );
 8004e12:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004e16:	4a86      	ldr	r2, [pc, #536]	; (8005030 <SBR1_init+0x240>)
 8004e18:	2100      	movs	r1, #0
 8004e1a:	4887      	ldr	r0, [pc, #540]	; (8005038 <SBR1_init+0x248>)
 8004e1c:	f001 fe2f 	bl	8006a7e <qFIS_OutputSetup>
    /* Set membership functions for the inputs */
    qFIS_SetMF( MFin, theta, theta_NB, trapmf, NULL, theta_NB_p, 1.0f );
 8004e20:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004e24:	9302      	str	r3, [sp, #8]
 8004e26:	4b85      	ldr	r3, [pc, #532]	; (800503c <SBR1_init+0x24c>)
 8004e28:	9301      	str	r3, [sp, #4]
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	9300      	str	r3, [sp, #0]
 8004e2e:	2302      	movs	r3, #2
 8004e30:	2200      	movs	r2, #0
 8004e32:	2100      	movs	r1, #0
 8004e34:	4882      	ldr	r0, [pc, #520]	; (8005040 <SBR1_init+0x250>)
 8004e36:	f001 fecb 	bl	8006bd0 <qFIS_SetMF>
    qFIS_SetMF( MFin, theta, theta_NS, trapmf, NULL, theta_NS_p, 1.0f );
 8004e3a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004e3e:	9302      	str	r3, [sp, #8]
 8004e40:	4b80      	ldr	r3, [pc, #512]	; (8005044 <SBR1_init+0x254>)
 8004e42:	9301      	str	r3, [sp, #4]
 8004e44:	2300      	movs	r3, #0
 8004e46:	9300      	str	r3, [sp, #0]
 8004e48:	2302      	movs	r3, #2
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	2100      	movs	r1, #0
 8004e4e:	487c      	ldr	r0, [pc, #496]	; (8005040 <SBR1_init+0x250>)
 8004e50:	f001 febe 	bl	8006bd0 <qFIS_SetMF>
    qFIS_SetMF( MFin, theta, theta_ZE, trimf, NULL, theta_ZE_p, 1.0f );
 8004e54:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004e58:	9302      	str	r3, [sp, #8]
 8004e5a:	4b7b      	ldr	r3, [pc, #492]	; (8005048 <SBR1_init+0x258>)
 8004e5c:	9301      	str	r3, [sp, #4]
 8004e5e:	2300      	movs	r3, #0
 8004e60:	9300      	str	r3, [sp, #0]
 8004e62:	2301      	movs	r3, #1
 8004e64:	2202      	movs	r2, #2
 8004e66:	2100      	movs	r1, #0
 8004e68:	4875      	ldr	r0, [pc, #468]	; (8005040 <SBR1_init+0x250>)
 8004e6a:	f001 feb1 	bl	8006bd0 <qFIS_SetMF>
    qFIS_SetMF( MFin, theta, theta_PS, trapmf, NULL, theta_PS_p, 1.0f );
 8004e6e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004e72:	9302      	str	r3, [sp, #8]
 8004e74:	4b75      	ldr	r3, [pc, #468]	; (800504c <SBR1_init+0x25c>)
 8004e76:	9301      	str	r3, [sp, #4]
 8004e78:	2300      	movs	r3, #0
 8004e7a:	9300      	str	r3, [sp, #0]
 8004e7c:	2302      	movs	r3, #2
 8004e7e:	2203      	movs	r2, #3
 8004e80:	2100      	movs	r1, #0
 8004e82:	486f      	ldr	r0, [pc, #444]	; (8005040 <SBR1_init+0x250>)
 8004e84:	f001 fea4 	bl	8006bd0 <qFIS_SetMF>
    qFIS_SetMF( MFin, theta, theta_PB, trapmf, NULL, theta_PB_p, 1.0f );
 8004e88:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004e8c:	9302      	str	r3, [sp, #8]
 8004e8e:	4b70      	ldr	r3, [pc, #448]	; (8005050 <SBR1_init+0x260>)
 8004e90:	9301      	str	r3, [sp, #4]
 8004e92:	2300      	movs	r3, #0
 8004e94:	9300      	str	r3, [sp, #0]
 8004e96:	2302      	movs	r3, #2
 8004e98:	2204      	movs	r2, #4
 8004e9a:	2100      	movs	r1, #0
 8004e9c:	4868      	ldr	r0, [pc, #416]	; (8005040 <SBR1_init+0x250>)
 8004e9e:	f001 fe97 	bl	8006bd0 <qFIS_SetMF>
    qFIS_SetMF( MFin, thetadot, thetadot_NB, trimf, NULL, thetadot_NB_p, 1.0f );
 8004ea2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004ea6:	9302      	str	r3, [sp, #8]
 8004ea8:	4b6a      	ldr	r3, [pc, #424]	; (8005054 <SBR1_init+0x264>)
 8004eaa:	9301      	str	r3, [sp, #4]
 8004eac:	2300      	movs	r3, #0
 8004eae:	9300      	str	r3, [sp, #0]
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	2205      	movs	r2, #5
 8004eb4:	2101      	movs	r1, #1
 8004eb6:	4862      	ldr	r0, [pc, #392]	; (8005040 <SBR1_init+0x250>)
 8004eb8:	f001 fe8a 	bl	8006bd0 <qFIS_SetMF>
    qFIS_SetMF( MFin, thetadot, thetadot_NS, trimf, NULL, thetadot_NS_p, 1.0f );
 8004ebc:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004ec0:	9302      	str	r3, [sp, #8]
 8004ec2:	4b65      	ldr	r3, [pc, #404]	; (8005058 <SBR1_init+0x268>)
 8004ec4:	9301      	str	r3, [sp, #4]
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	9300      	str	r3, [sp, #0]
 8004eca:	2301      	movs	r3, #1
 8004ecc:	2206      	movs	r2, #6
 8004ece:	2101      	movs	r1, #1
 8004ed0:	485b      	ldr	r0, [pc, #364]	; (8005040 <SBR1_init+0x250>)
 8004ed2:	f001 fe7d 	bl	8006bd0 <qFIS_SetMF>
    qFIS_SetMF( MFin, thetadot, thetadot_ZE, trimf, NULL, thetadot_ZE_p, 1.0f );
 8004ed6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004eda:	9302      	str	r3, [sp, #8]
 8004edc:	4b5f      	ldr	r3, [pc, #380]	; (800505c <SBR1_init+0x26c>)
 8004ede:	9301      	str	r3, [sp, #4]
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	9300      	str	r3, [sp, #0]
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	2207      	movs	r2, #7
 8004ee8:	2101      	movs	r1, #1
 8004eea:	4855      	ldr	r0, [pc, #340]	; (8005040 <SBR1_init+0x250>)
 8004eec:	f001 fe70 	bl	8006bd0 <qFIS_SetMF>
    qFIS_SetMF( MFin, thetadot, thetadot_PS, trimf, NULL, thetadot_PS_p, 1.0f );
 8004ef0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004ef4:	9302      	str	r3, [sp, #8]
 8004ef6:	4b5a      	ldr	r3, [pc, #360]	; (8005060 <SBR1_init+0x270>)
 8004ef8:	9301      	str	r3, [sp, #4]
 8004efa:	2300      	movs	r3, #0
 8004efc:	9300      	str	r3, [sp, #0]
 8004efe:	2301      	movs	r3, #1
 8004f00:	2208      	movs	r2, #8
 8004f02:	2101      	movs	r1, #1
 8004f04:	484e      	ldr	r0, [pc, #312]	; (8005040 <SBR1_init+0x250>)
 8004f06:	f001 fe63 	bl	8006bd0 <qFIS_SetMF>
    qFIS_SetMF( MFin, thetadot, thetadot_PB, trimf, NULL, thetadot_PB_p, 1.0f );
 8004f0a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004f0e:	9302      	str	r3, [sp, #8]
 8004f10:	4b54      	ldr	r3, [pc, #336]	; (8005064 <SBR1_init+0x274>)
 8004f12:	9301      	str	r3, [sp, #4]
 8004f14:	2300      	movs	r3, #0
 8004f16:	9300      	str	r3, [sp, #0]
 8004f18:	2301      	movs	r3, #1
 8004f1a:	2209      	movs	r2, #9
 8004f1c:	2101      	movs	r1, #1
 8004f1e:	4848      	ldr	r0, [pc, #288]	; (8005040 <SBR1_init+0x250>)
 8004f20:	f001 fe56 	bl	8006bd0 <qFIS_SetMF>
    /* Set membership functions for the outputs */
    qFIS_SetMF( MFout, u, u_NB, constantmf, NULL, u_NB_p, 1.0f );
 8004f24:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004f28:	9302      	str	r3, [sp, #8]
 8004f2a:	4b4f      	ldr	r3, [pc, #316]	; (8005068 <SBR1_init+0x278>)
 8004f2c:	9301      	str	r3, [sp, #4]
 8004f2e:	2300      	movs	r3, #0
 8004f30:	9300      	str	r3, [sp, #0]
 8004f32:	2313      	movs	r3, #19
 8004f34:	2200      	movs	r2, #0
 8004f36:	2100      	movs	r1, #0
 8004f38:	484c      	ldr	r0, [pc, #304]	; (800506c <SBR1_init+0x27c>)
 8004f3a:	f001 fe49 	bl	8006bd0 <qFIS_SetMF>
    qFIS_SetMF( MFout, u, u_NM, constantmf, NULL, u_NM_p, 1.0f );
 8004f3e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004f42:	9302      	str	r3, [sp, #8]
 8004f44:	4b4a      	ldr	r3, [pc, #296]	; (8005070 <SBR1_init+0x280>)
 8004f46:	9301      	str	r3, [sp, #4]
 8004f48:	2300      	movs	r3, #0
 8004f4a:	9300      	str	r3, [sp, #0]
 8004f4c:	2313      	movs	r3, #19
 8004f4e:	2201      	movs	r2, #1
 8004f50:	2100      	movs	r1, #0
 8004f52:	4846      	ldr	r0, [pc, #280]	; (800506c <SBR1_init+0x27c>)
 8004f54:	f001 fe3c 	bl	8006bd0 <qFIS_SetMF>
    qFIS_SetMF( MFout, u, u_NS, constantmf, NULL, u_NS_p, 1.0f );
 8004f58:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004f5c:	9302      	str	r3, [sp, #8]
 8004f5e:	4b45      	ldr	r3, [pc, #276]	; (8005074 <SBR1_init+0x284>)
 8004f60:	9301      	str	r3, [sp, #4]
 8004f62:	2300      	movs	r3, #0
 8004f64:	9300      	str	r3, [sp, #0]
 8004f66:	2313      	movs	r3, #19
 8004f68:	2202      	movs	r2, #2
 8004f6a:	2100      	movs	r1, #0
 8004f6c:	483f      	ldr	r0, [pc, #252]	; (800506c <SBR1_init+0x27c>)
 8004f6e:	f001 fe2f 	bl	8006bd0 <qFIS_SetMF>
    qFIS_SetMF( MFout, u, u_ZE, constantmf, NULL, u_ZE_p, 1.0f );
 8004f72:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004f76:	9302      	str	r3, [sp, #8]
 8004f78:	4b3f      	ldr	r3, [pc, #252]	; (8005078 <SBR1_init+0x288>)
 8004f7a:	9301      	str	r3, [sp, #4]
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	9300      	str	r3, [sp, #0]
 8004f80:	2313      	movs	r3, #19
 8004f82:	2203      	movs	r2, #3
 8004f84:	2100      	movs	r1, #0
 8004f86:	4839      	ldr	r0, [pc, #228]	; (800506c <SBR1_init+0x27c>)
 8004f88:	f001 fe22 	bl	8006bd0 <qFIS_SetMF>
    qFIS_SetMF( MFout, u, u_PS, constantmf, NULL, u_PS_p, 1.0f );
 8004f8c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004f90:	9302      	str	r3, [sp, #8]
 8004f92:	4b3a      	ldr	r3, [pc, #232]	; (800507c <SBR1_init+0x28c>)
 8004f94:	9301      	str	r3, [sp, #4]
 8004f96:	2300      	movs	r3, #0
 8004f98:	9300      	str	r3, [sp, #0]
 8004f9a:	2313      	movs	r3, #19
 8004f9c:	2204      	movs	r2, #4
 8004f9e:	2100      	movs	r1, #0
 8004fa0:	4832      	ldr	r0, [pc, #200]	; (800506c <SBR1_init+0x27c>)
 8004fa2:	f001 fe15 	bl	8006bd0 <qFIS_SetMF>
    qFIS_SetMF( MFout, u, u_PM, constantmf, NULL, u_PM_p, 1.0f );
 8004fa6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004faa:	9302      	str	r3, [sp, #8]
 8004fac:	4b34      	ldr	r3, [pc, #208]	; (8005080 <SBR1_init+0x290>)
 8004fae:	9301      	str	r3, [sp, #4]
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	9300      	str	r3, [sp, #0]
 8004fb4:	2313      	movs	r3, #19
 8004fb6:	2205      	movs	r2, #5
 8004fb8:	2100      	movs	r1, #0
 8004fba:	482c      	ldr	r0, [pc, #176]	; (800506c <SBR1_init+0x27c>)
 8004fbc:	f001 fe08 	bl	8006bd0 <qFIS_SetMF>
    qFIS_SetMF( MFout, u, u_PB, constantmf, NULL, u_PB_p, 1.0f );
 8004fc0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004fc4:	9302      	str	r3, [sp, #8]
 8004fc6:	4b2f      	ldr	r3, [pc, #188]	; (8005084 <SBR1_init+0x294>)
 8004fc8:	9301      	str	r3, [sp, #4]
 8004fca:	2300      	movs	r3, #0
 8004fcc:	9300      	str	r3, [sp, #0]
 8004fce:	2313      	movs	r3, #19
 8004fd0:	2206      	movs	r2, #6
 8004fd2:	2100      	movs	r1, #0
 8004fd4:	4825      	ldr	r0, [pc, #148]	; (800506c <SBR1_init+0x27c>)
 8004fd6:	f001 fdfb 	bl	8006bd0 <qFIS_SetMF>

    /* Configure the Inference System */
    qFIS_Setup( &SBR1, Sugeno,
 8004fda:	2319      	movs	r3, #25
 8004fdc:	9308      	str	r3, [sp, #32]
 8004fde:	4b2a      	ldr	r3, [pc, #168]	; (8005088 <SBR1_init+0x298>)
 8004fe0:	9307      	str	r3, [sp, #28]
 8004fe2:	4b2a      	ldr	r3, [pc, #168]	; (800508c <SBR1_init+0x29c>)
 8004fe4:	9306      	str	r3, [sp, #24]
 8004fe6:	238c      	movs	r3, #140	; 0x8c
 8004fe8:	9305      	str	r3, [sp, #20]
 8004fea:	4b20      	ldr	r3, [pc, #128]	; (800506c <SBR1_init+0x27c>)
 8004fec:	9304      	str	r3, [sp, #16]
 8004fee:	23c8      	movs	r3, #200	; 0xc8
 8004ff0:	9303      	str	r3, [sp, #12]
 8004ff2:	4b13      	ldr	r3, [pc, #76]	; (8005040 <SBR1_init+0x250>)
 8004ff4:	9302      	str	r3, [sp, #8]
 8004ff6:	2334      	movs	r3, #52	; 0x34
 8004ff8:	9301      	str	r3, [sp, #4]
 8004ffa:	4b0f      	ldr	r3, [pc, #60]	; (8005038 <SBR1_init+0x248>)
 8004ffc:	9300      	str	r3, [sp, #0]
 8004ffe:	2318      	movs	r3, #24
 8005000:	4a0c      	ldr	r2, [pc, #48]	; (8005034 <SBR1_init+0x244>)
 8005002:	2101      	movs	r1, #1
 8005004:	4822      	ldr	r0, [pc, #136]	; (8005090 <SBR1_init+0x2a0>)
 8005006:	f001 fc37 	bl	8006878 <qFIS_Setup>
                SBR1_inputs, sizeof(SBR1_inputs),
                SBR1_outputs, sizeof(SBR1_outputs),
                MFin, sizeof(MFin), MFout, sizeof(MFout),
                rules, rStrength, 25u );
    qFIS_SetParameter( &SBR1, qFIS_AND, qFIS_PROD );
 800500a:	2201      	movs	r2, #1
 800500c:	2102      	movs	r1, #2
 800500e:	4820      	ldr	r0, [pc, #128]	; (8005090 <SBR1_init+0x2a0>)
 8005010:	f001 fbc0 	bl	8006794 <qFIS_SetParameter>
    qFIS_SetParameter( &SBR1, qFIS_Implication, qFIS_PROD );
 8005014:	2201      	movs	r2, #1
 8005016:	2100      	movs	r1, #0
 8005018:	481d      	ldr	r0, [pc, #116]	; (8005090 <SBR1_init+0x2a0>)
 800501a:	f001 fbbb 	bl	8006794 <qFIS_SetParameter>
    qFIS_SetParameter( &SBR1, qFIS_Aggregation, qFIS_SUM );
 800501e:	2204      	movs	r2, #4
 8005020:	2101      	movs	r1, #1
 8005022:	481b      	ldr	r0, [pc, #108]	; (8005090 <SBR1_init+0x2a0>)
 8005024:	f001 fbb6 	bl	8006794 <qFIS_SetParameter>
}
 8005028:	bf00      	nop
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}
 800502e:	bf00      	nop
 8005030:	bf800000 	.word	0xbf800000
 8005034:	200002b4 	.word	0x200002b4
 8005038:	200002cc 	.word	0x200002cc
 800503c:	0800a050 	.word	0x0800a050
 8005040:	20000300 	.word	0x20000300
 8005044:	0800a060 	.word	0x0800a060
 8005048:	0800a070 	.word	0x0800a070
 800504c:	0800a07c 	.word	0x0800a07c
 8005050:	0800a08c 	.word	0x0800a08c
 8005054:	0800a09c 	.word	0x0800a09c
 8005058:	0800a0a8 	.word	0x0800a0a8
 800505c:	0800a0b4 	.word	0x0800a0b4
 8005060:	0800a0c0 	.word	0x0800a0c0
 8005064:	0800a0cc 	.word	0x0800a0cc
 8005068:	0800a0d8 	.word	0x0800a0d8
 800506c:	200003c8 	.word	0x200003c8
 8005070:	0800a0dc 	.word	0x0800a0dc
 8005074:	0800a0e0 	.word	0x0800a0e0
 8005078:	0800a0e4 	.word	0x0800a0e4
 800507c:	0800a0e8 	.word	0x0800a0e8
 8005080:	0800a0ec 	.word	0x0800a0ec
 8005084:	0800a0f0 	.word	0x0800a0f0
 8005088:	20000454 	.word	0x20000454
 800508c:	08009ebc 	.word	0x08009ebc
 8005090:	20000254 	.word	0x20000254

08005094 <SBR1_run>:

void SBR1_run( float *inputs, float *outputs ) {
 8005094:	b580      	push	{r7, lr}
 8005096:	b082      	sub	sp, #8
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	6039      	str	r1, [r7, #0]
    /* Set the crips inputs */
    qFIS_SetInput( SBR1_inputs, theta, inputs[ theta ] );
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	461a      	mov	r2, r3
 80050a4:	2100      	movs	r1, #0
 80050a6:	4811      	ldr	r0, [pc, #68]	; (80050ec <SBR1_run+0x58>)
 80050a8:	f001 fd56 	bl	8006b58 <qFIS_SetInput>
    qFIS_SetInput( SBR1_inputs, thetadot, inputs[ thetadot ] );
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	3304      	adds	r3, #4
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	461a      	mov	r2, r3
 80050b4:	2101      	movs	r1, #1
 80050b6:	480d      	ldr	r0, [pc, #52]	; (80050ec <SBR1_run+0x58>)
 80050b8:	f001 fd4e 	bl	8006b58 <qFIS_SetInput>

    qFIS_Fuzzify( &SBR1 );
 80050bc:	480c      	ldr	r0, [pc, #48]	; (80050f0 <SBR1_run+0x5c>)
 80050be:	f001 fe64 	bl	8006d8a <qFIS_Fuzzify>
    if ( qFIS_Inference( &SBR1 ) > 0 ) {
 80050c2:	480b      	ldr	r0, [pc, #44]	; (80050f0 <SBR1_run+0x5c>)
 80050c4:	f002 fa90 	bl	80075e8 <qFIS_Inference>
 80050c8:	4603      	mov	r3, r0
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	dd02      	ble.n	80050d4 <SBR1_run+0x40>
        qFIS_DeFuzzify( &SBR1 );
 80050ce:	4808      	ldr	r0, [pc, #32]	; (80050f0 <SBR1_run+0x5c>)
 80050d0:	f002 f945 	bl	800735e <qFIS_DeFuzzify>
    else {
        /* Error! */
    }

    /* Get the crips outputs */
    outputs[ u ] = qFIS_GetOutput( SBR1_outputs, u );
 80050d4:	2100      	movs	r1, #0
 80050d6:	4807      	ldr	r0, [pc, #28]	; (80050f4 <SBR1_run+0x60>)
 80050d8:	f001 fd5e 	bl	8006b98 <qFIS_GetOutput>
 80050dc:	4602      	mov	r2, r0
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	601a      	str	r2, [r3, #0]
}
 80050e2:	bf00      	nop
 80050e4:	3708      	adds	r7, #8
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
 80050ea:	bf00      	nop
 80050ec:	200002b4 	.word	0x200002b4
 80050f0:	20000254 	.word	0x20000254
 80050f4:	200002cc 	.word	0x200002cc

080050f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80050fc:	f7fc f806 	bl	800110c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005100:	f000 f81e 	bl	8005140 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005104:	f000 fa4c 	bl	80055a0 <MX_GPIO_Init>
  MX_DMA_Init();
 8005108:	f000 fa2c 	bl	8005564 <MX_DMA_Init>
  MX_I2C1_Init();
 800510c:	f000 f85a 	bl	80051c4 <MX_I2C1_Init>
  MX_TIM3_Init();
 8005110:	f000 f956 	bl	80053c0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8005114:	f000 f9a8 	bl	8005468 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8005118:	f000 f9fa 	bl	8005510 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 800511c:	f000 f8d0 	bl	80052c0 <MX_TIM2_Init>
  MX_TIM1_Init();
 8005120:	f000 f87e 	bl	8005220 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  app_init();
 8005124:	f000 fd38 	bl	8005b98 <app_init>
  SBR1_init();
 8005128:	f7ff fe62 	bl	8004df0 <SBR1_init>

  HAL_UART_Transmit_DMA(&huart1, "OK\r\n", 4);
 800512c:	2204      	movs	r2, #4
 800512e:	4902      	ldr	r1, [pc, #8]	; (8005138 <main+0x40>)
 8005130:	4802      	ldr	r0, [pc, #8]	; (800513c <main+0x44>)
 8005132:	f7ff fa99 	bl	8004668 <HAL_UART_Transmit_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8005136:	e7fe      	b.n	8005136 <main+0x3e>
 8005138:	08009e64 	.word	0x08009e64
 800513c:	20000658 	.word	0x20000658

08005140 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b090      	sub	sp, #64	; 0x40
 8005144:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005146:	f107 0318 	add.w	r3, r7, #24
 800514a:	2228      	movs	r2, #40	; 0x28
 800514c:	2100      	movs	r1, #0
 800514e:	4618      	mov	r0, r3
 8005150:	f003 fdba 	bl	8008cc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005154:	1d3b      	adds	r3, r7, #4
 8005156:	2200      	movs	r2, #0
 8005158:	601a      	str	r2, [r3, #0]
 800515a:	605a      	str	r2, [r3, #4]
 800515c:	609a      	str	r2, [r3, #8]
 800515e:	60da      	str	r2, [r3, #12]
 8005160:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005162:	2302      	movs	r3, #2
 8005164:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005166:	2301      	movs	r3, #1
 8005168:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800516a:	2310      	movs	r3, #16
 800516c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800516e:	2302      	movs	r3, #2
 8005170:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8005172:	2300      	movs	r3, #0
 8005174:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8005176:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800517a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800517c:	f107 0318 	add.w	r3, r7, #24
 8005180:	4618      	mov	r0, r3
 8005182:	f7fd fd11 	bl	8002ba8 <HAL_RCC_OscConfig>
 8005186:	4603      	mov	r3, r0
 8005188:	2b00      	cmp	r3, #0
 800518a:	d001      	beq.n	8005190 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800518c:	f000 fd9c 	bl	8005cc8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005190:	230f      	movs	r3, #15
 8005192:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005194:	2302      	movs	r3, #2
 8005196:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005198:	2300      	movs	r3, #0
 800519a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800519c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80051a2:	2300      	movs	r3, #0
 80051a4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80051a6:	1d3b      	adds	r3, r7, #4
 80051a8:	2102      	movs	r1, #2
 80051aa:	4618      	mov	r0, r3
 80051ac:	f7fd ff7c 	bl	80030a8 <HAL_RCC_ClockConfig>
 80051b0:	4603      	mov	r3, r0
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d001      	beq.n	80051ba <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80051b6:	f000 fd87 	bl	8005cc8 <Error_Handler>
  }
}
 80051ba:	bf00      	nop
 80051bc:	3740      	adds	r7, #64	; 0x40
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
	...

080051c4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80051c8:	4b12      	ldr	r3, [pc, #72]	; (8005214 <MX_I2C1_Init+0x50>)
 80051ca:	4a13      	ldr	r2, [pc, #76]	; (8005218 <MX_I2C1_Init+0x54>)
 80051cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80051ce:	4b11      	ldr	r3, [pc, #68]	; (8005214 <MX_I2C1_Init+0x50>)
 80051d0:	4a12      	ldr	r2, [pc, #72]	; (800521c <MX_I2C1_Init+0x58>)
 80051d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80051d4:	4b0f      	ldr	r3, [pc, #60]	; (8005214 <MX_I2C1_Init+0x50>)
 80051d6:	2200      	movs	r2, #0
 80051d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80051da:	4b0e      	ldr	r3, [pc, #56]	; (8005214 <MX_I2C1_Init+0x50>)
 80051dc:	2200      	movs	r2, #0
 80051de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80051e0:	4b0c      	ldr	r3, [pc, #48]	; (8005214 <MX_I2C1_Init+0x50>)
 80051e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80051e6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80051e8:	4b0a      	ldr	r3, [pc, #40]	; (8005214 <MX_I2C1_Init+0x50>)
 80051ea:	2200      	movs	r2, #0
 80051ec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80051ee:	4b09      	ldr	r3, [pc, #36]	; (8005214 <MX_I2C1_Init+0x50>)
 80051f0:	2200      	movs	r2, #0
 80051f2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80051f4:	4b07      	ldr	r3, [pc, #28]	; (8005214 <MX_I2C1_Init+0x50>)
 80051f6:	2200      	movs	r2, #0
 80051f8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80051fa:	4b06      	ldr	r3, [pc, #24]	; (8005214 <MX_I2C1_Init+0x50>)
 80051fc:	2200      	movs	r2, #0
 80051fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005200:	4804      	ldr	r0, [pc, #16]	; (8005214 <MX_I2C1_Init+0x50>)
 8005202:	f7fc fce3 	bl	8001bcc <HAL_I2C_Init>
 8005206:	4603      	mov	r3, r0
 8005208:	2b00      	cmp	r3, #0
 800520a:	d001      	beq.n	8005210 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800520c:	f000 fd5c 	bl	8005cc8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005210:	bf00      	nop
 8005212:	bd80      	pop	{r7, pc}
 8005214:	20000570 	.word	0x20000570
 8005218:	40005400 	.word	0x40005400
 800521c:	000186a0 	.word	0x000186a0

08005220 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b086      	sub	sp, #24
 8005224:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005226:	f107 0308 	add.w	r3, r7, #8
 800522a:	2200      	movs	r2, #0
 800522c:	601a      	str	r2, [r3, #0]
 800522e:	605a      	str	r2, [r3, #4]
 8005230:	609a      	str	r2, [r3, #8]
 8005232:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005234:	463b      	mov	r3, r7
 8005236:	2200      	movs	r2, #0
 8005238:	601a      	str	r2, [r3, #0]
 800523a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800523c:	4b1e      	ldr	r3, [pc, #120]	; (80052b8 <MX_TIM1_Init+0x98>)
 800523e:	4a1f      	ldr	r2, [pc, #124]	; (80052bc <MX_TIM1_Init+0x9c>)
 8005240:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63;
 8005242:	4b1d      	ldr	r3, [pc, #116]	; (80052b8 <MX_TIM1_Init+0x98>)
 8005244:	223f      	movs	r2, #63	; 0x3f
 8005246:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005248:	4b1b      	ldr	r3, [pc, #108]	; (80052b8 <MX_TIM1_Init+0x98>)
 800524a:	2200      	movs	r2, #0
 800524c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 800524e:	4b1a      	ldr	r3, [pc, #104]	; (80052b8 <MX_TIM1_Init+0x98>)
 8005250:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8005254:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005256:	4b18      	ldr	r3, [pc, #96]	; (80052b8 <MX_TIM1_Init+0x98>)
 8005258:	2200      	movs	r2, #0
 800525a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800525c:	4b16      	ldr	r3, [pc, #88]	; (80052b8 <MX_TIM1_Init+0x98>)
 800525e:	2200      	movs	r2, #0
 8005260:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005262:	4b15      	ldr	r3, [pc, #84]	; (80052b8 <MX_TIM1_Init+0x98>)
 8005264:	2200      	movs	r2, #0
 8005266:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8005268:	4813      	ldr	r0, [pc, #76]	; (80052b8 <MX_TIM1_Init+0x98>)
 800526a:	f7fe f8b9 	bl	80033e0 <HAL_TIM_Base_Init>
 800526e:	4603      	mov	r3, r0
 8005270:	2b00      	cmp	r3, #0
 8005272:	d001      	beq.n	8005278 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8005274:	f000 fd28 	bl	8005cc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005278:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800527c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800527e:	f107 0308 	add.w	r3, r7, #8
 8005282:	4619      	mov	r1, r3
 8005284:	480c      	ldr	r0, [pc, #48]	; (80052b8 <MX_TIM1_Init+0x98>)
 8005286:	f7fe fd5d 	bl	8003d44 <HAL_TIM_ConfigClockSource>
 800528a:	4603      	mov	r3, r0
 800528c:	2b00      	cmp	r3, #0
 800528e:	d001      	beq.n	8005294 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8005290:	f000 fd1a 	bl	8005cc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005294:	2300      	movs	r3, #0
 8005296:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005298:	2300      	movs	r3, #0
 800529a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800529c:	463b      	mov	r3, r7
 800529e:	4619      	mov	r1, r3
 80052a0:	4805      	ldr	r0, [pc, #20]	; (80052b8 <MX_TIM1_Init+0x98>)
 80052a2:	f7ff f8cf 	bl	8004444 <HAL_TIMEx_MasterConfigSynchronization>
 80052a6:	4603      	mov	r3, r0
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d001      	beq.n	80052b0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80052ac:	f000 fd0c 	bl	8005cc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80052b0:	bf00      	nop
 80052b2:	3718      	adds	r7, #24
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}
 80052b8:	200006d4 	.word	0x200006d4
 80052bc:	40012c00 	.word	0x40012c00

080052c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b08e      	sub	sp, #56	; 0x38
 80052c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80052c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80052ca:	2200      	movs	r2, #0
 80052cc:	601a      	str	r2, [r3, #0]
 80052ce:	605a      	str	r2, [r3, #4]
 80052d0:	609a      	str	r2, [r3, #8]
 80052d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80052d4:	f107 0320 	add.w	r3, r7, #32
 80052d8:	2200      	movs	r2, #0
 80052da:	601a      	str	r2, [r3, #0]
 80052dc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80052de:	1d3b      	adds	r3, r7, #4
 80052e0:	2200      	movs	r2, #0
 80052e2:	601a      	str	r2, [r3, #0]
 80052e4:	605a      	str	r2, [r3, #4]
 80052e6:	609a      	str	r2, [r3, #8]
 80052e8:	60da      	str	r2, [r3, #12]
 80052ea:	611a      	str	r2, [r3, #16]
 80052ec:	615a      	str	r2, [r3, #20]
 80052ee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80052f0:	4b32      	ldr	r3, [pc, #200]	; (80053bc <MX_TIM2_Init+0xfc>)
 80052f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80052f6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7;
 80052f8:	4b30      	ldr	r3, [pc, #192]	; (80053bc <MX_TIM2_Init+0xfc>)
 80052fa:	2207      	movs	r2, #7
 80052fc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80052fe:	4b2f      	ldr	r3, [pc, #188]	; (80053bc <MX_TIM2_Init+0xfc>)
 8005300:	2200      	movs	r2, #0
 8005302:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1999;
 8005304:	4b2d      	ldr	r3, [pc, #180]	; (80053bc <MX_TIM2_Init+0xfc>)
 8005306:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800530a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800530c:	4b2b      	ldr	r3, [pc, #172]	; (80053bc <MX_TIM2_Init+0xfc>)
 800530e:	2200      	movs	r2, #0
 8005310:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005312:	4b2a      	ldr	r3, [pc, #168]	; (80053bc <MX_TIM2_Init+0xfc>)
 8005314:	2200      	movs	r2, #0
 8005316:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005318:	4828      	ldr	r0, [pc, #160]	; (80053bc <MX_TIM2_Init+0xfc>)
 800531a:	f7fe f861 	bl	80033e0 <HAL_TIM_Base_Init>
 800531e:	4603      	mov	r3, r0
 8005320:	2b00      	cmp	r3, #0
 8005322:	d001      	beq.n	8005328 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8005324:	f000 fcd0 	bl	8005cc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005328:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800532c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800532e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005332:	4619      	mov	r1, r3
 8005334:	4821      	ldr	r0, [pc, #132]	; (80053bc <MX_TIM2_Init+0xfc>)
 8005336:	f7fe fd05 	bl	8003d44 <HAL_TIM_ConfigClockSource>
 800533a:	4603      	mov	r3, r0
 800533c:	2b00      	cmp	r3, #0
 800533e:	d001      	beq.n	8005344 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8005340:	f000 fcc2 	bl	8005cc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8005344:	481d      	ldr	r0, [pc, #116]	; (80053bc <MX_TIM2_Init+0xfc>)
 8005346:	f7fe f8ed 	bl	8003524 <HAL_TIM_PWM_Init>
 800534a:	4603      	mov	r3, r0
 800534c:	2b00      	cmp	r3, #0
 800534e:	d001      	beq.n	8005354 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8005350:	f000 fcba 	bl	8005cc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005354:	2300      	movs	r3, #0
 8005356:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005358:	2300      	movs	r3, #0
 800535a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800535c:	f107 0320 	add.w	r3, r7, #32
 8005360:	4619      	mov	r1, r3
 8005362:	4816      	ldr	r0, [pc, #88]	; (80053bc <MX_TIM2_Init+0xfc>)
 8005364:	f7ff f86e 	bl	8004444 <HAL_TIMEx_MasterConfigSynchronization>
 8005368:	4603      	mov	r3, r0
 800536a:	2b00      	cmp	r3, #0
 800536c:	d001      	beq.n	8005372 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800536e:	f000 fcab 	bl	8005cc8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005372:	2360      	movs	r3, #96	; 0x60
 8005374:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005376:	2300      	movs	r3, #0
 8005378:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800537a:	2300      	movs	r3, #0
 800537c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800537e:	2300      	movs	r3, #0
 8005380:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005382:	1d3b      	adds	r3, r7, #4
 8005384:	2200      	movs	r2, #0
 8005386:	4619      	mov	r1, r3
 8005388:	480c      	ldr	r0, [pc, #48]	; (80053bc <MX_TIM2_Init+0xfc>)
 800538a:	f7fe fc1d 	bl	8003bc8 <HAL_TIM_PWM_ConfigChannel>
 800538e:	4603      	mov	r3, r0
 8005390:	2b00      	cmp	r3, #0
 8005392:	d001      	beq.n	8005398 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8005394:	f000 fc98 	bl	8005cc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005398:	1d3b      	adds	r3, r7, #4
 800539a:	2204      	movs	r2, #4
 800539c:	4619      	mov	r1, r3
 800539e:	4807      	ldr	r0, [pc, #28]	; (80053bc <MX_TIM2_Init+0xfc>)
 80053a0:	f7fe fc12 	bl	8003bc8 <HAL_TIM_PWM_ConfigChannel>
 80053a4:	4603      	mov	r3, r0
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d001      	beq.n	80053ae <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 80053aa:	f000 fc8d 	bl	8005cc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80053ae:	4803      	ldr	r0, [pc, #12]	; (80053bc <MX_TIM2_Init+0xfc>)
 80053b0:	f003 fae0 	bl	8008974 <HAL_TIM_MspPostInit>

}
 80053b4:	bf00      	nop
 80053b6:	3738      	adds	r7, #56	; 0x38
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}
 80053bc:	20000728 	.word	0x20000728

080053c0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b08c      	sub	sp, #48	; 0x30
 80053c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80053c6:	f107 030c 	add.w	r3, r7, #12
 80053ca:	2224      	movs	r2, #36	; 0x24
 80053cc:	2100      	movs	r1, #0
 80053ce:	4618      	mov	r0, r3
 80053d0:	f003 fc7a 	bl	8008cc8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80053d4:	1d3b      	adds	r3, r7, #4
 80053d6:	2200      	movs	r2, #0
 80053d8:	601a      	str	r2, [r3, #0]
 80053da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80053dc:	4b20      	ldr	r3, [pc, #128]	; (8005460 <MX_TIM3_Init+0xa0>)
 80053de:	4a21      	ldr	r2, [pc, #132]	; (8005464 <MX_TIM3_Init+0xa4>)
 80053e0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80053e2:	4b1f      	ldr	r3, [pc, #124]	; (8005460 <MX_TIM3_Init+0xa0>)
 80053e4:	2200      	movs	r2, #0
 80053e6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80053e8:	4b1d      	ldr	r3, [pc, #116]	; (8005460 <MX_TIM3_Init+0xa0>)
 80053ea:	2200      	movs	r2, #0
 80053ec:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80053ee:	4b1c      	ldr	r3, [pc, #112]	; (8005460 <MX_TIM3_Init+0xa0>)
 80053f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80053f4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80053f6:	4b1a      	ldr	r3, [pc, #104]	; (8005460 <MX_TIM3_Init+0xa0>)
 80053f8:	2200      	movs	r2, #0
 80053fa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80053fc:	4b18      	ldr	r3, [pc, #96]	; (8005460 <MX_TIM3_Init+0xa0>)
 80053fe:	2280      	movs	r2, #128	; 0x80
 8005400:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8005402:	2303      	movs	r3, #3
 8005404:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005406:	2300      	movs	r3, #0
 8005408:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800540a:	2301      	movs	r3, #1
 800540c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800540e:	2300      	movs	r3, #0
 8005410:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8005412:	230a      	movs	r3, #10
 8005414:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005416:	2300      	movs	r3, #0
 8005418:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800541a:	2301      	movs	r3, #1
 800541c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800541e:	2300      	movs	r3, #0
 8005420:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8005422:	2300      	movs	r3, #0
 8005424:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8005426:	f107 030c 	add.w	r3, r7, #12
 800542a:	4619      	mov	r1, r3
 800542c:	480c      	ldr	r0, [pc, #48]	; (8005460 <MX_TIM3_Init+0xa0>)
 800542e:	f7fe f973 	bl	8003718 <HAL_TIM_Encoder_Init>
 8005432:	4603      	mov	r3, r0
 8005434:	2b00      	cmp	r3, #0
 8005436:	d001      	beq.n	800543c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8005438:	f000 fc46 	bl	8005cc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800543c:	2300      	movs	r3, #0
 800543e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005440:	2300      	movs	r3, #0
 8005442:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005444:	1d3b      	adds	r3, r7, #4
 8005446:	4619      	mov	r1, r3
 8005448:	4805      	ldr	r0, [pc, #20]	; (8005460 <MX_TIM3_Init+0xa0>)
 800544a:	f7fe fffb 	bl	8004444 <HAL_TIMEx_MasterConfigSynchronization>
 800544e:	4603      	mov	r3, r0
 8005450:	2b00      	cmp	r3, #0
 8005452:	d001      	beq.n	8005458 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8005454:	f000 fc38 	bl	8005cc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8005458:	bf00      	nop
 800545a:	3730      	adds	r7, #48	; 0x30
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}
 8005460:	200005cc 	.word	0x200005cc
 8005464:	40000400 	.word	0x40000400

08005468 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b08c      	sub	sp, #48	; 0x30
 800546c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800546e:	f107 030c 	add.w	r3, r7, #12
 8005472:	2224      	movs	r2, #36	; 0x24
 8005474:	2100      	movs	r1, #0
 8005476:	4618      	mov	r0, r3
 8005478:	f003 fc26 	bl	8008cc8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800547c:	1d3b      	adds	r3, r7, #4
 800547e:	2200      	movs	r2, #0
 8005480:	601a      	str	r2, [r3, #0]
 8005482:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8005484:	4b20      	ldr	r3, [pc, #128]	; (8005508 <MX_TIM4_Init+0xa0>)
 8005486:	4a21      	ldr	r2, [pc, #132]	; (800550c <MX_TIM4_Init+0xa4>)
 8005488:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800548a:	4b1f      	ldr	r3, [pc, #124]	; (8005508 <MX_TIM4_Init+0xa0>)
 800548c:	2200      	movs	r2, #0
 800548e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005490:	4b1d      	ldr	r3, [pc, #116]	; (8005508 <MX_TIM4_Init+0xa0>)
 8005492:	2200      	movs	r2, #0
 8005494:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8005496:	4b1c      	ldr	r3, [pc, #112]	; (8005508 <MX_TIM4_Init+0xa0>)
 8005498:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800549c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800549e:	4b1a      	ldr	r3, [pc, #104]	; (8005508 <MX_TIM4_Init+0xa0>)
 80054a0:	2200      	movs	r2, #0
 80054a2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80054a4:	4b18      	ldr	r3, [pc, #96]	; (8005508 <MX_TIM4_Init+0xa0>)
 80054a6:	2280      	movs	r2, #128	; 0x80
 80054a8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80054aa:	2303      	movs	r3, #3
 80054ac:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80054ae:	2300      	movs	r3, #0
 80054b0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80054b2:	2301      	movs	r3, #1
 80054b4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80054b6:	2300      	movs	r3, #0
 80054b8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80054ba:	230a      	movs	r3, #10
 80054bc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80054be:	2300      	movs	r3, #0
 80054c0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80054c2:	2301      	movs	r3, #1
 80054c4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80054c6:	2300      	movs	r3, #0
 80054c8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80054ca:	2300      	movs	r3, #0
 80054cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80054ce:	f107 030c 	add.w	r3, r7, #12
 80054d2:	4619      	mov	r1, r3
 80054d4:	480c      	ldr	r0, [pc, #48]	; (8005508 <MX_TIM4_Init+0xa0>)
 80054d6:	f7fe f91f 	bl	8003718 <HAL_TIM_Encoder_Init>
 80054da:	4603      	mov	r3, r0
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d001      	beq.n	80054e4 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80054e0:	f000 fbf2 	bl	8005cc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80054e4:	2300      	movs	r3, #0
 80054e6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80054e8:	2300      	movs	r3, #0
 80054ea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80054ec:	1d3b      	adds	r3, r7, #4
 80054ee:	4619      	mov	r1, r3
 80054f0:	4805      	ldr	r0, [pc, #20]	; (8005508 <MX_TIM4_Init+0xa0>)
 80054f2:	f7fe ffa7 	bl	8004444 <HAL_TIMEx_MasterConfigSynchronization>
 80054f6:	4603      	mov	r3, r0
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d001      	beq.n	8005500 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80054fc:	f000 fbe4 	bl	8005cc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8005500:	bf00      	nop
 8005502:	3730      	adds	r7, #48	; 0x30
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}
 8005508:	20000528 	.word	0x20000528
 800550c:	40000800 	.word	0x40000800

08005510 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005514:	4b11      	ldr	r3, [pc, #68]	; (800555c <MX_USART1_UART_Init+0x4c>)
 8005516:	4a12      	ldr	r2, [pc, #72]	; (8005560 <MX_USART1_UART_Init+0x50>)
 8005518:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800551a:	4b10      	ldr	r3, [pc, #64]	; (800555c <MX_USART1_UART_Init+0x4c>)
 800551c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8005520:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005522:	4b0e      	ldr	r3, [pc, #56]	; (800555c <MX_USART1_UART_Init+0x4c>)
 8005524:	2200      	movs	r2, #0
 8005526:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005528:	4b0c      	ldr	r3, [pc, #48]	; (800555c <MX_USART1_UART_Init+0x4c>)
 800552a:	2200      	movs	r2, #0
 800552c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800552e:	4b0b      	ldr	r3, [pc, #44]	; (800555c <MX_USART1_UART_Init+0x4c>)
 8005530:	2200      	movs	r2, #0
 8005532:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005534:	4b09      	ldr	r3, [pc, #36]	; (800555c <MX_USART1_UART_Init+0x4c>)
 8005536:	220c      	movs	r2, #12
 8005538:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800553a:	4b08      	ldr	r3, [pc, #32]	; (800555c <MX_USART1_UART_Init+0x4c>)
 800553c:	2200      	movs	r2, #0
 800553e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005540:	4b06      	ldr	r3, [pc, #24]	; (800555c <MX_USART1_UART_Init+0x4c>)
 8005542:	2200      	movs	r2, #0
 8005544:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005546:	4805      	ldr	r0, [pc, #20]	; (800555c <MX_USART1_UART_Init+0x4c>)
 8005548:	f7fe ffec 	bl	8004524 <HAL_UART_Init>
 800554c:	4603      	mov	r3, r0
 800554e:	2b00      	cmp	r3, #0
 8005550:	d001      	beq.n	8005556 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8005552:	f000 fbb9 	bl	8005cc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005556:	bf00      	nop
 8005558:	bd80      	pop	{r7, pc}
 800555a:	bf00      	nop
 800555c:	20000658 	.word	0x20000658
 8005560:	40013800 	.word	0x40013800

08005564 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b082      	sub	sp, #8
 8005568:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800556a:	4b0c      	ldr	r3, [pc, #48]	; (800559c <MX_DMA_Init+0x38>)
 800556c:	695b      	ldr	r3, [r3, #20]
 800556e:	4a0b      	ldr	r2, [pc, #44]	; (800559c <MX_DMA_Init+0x38>)
 8005570:	f043 0301 	orr.w	r3, r3, #1
 8005574:	6153      	str	r3, [r2, #20]
 8005576:	4b09      	ldr	r3, [pc, #36]	; (800559c <MX_DMA_Init+0x38>)
 8005578:	695b      	ldr	r3, [r3, #20]
 800557a:	f003 0301 	and.w	r3, r3, #1
 800557e:	607b      	str	r3, [r7, #4]
 8005580:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8005582:	2200      	movs	r2, #0
 8005584:	2100      	movs	r1, #0
 8005586:	200e      	movs	r0, #14
 8005588:	f7fb fef9 	bl	800137e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800558c:	200e      	movs	r0, #14
 800558e:	f7fb ff12 	bl	80013b6 <HAL_NVIC_EnableIRQ>

}
 8005592:	bf00      	nop
 8005594:	3708      	adds	r7, #8
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}
 800559a:	bf00      	nop
 800559c:	40021000 	.word	0x40021000

080055a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b08a      	sub	sp, #40	; 0x28
 80055a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055a6:	f107 0314 	add.w	r3, r7, #20
 80055aa:	2200      	movs	r2, #0
 80055ac:	601a      	str	r2, [r3, #0]
 80055ae:	605a      	str	r2, [r3, #4]
 80055b0:	609a      	str	r2, [r3, #8]
 80055b2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80055b4:	4b57      	ldr	r3, [pc, #348]	; (8005714 <MX_GPIO_Init+0x174>)
 80055b6:	699b      	ldr	r3, [r3, #24]
 80055b8:	4a56      	ldr	r2, [pc, #344]	; (8005714 <MX_GPIO_Init+0x174>)
 80055ba:	f043 0310 	orr.w	r3, r3, #16
 80055be:	6193      	str	r3, [r2, #24]
 80055c0:	4b54      	ldr	r3, [pc, #336]	; (8005714 <MX_GPIO_Init+0x174>)
 80055c2:	699b      	ldr	r3, [r3, #24]
 80055c4:	f003 0310 	and.w	r3, r3, #16
 80055c8:	613b      	str	r3, [r7, #16]
 80055ca:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80055cc:	4b51      	ldr	r3, [pc, #324]	; (8005714 <MX_GPIO_Init+0x174>)
 80055ce:	699b      	ldr	r3, [r3, #24]
 80055d0:	4a50      	ldr	r2, [pc, #320]	; (8005714 <MX_GPIO_Init+0x174>)
 80055d2:	f043 0320 	orr.w	r3, r3, #32
 80055d6:	6193      	str	r3, [r2, #24]
 80055d8:	4b4e      	ldr	r3, [pc, #312]	; (8005714 <MX_GPIO_Init+0x174>)
 80055da:	699b      	ldr	r3, [r3, #24]
 80055dc:	f003 0320 	and.w	r3, r3, #32
 80055e0:	60fb      	str	r3, [r7, #12]
 80055e2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80055e4:	4b4b      	ldr	r3, [pc, #300]	; (8005714 <MX_GPIO_Init+0x174>)
 80055e6:	699b      	ldr	r3, [r3, #24]
 80055e8:	4a4a      	ldr	r2, [pc, #296]	; (8005714 <MX_GPIO_Init+0x174>)
 80055ea:	f043 0304 	orr.w	r3, r3, #4
 80055ee:	6193      	str	r3, [r2, #24]
 80055f0:	4b48      	ldr	r3, [pc, #288]	; (8005714 <MX_GPIO_Init+0x174>)
 80055f2:	699b      	ldr	r3, [r3, #24]
 80055f4:	f003 0304 	and.w	r3, r3, #4
 80055f8:	60bb      	str	r3, [r7, #8]
 80055fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80055fc:	4b45      	ldr	r3, [pc, #276]	; (8005714 <MX_GPIO_Init+0x174>)
 80055fe:	699b      	ldr	r3, [r3, #24]
 8005600:	4a44      	ldr	r2, [pc, #272]	; (8005714 <MX_GPIO_Init+0x174>)
 8005602:	f043 0308 	orr.w	r3, r3, #8
 8005606:	6193      	str	r3, [r2, #24]
 8005608:	4b42      	ldr	r3, [pc, #264]	; (8005714 <MX_GPIO_Init+0x174>)
 800560a:	699b      	ldr	r3, [r3, #24]
 800560c:	f003 0308 	and.w	r3, r3, #8
 8005610:	607b      	str	r3, [r7, #4]
 8005612:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8005614:	2200      	movs	r2, #0
 8005616:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 800561a:	483f      	ldr	r0, [pc, #252]	; (8005718 <MX_GPIO_Init+0x178>)
 800561c:	f7fc faa4 	bl	8001b68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 8005620:	2200      	movs	r2, #0
 8005622:	2101      	movs	r1, #1
 8005624:	483d      	ldr	r0, [pc, #244]	; (800571c <MX_GPIO_Init+0x17c>)
 8005626:	f7fc fa9f 	bl	8001b68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_8, GPIO_PIN_RESET);
 800562a:	2200      	movs	r2, #0
 800562c:	f44f 7194 	mov.w	r1, #296	; 0x128
 8005630:	483b      	ldr	r0, [pc, #236]	; (8005720 <MX_GPIO_Init+0x180>)
 8005632:	f7fc fa99 	bl	8001b68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8005636:	2200      	movs	r2, #0
 8005638:	2108      	movs	r1, #8
 800563a:	483a      	ldr	r0, [pc, #232]	; (8005724 <MX_GPIO_Init+0x184>)
 800563c:	f7fc fa94 	bl	8001b68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8005640:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005644:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005646:	2301      	movs	r3, #1
 8005648:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800564a:	2300      	movs	r3, #0
 800564c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800564e:	2302      	movs	r3, #2
 8005650:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005652:	f107 0314 	add.w	r3, r7, #20
 8005656:	4619      	mov	r1, r3
 8005658:	482f      	ldr	r0, [pc, #188]	; (8005718 <MX_GPIO_Init+0x178>)
 800565a:	f7fc f92b 	bl	80018b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800565e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005662:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005664:	2301      	movs	r3, #1
 8005666:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005668:	2302      	movs	r3, #2
 800566a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800566c:	2302      	movs	r3, #2
 800566e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005670:	f107 0314 	add.w	r3, r7, #20
 8005674:	4619      	mov	r1, r3
 8005676:	4828      	ldr	r0, [pc, #160]	; (8005718 <MX_GPIO_Init+0x178>)
 8005678:	f7fc f91c 	bl	80018b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800567c:	2301      	movs	r3, #1
 800567e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005680:	2301      	movs	r3, #1
 8005682:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005684:	2302      	movs	r3, #2
 8005686:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005688:	2302      	movs	r3, #2
 800568a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800568c:	f107 0314 	add.w	r3, r7, #20
 8005690:	4619      	mov	r1, r3
 8005692:	4822      	ldr	r0, [pc, #136]	; (800571c <MX_GPIO_Init+0x17c>)
 8005694:	f7fc f90e 	bl	80018b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8005698:	2328      	movs	r3, #40	; 0x28
 800569a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800569c:	2301      	movs	r3, #1
 800569e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056a0:	2300      	movs	r3, #0
 80056a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056a4:	2302      	movs	r3, #2
 80056a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80056a8:	f107 0314 	add.w	r3, r7, #20
 80056ac:	4619      	mov	r1, r3
 80056ae:	481c      	ldr	r0, [pc, #112]	; (8005720 <MX_GPIO_Init+0x180>)
 80056b0:	f7fc f900 	bl	80018b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80056b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80056b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80056ba:	2301      	movs	r3, #1
 80056bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80056be:	2301      	movs	r3, #1
 80056c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056c2:	2302      	movs	r3, #2
 80056c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80056c6:	f107 0314 	add.w	r3, r7, #20
 80056ca:	4619      	mov	r1, r3
 80056cc:	4814      	ldr	r0, [pc, #80]	; (8005720 <MX_GPIO_Init+0x180>)
 80056ce:	f7fc f8f1 	bl	80018b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80056d2:	2308      	movs	r3, #8
 80056d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80056d6:	2301      	movs	r3, #1
 80056d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056da:	2300      	movs	r3, #0
 80056dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056de:	2302      	movs	r3, #2
 80056e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80056e2:	f107 0314 	add.w	r3, r7, #20
 80056e6:	4619      	mov	r1, r3
 80056e8:	480e      	ldr	r0, [pc, #56]	; (8005724 <MX_GPIO_Init+0x184>)
 80056ea:	f7fc f8e3 	bl	80018b4 <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_PD01_ENABLE();
 80056ee:	4b0e      	ldr	r3, [pc, #56]	; (8005728 <MX_GPIO_Init+0x188>)
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	627b      	str	r3, [r7, #36]	; 0x24
 80056f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80056fa:	627b      	str	r3, [r7, #36]	; 0x24
 80056fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005702:	627b      	str	r3, [r7, #36]	; 0x24
 8005704:	4a08      	ldr	r2, [pc, #32]	; (8005728 <MX_GPIO_Init+0x188>)
 8005706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005708:	6053      	str	r3, [r2, #4]

}
 800570a:	bf00      	nop
 800570c:	3728      	adds	r7, #40	; 0x28
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}
 8005712:	bf00      	nop
 8005714:	40021000 	.word	0x40021000
 8005718:	40011000 	.word	0x40011000
 800571c:	40011400 	.word	0x40011400
 8005720:	40010800 	.word	0x40010800
 8005724:	40010c00 	.word	0x40010c00
 8005728:	40010000 	.word	0x40010000

0800572c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { //Timer 1: f=500Hz -> T = 0.002s
 800572c:	b580      	push	{r7, lr}
 800572e:	b082      	sub	sp, #8
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
	if (htim->Instance == htim1.Instance) {
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	4b96      	ldr	r3, [pc, #600]	; (8005994 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	429a      	cmp	r2, r3
 800573e:	f040 8124 	bne.w	800598a <HAL_TIM_PeriodElapsedCallback+0x25e>
////		if (dx2>400) dx2 = dx2 - 65535;
////			else if (dx2<-400) dx2 = dx2 + 65535;
//		speed1[count] = SPEED_SCALE*dx1/0.002f;
//		speed2[count] = SPEED_SCALE*dx2/0.002f;

		count++;
 8005742:	4b95      	ldr	r3, [pc, #596]	; (8005998 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	3301      	adds	r3, #1
 8005748:	b2da      	uxtb	r2, r3
 800574a:	4b93      	ldr	r3, [pc, #588]	; (8005998 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 800574c:	701a      	strb	r2, [r3, #0]
		if (count>=MAX_COUNT) {
 800574e:	4b92      	ldr	r3, [pc, #584]	; (8005998 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8005750:	781b      	ldrb	r3, [r3, #0]
 8005752:	2b04      	cmp	r3, #4
 8005754:	f240 8119 	bls.w	800598a <HAL_TIM_PeriodElapsedCallback+0x25e>
			count = 0;
 8005758:	4b8f      	ldr	r3, [pc, #572]	; (8005998 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 800575a:	2200      	movs	r2, #0
 800575c:	701a      	strb	r2, [r3, #0]
			cnt_sp ++;
 800575e:	4b8f      	ldr	r3, [pc, #572]	; (800599c <HAL_TIM_PeriodElapsedCallback+0x270>)
 8005760:	881b      	ldrh	r3, [r3, #0]
 8005762:	3301      	adds	r3, #1
 8005764:	b29a      	uxth	r2, r3
 8005766:	4b8d      	ldr	r3, [pc, #564]	; (800599c <HAL_TIM_PeriodElapsedCallback+0x270>)
 8005768:	801a      	strh	r2, [r3, #0]
			if (cnt_sp>=50) {
 800576a:	4b8c      	ldr	r3, [pc, #560]	; (800599c <HAL_TIM_PeriodElapsedCallback+0x270>)
 800576c:	881b      	ldrh	r3, [r3, #0]
 800576e:	2b31      	cmp	r3, #49	; 0x31
 8005770:	d913      	bls.n	800579a <HAL_TIM_PeriodElapsedCallback+0x6e>

				sprintf(MSG, "%d\n\r", (int16_t)inp_pid_mtr);//(int16_t)((float)(roll-(int16_t)roll)*100)
 8005772:	4b8b      	ldr	r3, [pc, #556]	; (80059a0 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4618      	mov	r0, r3
 8005778:	f7fb fc82 	bl	8001080 <__aeabi_f2iz>
 800577c:	4603      	mov	r3, r0
 800577e:	b21b      	sxth	r3, r3
 8005780:	461a      	mov	r2, r3
 8005782:	4988      	ldr	r1, [pc, #544]	; (80059a4 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8005784:	4888      	ldr	r0, [pc, #544]	; (80059a8 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8005786:	f003 faa7 	bl	8008cd8 <siprintf>
				HAL_UART_Transmit_DMA(&huart1, &MSG, (uint16_t) sizeof(MSG));
 800578a:	2232      	movs	r2, #50	; 0x32
 800578c:	4986      	ldr	r1, [pc, #536]	; (80059a8 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800578e:	4887      	ldr	r0, [pc, #540]	; (80059ac <HAL_TIM_PeriodElapsedCallback+0x280>)
 8005790:	f7fe ff6a 	bl	8004668 <HAL_UART_Transmit_DMA>
				cnt_sp = 0;
 8005794:	4b81      	ldr	r3, [pc, #516]	; (800599c <HAL_TIM_PeriodElapsedCallback+0x270>)
 8005796:	2200      	movs	r2, #0
 8005798:	801a      	strh	r2, [r3, #0]
//			sprintf(MSG, "%d  -  %d\n\r", (int16_t)inp_pid_mtr, (int16_t)act_speed1);//(int16_t)((float)(roll-(int16_t)roll)*100)
//			HAL_UART_Transmit_DMA(&huart1, &MSG, (uint16_t) sizeof(MSG));
			}


				MPU6050_Read_All(&mpu_data);
 800579a:	4885      	ldr	r0, [pc, #532]	; (80059b0 <HAL_TIM_PeriodElapsedCallback+0x284>)
 800579c:	f000 faf0 	bl	8005d80 <MPU6050_Read_All>
				pre_roll = roll;
 80057a0:	4b84      	ldr	r3, [pc, #528]	; (80059b4 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a84      	ldr	r2, [pc, #528]	; (80059b8 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80057a6:	6013      	str	r3, [r2, #0]
				roll = mpu_data.KalmanAngleY+ROLL_OFFSET;
 80057a8:	4b81      	ldr	r3, [pc, #516]	; (80059b0 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80057aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ac:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80057b0:	4618      	mov	r0, r3
 80057b2:	f7fb f997 	bl	8000ae4 <__addsf3>
 80057b6:	4603      	mov	r3, r0
 80057b8:	461a      	mov	r2, r3
 80057ba:	4b7e      	ldr	r3, [pc, #504]	; (80059b4 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80057bc:	601a      	str	r2, [r3, #0]
				roll_dot = mpu_data.Gy;
 80057be:	4b7c      	ldr	r3, [pc, #496]	; (80059b0 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80057c0:	6a1b      	ldr	r3, [r3, #32]
 80057c2:	4a7e      	ldr	r2, [pc, #504]	; (80059bc <HAL_TIM_PeriodElapsedCallback+0x290>)
 80057c4:	6013      	str	r3, [r2, #0]
//				roll_dot = (roll-pre_roll)/0.010f;
				inp_fuzzy[0] = roll/K1;
 80057c6:	4b7b      	ldr	r3, [pc, #492]	; (80059b4 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80057c8:	681a      	ldr	r2, [r3, #0]
 80057ca:	4b7d      	ldr	r3, [pc, #500]	; (80059c0 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4619      	mov	r1, r3
 80057d0:	4610      	mov	r0, r2
 80057d2:	f7fb fb43 	bl	8000e5c <__aeabi_fdiv>
 80057d6:	4603      	mov	r3, r0
 80057d8:	461a      	mov	r2, r3
 80057da:	4b7a      	ldr	r3, [pc, #488]	; (80059c4 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80057dc:	601a      	str	r2, [r3, #0]
				inp_fuzzy[1] = roll_dot/K2;
 80057de:	4b77      	ldr	r3, [pc, #476]	; (80059bc <HAL_TIM_PeriodElapsedCallback+0x290>)
 80057e0:	681a      	ldr	r2, [r3, #0]
 80057e2:	4b79      	ldr	r3, [pc, #484]	; (80059c8 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4619      	mov	r1, r3
 80057e8:	4610      	mov	r0, r2
 80057ea:	f7fb fb37 	bl	8000e5c <__aeabi_fdiv>
 80057ee:	4603      	mov	r3, r0
 80057f0:	461a      	mov	r2, r3
 80057f2:	4b74      	ldr	r3, [pc, #464]	; (80059c4 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80057f4:	605a      	str	r2, [r3, #4]

				SBR1_run(inp_fuzzy, &out_fuzzy);
 80057f6:	4975      	ldr	r1, [pc, #468]	; (80059cc <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80057f8:	4872      	ldr	r0, [pc, #456]	; (80059c4 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80057fa:	f7ff fc4b 	bl	8005094 <SBR1_run>

				if (((roll<=-40) || (roll>=40)) && (enable==1)) {
 80057fe:	4b6d      	ldr	r3, [pc, #436]	; (80059b4 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4973      	ldr	r1, [pc, #460]	; (80059d0 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8005804:	4618      	mov	r0, r3
 8005806:	f7fb fc1d 	bl	8001044 <__aeabi_fcmple>
 800580a:	4603      	mov	r3, r0
 800580c:	2b00      	cmp	r3, #0
 800580e:	d108      	bne.n	8005822 <HAL_TIM_PeriodElapsedCallback+0xf6>
 8005810:	4b68      	ldr	r3, [pc, #416]	; (80059b4 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	496f      	ldr	r1, [pc, #444]	; (80059d4 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8005816:	4618      	mov	r0, r3
 8005818:	f7fb fc1e 	bl	8001058 <__aeabi_fcmpge>
 800581c:	4603      	mov	r3, r0
 800581e:	2b00      	cmp	r3, #0
 8005820:	d007      	beq.n	8005832 <HAL_TIM_PeriodElapsedCallback+0x106>
 8005822:	4b6d      	ldr	r3, [pc, #436]	; (80059d8 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8005824:	781b      	ldrb	r3, [r3, #0]
 8005826:	2b01      	cmp	r3, #1
 8005828:	d103      	bne.n	8005832 <HAL_TIM_PeriodElapsedCallback+0x106>
					enable = 0;
 800582a:	4b6b      	ldr	r3, [pc, #428]	; (80059d8 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 800582c:	2200      	movs	r2, #0
 800582e:	701a      	strb	r2, [r3, #0]
 8005830:	e018      	b.n	8005864 <HAL_TIM_PeriodElapsedCallback+0x138>
				} else if (((roll>=-40) && (roll<=40)) && (enable==0)) enable = 1;
 8005832:	4b60      	ldr	r3, [pc, #384]	; (80059b4 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4966      	ldr	r1, [pc, #408]	; (80059d0 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8005838:	4618      	mov	r0, r3
 800583a:	f7fb fc0d 	bl	8001058 <__aeabi_fcmpge>
 800583e:	4603      	mov	r3, r0
 8005840:	2b00      	cmp	r3, #0
 8005842:	d00f      	beq.n	8005864 <HAL_TIM_PeriodElapsedCallback+0x138>
 8005844:	4b5b      	ldr	r3, [pc, #364]	; (80059b4 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4962      	ldr	r1, [pc, #392]	; (80059d4 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800584a:	4618      	mov	r0, r3
 800584c:	f7fb fbfa 	bl	8001044 <__aeabi_fcmple>
 8005850:	4603      	mov	r3, r0
 8005852:	2b00      	cmp	r3, #0
 8005854:	d006      	beq.n	8005864 <HAL_TIM_PeriodElapsedCallback+0x138>
 8005856:	4b60      	ldr	r3, [pc, #384]	; (80059d8 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8005858:	781b      	ldrb	r3, [r3, #0]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d102      	bne.n	8005864 <HAL_TIM_PeriodElapsedCallback+0x138>
 800585e:	4b5e      	ldr	r3, [pc, #376]	; (80059d8 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8005860:	2201      	movs	r2, #1
 8005862:	701a      	strb	r2, [r3, #0]


			inp_pid_mtr = out_fuzzy*Ku;
 8005864:	4b59      	ldr	r3, [pc, #356]	; (80059cc <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	4b5c      	ldr	r3, [pc, #368]	; (80059dc <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4619      	mov	r1, r3
 800586e:	4610      	mov	r0, r2
 8005870:	f7fb fa40 	bl	8000cf4 <__aeabi_fmul>
 8005874:	4603      	mov	r3, r0
 8005876:	461a      	mov	r2, r3
 8005878:	4b49      	ldr	r3, [pc, #292]	; (80059a0 <HAL_TIM_PeriodElapsedCallback+0x274>)
 800587a:	601a      	str	r2, [r3, #0]
			if (inp_pid_mtr<=-1999) {
 800587c:	4b48      	ldr	r3, [pc, #288]	; (80059a0 <HAL_TIM_PeriodElapsedCallback+0x274>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4957      	ldr	r1, [pc, #348]	; (80059e0 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8005882:	4618      	mov	r0, r3
 8005884:	f7fb fbde 	bl	8001044 <__aeabi_fcmple>
 8005888:	4603      	mov	r3, r0
 800588a:	2b00      	cmp	r3, #0
 800588c:	d008      	beq.n	80058a0 <HAL_TIM_PeriodElapsedCallback+0x174>
				pidval_mtr1 = -1999;
 800588e:	4b55      	ldr	r3, [pc, #340]	; (80059e4 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8005890:	f64f 0231 	movw	r2, #63537	; 0xf831
 8005894:	801a      	strh	r2, [r3, #0]
				pidval_mtr2 = -1999;
 8005896:	4b54      	ldr	r3, [pc, #336]	; (80059e8 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8005898:	f64f 0231 	movw	r2, #63537	; 0xf831
 800589c:	801a      	strh	r2, [r3, #0]
 800589e:	e023      	b.n	80058e8 <HAL_TIM_PeriodElapsedCallback+0x1bc>
			} else if (inp_pid_mtr>=1999) {
 80058a0:	4b3f      	ldr	r3, [pc, #252]	; (80059a0 <HAL_TIM_PeriodElapsedCallback+0x274>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4951      	ldr	r1, [pc, #324]	; (80059ec <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80058a6:	4618      	mov	r0, r3
 80058a8:	f7fb fbd6 	bl	8001058 <__aeabi_fcmpge>
 80058ac:	4603      	mov	r3, r0
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d008      	beq.n	80058c4 <HAL_TIM_PeriodElapsedCallback+0x198>
				pidval_mtr1 = 1999;
 80058b2:	4b4c      	ldr	r3, [pc, #304]	; (80059e4 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80058b4:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80058b8:	801a      	strh	r2, [r3, #0]
				pidval_mtr2 = 1999;
 80058ba:	4b4b      	ldr	r3, [pc, #300]	; (80059e8 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80058bc:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80058c0:	801a      	strh	r2, [r3, #0]
 80058c2:	e011      	b.n	80058e8 <HAL_TIM_PeriodElapsedCallback+0x1bc>
			}
			else{
				pidval_mtr1 = inp_pid_mtr;
 80058c4:	4b36      	ldr	r3, [pc, #216]	; (80059a0 <HAL_TIM_PeriodElapsedCallback+0x274>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4618      	mov	r0, r3
 80058ca:	f7fb fbd9 	bl	8001080 <__aeabi_f2iz>
 80058ce:	4603      	mov	r3, r0
 80058d0:	b21a      	sxth	r2, r3
 80058d2:	4b44      	ldr	r3, [pc, #272]	; (80059e4 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80058d4:	801a      	strh	r2, [r3, #0]
				pidval_mtr2 = inp_pid_mtr;
 80058d6:	4b32      	ldr	r3, [pc, #200]	; (80059a0 <HAL_TIM_PeriodElapsedCallback+0x274>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4618      	mov	r0, r3
 80058dc:	f7fb fbd0 	bl	8001080 <__aeabi_f2iz>
 80058e0:	4603      	mov	r3, r0
 80058e2:	b21a      	sxth	r2, r3
 80058e4:	4b40      	ldr	r3, [pc, #256]	; (80059e8 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80058e6:	801a      	strh	r2, [r3, #0]
			}

			if (pidval_mtr1 >= 0) motor1_dir = CW;
 80058e8:	4b3e      	ldr	r3, [pc, #248]	; (80059e4 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80058ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	db03      	blt.n	80058fa <HAL_TIM_PeriodElapsedCallback+0x1ce>
 80058f2:	4b3f      	ldr	r3, [pc, #252]	; (80059f0 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80058f4:	2200      	movs	r2, #0
 80058f6:	701a      	strb	r2, [r3, #0]
 80058f8:	e00b      	b.n	8005912 <HAL_TIM_PeriodElapsedCallback+0x1e6>
				else {
					motor1_dir = CCW;
 80058fa:	4b3d      	ldr	r3, [pc, #244]	; (80059f0 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80058fc:	2201      	movs	r2, #1
 80058fe:	701a      	strb	r2, [r3, #0]
					pidval_mtr1 = -pidval_mtr1;
 8005900:	4b38      	ldr	r3, [pc, #224]	; (80059e4 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8005902:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005906:	b29b      	uxth	r3, r3
 8005908:	425b      	negs	r3, r3
 800590a:	b29b      	uxth	r3, r3
 800590c:	b21a      	sxth	r2, r3
 800590e:	4b35      	ldr	r3, [pc, #212]	; (80059e4 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8005910:	801a      	strh	r2, [r3, #0]
				}
			if (pidval_mtr2 >= 0) motor2_dir = CCW;
 8005912:	4b35      	ldr	r3, [pc, #212]	; (80059e8 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8005914:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005918:	2b00      	cmp	r3, #0
 800591a:	db03      	blt.n	8005924 <HAL_TIM_PeriodElapsedCallback+0x1f8>
 800591c:	4b35      	ldr	r3, [pc, #212]	; (80059f4 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800591e:	2201      	movs	r2, #1
 8005920:	701a      	strb	r2, [r3, #0]
 8005922:	e00b      	b.n	800593c <HAL_TIM_PeriodElapsedCallback+0x210>
				else {
					motor2_dir = CW;
 8005924:	4b33      	ldr	r3, [pc, #204]	; (80059f4 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8005926:	2200      	movs	r2, #0
 8005928:	701a      	strb	r2, [r3, #0]
					pidval_mtr2 = -pidval_mtr2;
 800592a:	4b2f      	ldr	r3, [pc, #188]	; (80059e8 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 800592c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005930:	b29b      	uxth	r3, r3
 8005932:	425b      	negs	r3, r3
 8005934:	b29b      	uxth	r3, r3
 8005936:	b21a      	sxth	r2, r3
 8005938:	4b2b      	ldr	r3, [pc, #172]	; (80059e8 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 800593a:	801a      	strh	r2, [r3, #0]
				}
			if (enable==1) {
 800593c:	4b26      	ldr	r3, [pc, #152]	; (80059d8 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 800593e:	781b      	ldrb	r3, [r3, #0]
 8005940:	2b01      	cmp	r3, #1
 8005942:	d114      	bne.n	800596e <HAL_TIM_PeriodElapsedCallback+0x242>
				run_motor(MOTOR1, motor1_dir, pidval_mtr1);
 8005944:	4b2a      	ldr	r3, [pc, #168]	; (80059f0 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8005946:	7819      	ldrb	r1, [r3, #0]
 8005948:	4b26      	ldr	r3, [pc, #152]	; (80059e4 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800594a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800594e:	b29b      	uxth	r3, r3
 8005950:	461a      	mov	r2, r3
 8005952:	2000      	movs	r0, #0
 8005954:	f000 f96a 	bl	8005c2c <run_motor>
				run_motor(MOTOR2, motor2_dir, pidval_mtr2);
 8005958:	4b26      	ldr	r3, [pc, #152]	; (80059f4 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800595a:	7819      	ldrb	r1, [r3, #0]
 800595c:	4b22      	ldr	r3, [pc, #136]	; (80059e8 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 800595e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005962:	b29b      	uxth	r3, r3
 8005964:	461a      	mov	r2, r3
 8005966:	2001      	movs	r0, #1
 8005968:	f000 f960 	bl	8005c2c <run_motor>
				run_motor(MOTOR1, motor1_dir, 0);
				run_motor(MOTOR2, motor2_dir, 0);
			}
		}
	}
}
 800596c:	e00d      	b.n	800598a <HAL_TIM_PeriodElapsedCallback+0x25e>
				run_motor(MOTOR1, motor1_dir, 0);
 800596e:	4b20      	ldr	r3, [pc, #128]	; (80059f0 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	2200      	movs	r2, #0
 8005974:	4619      	mov	r1, r3
 8005976:	2000      	movs	r0, #0
 8005978:	f000 f958 	bl	8005c2c <run_motor>
				run_motor(MOTOR2, motor2_dir, 0);
 800597c:	4b1d      	ldr	r3, [pc, #116]	; (80059f4 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	2200      	movs	r2, #0
 8005982:	4619      	mov	r1, r3
 8005984:	2001      	movs	r0, #1
 8005986:	f000 f951 	bl	8005c2c <run_motor>
}
 800598a:	bf00      	nop
 800598c:	3708      	adds	r7, #8
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}
 8005992:	bf00      	nop
 8005994:	200006d4 	.word	0x200006d4
 8005998:	200004cc 	.word	0x200004cc
 800599c:	20000504 	.word	0x20000504
 80059a0:	200005c8 	.word	0x200005c8
 80059a4:	08009e6c 	.word	0x08009e6c
 80059a8:	200004d0 	.word	0x200004d0
 80059ac:	20000658 	.word	0x20000658
 80059b0:	20000698 	.word	0x20000698
 80059b4:	20000770 	.word	0x20000770
 80059b8:	20000778 	.word	0x20000778
 80059bc:	20000720 	.word	0x20000720
 80059c0:	20000008 	.word	0x20000008
 80059c4:	200006cc 	.word	0x200006cc
 80059c8:	2000000c 	.word	0x2000000c
 80059cc:	2000071c 	.word	0x2000071c
 80059d0:	c2200000 	.word	0xc2200000
 80059d4:	42200000 	.word	0x42200000
 80059d8:	20000502 	.word	0x20000502
 80059dc:	20000010 	.word	0x20000010
 80059e0:	c4f9e000 	.word	0xc4f9e000
 80059e4:	20000774 	.word	0x20000774
 80059e8:	20000524 	.word	0x20000524
 80059ec:	44f9e000 	.word	0x44f9e000
 80059f0:	20000522 	.word	0x20000522
 80059f4:	20000724 	.word	0x20000724

080059f8 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80059f8:	b5b0      	push	{r4, r5, r7, lr}
 80059fa:	b08c      	sub	sp, #48	; 0x30
 80059fc:	af02      	add	r7, sp, #8
 80059fe:	6078      	str	r0, [r7, #4]
	if (huart->Instance == huart1.Instance) {
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	4b55      	ldr	r3, [pc, #340]	; (8005b5c <HAL_UART_RxCpltCallback+0x164>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	f040 80a3 	bne.w	8005b54 <HAL_UART_RxCpltCallback+0x15c>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 8005a0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005a12:	4853      	ldr	r0, [pc, #332]	; (8005b60 <HAL_UART_RxCpltCallback+0x168>)
 8005a14:	f7fc f8c0 	bl	8001b98 <HAL_GPIO_TogglePin>
	   char *arg_list[6];
	   uint8_t arg_num = 0;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	   char *temp_token = strtok((char*)RX_buff, " ");
 8005a1e:	4951      	ldr	r1, [pc, #324]	; (8005b64 <HAL_UART_RxCpltCallback+0x16c>)
 8005a20:	4851      	ldr	r0, [pc, #324]	; (8005b68 <HAL_UART_RxCpltCallback+0x170>)
 8005a22:	f003 f993 	bl	8008d4c <strtok>
 8005a26:	6238      	str	r0, [r7, #32]
	   while (temp_token != NULL) {
 8005a28:	e012      	b.n	8005a50 <HAL_UART_RxCpltCallback+0x58>
		   arg_list[arg_num] = temp_token;
 8005a2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a2e:	009b      	lsls	r3, r3, #2
 8005a30:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005a34:	4413      	add	r3, r2
 8005a36:	6a3a      	ldr	r2, [r7, #32]
 8005a38:	f843 2c20 	str.w	r2, [r3, #-32]
		   arg_num ++;
 8005a3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a40:	3301      	adds	r3, #1
 8005a42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		   temp_token = strtok(NULL, " ");
 8005a46:	4947      	ldr	r1, [pc, #284]	; (8005b64 <HAL_UART_RxCpltCallback+0x16c>)
 8005a48:	2000      	movs	r0, #0
 8005a4a:	f003 f97f 	bl	8008d4c <strtok>
 8005a4e:	6238      	str	r0, [r7, #32]
	   while (temp_token != NULL) {
 8005a50:	6a3b      	ldr	r3, [r7, #32]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d1e9      	bne.n	8005a2a <HAL_UART_RxCpltCallback+0x32>
	   }
	   if (strstr(arg_list[0], "K1") != NULL) {
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	4944      	ldr	r1, [pc, #272]	; (8005b6c <HAL_UART_RxCpltCallback+0x174>)
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f003 f95c 	bl	8008d18 <strstr>
 8005a60:	4603      	mov	r3, r0
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d00b      	beq.n	8005a7e <HAL_UART_RxCpltCallback+0x86>
		   K1 = (float)atoi(arg_list[1]);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f003 f8fe 	bl	8008c6a <atoi>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	4618      	mov	r0, r3
 8005a72:	f7fb f8eb 	bl	8000c4c <__aeabi_i2f>
 8005a76:	4602      	mov	r2, r0
 8005a78:	4b3d      	ldr	r3, [pc, #244]	; (8005b70 <HAL_UART_RxCpltCallback+0x178>)
 8005a7a:	601a      	str	r2, [r3, #0]
 8005a7c:	e017      	b.n	8005aae <HAL_UART_RxCpltCallback+0xb6>
	   } else if (strstr(arg_list[0], "START/STOPPPPPPPPPPP")!= NULL) {
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	493c      	ldr	r1, [pc, #240]	; (8005b74 <HAL_UART_RxCpltCallback+0x17c>)
 8005a82:	4618      	mov	r0, r3
 8005a84:	f003 f948 	bl	8008d18 <strstr>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d00f      	beq.n	8005aae <HAL_UART_RxCpltCallback+0xb6>
		   if (enable==0) enable = 1;
 8005a8e:	4b3a      	ldr	r3, [pc, #232]	; (8005b78 <HAL_UART_RxCpltCallback+0x180>)
 8005a90:	781b      	ldrb	r3, [r3, #0]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d103      	bne.n	8005a9e <HAL_UART_RxCpltCallback+0xa6>
 8005a96:	4b38      	ldr	r3, [pc, #224]	; (8005b78 <HAL_UART_RxCpltCallback+0x180>)
 8005a98:	2201      	movs	r2, #1
 8005a9a:	701a      	strb	r2, [r3, #0]
 8005a9c:	e002      	b.n	8005aa4 <HAL_UART_RxCpltCallback+0xac>
		   else enable = 0;
 8005a9e:	4b36      	ldr	r3, [pc, #216]	; (8005b78 <HAL_UART_RxCpltCallback+0x180>)
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	701a      	strb	r2, [r3, #0]
		   HAL_UART_Transmit_DMA(&huart1, "ENB-OK", 6);
 8005aa4:	2206      	movs	r2, #6
 8005aa6:	4935      	ldr	r1, [pc, #212]	; (8005b7c <HAL_UART_RxCpltCallback+0x184>)
 8005aa8:	482c      	ldr	r0, [pc, #176]	; (8005b5c <HAL_UART_RxCpltCallback+0x164>)
 8005aaa:	f7fe fddd 	bl	8004668 <HAL_UART_Transmit_DMA>
	   }
	   if (strstr(arg_list[2], "K2") != NULL) {
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	4933      	ldr	r1, [pc, #204]	; (8005b80 <HAL_UART_RxCpltCallback+0x188>)
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f003 f930 	bl	8008d18 <strstr>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d00a      	beq.n	8005ad4 <HAL_UART_RxCpltCallback+0xdc>
	   	   K2 = (float)atoi(arg_list[3]);
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f003 f8d2 	bl	8008c6a <atoi>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	4618      	mov	r0, r3
 8005aca:	f7fb f8bf 	bl	8000c4c <__aeabi_i2f>
 8005ace:	4602      	mov	r2, r0
 8005ad0:	4b2c      	ldr	r3, [pc, #176]	; (8005b84 <HAL_UART_RxCpltCallback+0x18c>)
 8005ad2:	601a      	str	r2, [r3, #0]
	   }
	   if (strstr(arg_list[4], "KU") != NULL) {
 8005ad4:	69bb      	ldr	r3, [r7, #24]
 8005ad6:	492c      	ldr	r1, [pc, #176]	; (8005b88 <HAL_UART_RxCpltCallback+0x190>)
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f003 f91d 	bl	8008d18 <strstr>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d00a      	beq.n	8005afa <HAL_UART_RxCpltCallback+0x102>
	   	   Ku = (float)atoi(arg_list[5]);
 8005ae4:	69fb      	ldr	r3, [r7, #28]
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f003 f8bf 	bl	8008c6a <atoi>
 8005aec:	4603      	mov	r3, r0
 8005aee:	4618      	mov	r0, r3
 8005af0:	f7fb f8ac 	bl	8000c4c <__aeabi_i2f>
 8005af4:	4602      	mov	r2, r0
 8005af6:	4b25      	ldr	r3, [pc, #148]	; (8005b8c <HAL_UART_RxCpltCallback+0x194>)
 8005af8:	601a      	str	r2, [r3, #0]
	   }
//		pid_init(&pid_mtr1, KP, KI, KD, -500, 500, -500, 500, -1999, 1999);
//		pid_init(&pid_mtr2, KP, KI, KD, -500, 500, -500, 500, -1999, 1999);
//	   pid_init(&pid_balance, KP, KI, KD, -500, 500, -500, 500, -750, 750);
	   sprintf(MSG, "K1 %d, K2 %d, KU %d\r\n", (int16_t)K1, (int16_t)K2, (int16_t)Ku);
 8005afa:	4b1d      	ldr	r3, [pc, #116]	; (8005b70 <HAL_UART_RxCpltCallback+0x178>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4618      	mov	r0, r3
 8005b00:	f7fb fabe 	bl	8001080 <__aeabi_f2iz>
 8005b04:	4603      	mov	r3, r0
 8005b06:	b21b      	sxth	r3, r3
 8005b08:	461c      	mov	r4, r3
 8005b0a:	4b1e      	ldr	r3, [pc, #120]	; (8005b84 <HAL_UART_RxCpltCallback+0x18c>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f7fb fab6 	bl	8001080 <__aeabi_f2iz>
 8005b14:	4603      	mov	r3, r0
 8005b16:	b21b      	sxth	r3, r3
 8005b18:	461d      	mov	r5, r3
 8005b1a:	4b1c      	ldr	r3, [pc, #112]	; (8005b8c <HAL_UART_RxCpltCallback+0x194>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f7fb faae 	bl	8001080 <__aeabi_f2iz>
 8005b24:	4603      	mov	r3, r0
 8005b26:	b21b      	sxth	r3, r3
 8005b28:	9300      	str	r3, [sp, #0]
 8005b2a:	462b      	mov	r3, r5
 8005b2c:	4622      	mov	r2, r4
 8005b2e:	4918      	ldr	r1, [pc, #96]	; (8005b90 <HAL_UART_RxCpltCallback+0x198>)
 8005b30:	4818      	ldr	r0, [pc, #96]	; (8005b94 <HAL_UART_RxCpltCallback+0x19c>)
 8005b32:	f003 f8d1 	bl	8008cd8 <siprintf>
	   HAL_UART_Transmit_DMA(&huart1,  MSG, strlen(MSG));
 8005b36:	4817      	ldr	r0, [pc, #92]	; (8005b94 <HAL_UART_RxCpltCallback+0x19c>)
 8005b38:	f7fa fb0a 	bl	8000150 <strlen>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	461a      	mov	r2, r3
 8005b42:	4914      	ldr	r1, [pc, #80]	; (8005b94 <HAL_UART_RxCpltCallback+0x19c>)
 8005b44:	4805      	ldr	r0, [pc, #20]	; (8005b5c <HAL_UART_RxCpltCallback+0x164>)
 8005b46:	f7fe fd8f 	bl	8004668 <HAL_UART_Transmit_DMA>
	   HAL_UART_Receive_IT(&huart1, (uint8_t*) &RX_buff, UART_RX_BUFF_SIZE);
 8005b4a:	2214      	movs	r2, #20
 8005b4c:	4906      	ldr	r1, [pc, #24]	; (8005b68 <HAL_UART_RxCpltCallback+0x170>)
 8005b4e:	4803      	ldr	r0, [pc, #12]	; (8005b5c <HAL_UART_RxCpltCallback+0x164>)
 8005b50:	f7fe fd35 	bl	80045be <HAL_UART_Receive_IT>
	}
}
 8005b54:	bf00      	nop
 8005b56:	3728      	adds	r7, #40	; 0x28
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bdb0      	pop	{r4, r5, r7, pc}
 8005b5c:	20000658 	.word	0x20000658
 8005b60:	40010800 	.word	0x40010800
 8005b64:	08009e74 	.word	0x08009e74
 8005b68:	200004b8 	.word	0x200004b8
 8005b6c:	08009e78 	.word	0x08009e78
 8005b70:	20000008 	.word	0x20000008
 8005b74:	08009e7c 	.word	0x08009e7c
 8005b78:	20000502 	.word	0x20000502
 8005b7c:	08009e94 	.word	0x08009e94
 8005b80:	08009e9c 	.word	0x08009e9c
 8005b84:	2000000c 	.word	0x2000000c
 8005b88:	08009ea0 	.word	0x08009ea0
 8005b8c:	20000010 	.word	0x20000010
 8005b90:	08009ea4 	.word	0x08009ea4
 8005b94:	200004d0 	.word	0x200004d0

08005b98 <app_init>:
//{
//	if (huart->Instance == huart1.Instance) {
//		 HAL_UART_Transmit_DMA(&huart1, NULL, 0);
//	}
//}
void app_init(void) {
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8005b9c:	2100      	movs	r1, #0
 8005b9e:	481b      	ldr	r0, [pc, #108]	; (8005c0c <app_init+0x74>)
 8005ba0:	f7fd fd18 	bl	80035d4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8005ba4:	2104      	movs	r1, #4
 8005ba6:	4819      	ldr	r0, [pc, #100]	; (8005c0c <app_init+0x74>)
 8005ba8:	f7fd fd14 	bl	80035d4 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&MTR1_PWM_TIMER, MTR1_PWM_CHANNEL, 0);
 8005bac:	4b17      	ldr	r3, [pc, #92]	; (8005c0c <app_init+0x74>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&MTR2_PWM_TIMER, MTR2_PWM_CHANNEL, 0);
 8005bb4:	4b15      	ldr	r3, [pc, #84]	; (8005c0c <app_init+0x74>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	639a      	str	r2, [r3, #56]	; 0x38

	HAL_UART_Receive_IT(&huart1, (uint8_t*) &RX_buff, UART_RX_BUFF_SIZE);
 8005bbc:	2214      	movs	r2, #20
 8005bbe:	4914      	ldr	r1, [pc, #80]	; (8005c10 <app_init+0x78>)
 8005bc0:	4814      	ldr	r0, [pc, #80]	; (8005c14 <app_init+0x7c>)
 8005bc2:	f7fe fcfc 	bl	80045be <HAL_UART_Receive_IT>
	HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 8005bc6:	213c      	movs	r1, #60	; 0x3c
 8005bc8:	4813      	ldr	r0, [pc, #76]	; (8005c18 <app_init+0x80>)
 8005bca:	f7fd fe47 	bl	800385c <HAL_TIM_Encoder_Start_IT>
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8005bce:	4b12      	ldr	r3, [pc, #72]	; (8005c18 <app_init+0x80>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 8005bd6:	213c      	movs	r1, #60	; 0x3c
 8005bd8:	4810      	ldr	r0, [pc, #64]	; (8005c1c <app_init+0x84>)
 8005bda:	f7fd fe3f 	bl	800385c <HAL_TIM_Encoder_Start_IT>
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 8005bde:	4b0f      	ldr	r3, [pc, #60]	; (8005c1c <app_init+0x84>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	2200      	movs	r2, #0
 8005be4:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 0);
 8005be6:	2200      	movs	r2, #0
 8005be8:	2101      	movs	r1, #1
 8005bea:	480d      	ldr	r0, [pc, #52]	; (8005c20 <app_init+0x88>)
 8005bec:	f7fb ffbc 	bl	8001b68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 0);
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005bf6:	480b      	ldr	r0, [pc, #44]	; (8005c24 <app_init+0x8c>)
 8005bf8:	f7fb ffb6 	bl	8001b68 <HAL_GPIO_WritePin>

	MPU6050_Init();
 8005bfc:	f000 f86a 	bl	8005cd4 <MPU6050_Init>
//	pid_init(&pid_mtr1, KP2_MTR, KI2_MTR, KD2_MTR, -1000, 1000, -1000, 1000, -1999, 1999);
//	pid_init(&pid_mtr2, KP2_MTR, KI2_MTR, KD2_MTR, -1000, 1000, -1000, 1000, -1999, 1999);
//	pid_init(&pid_balance, KP_BLC, KI_BLC, KD_BLC, -500, 500, -500, 500, -750, 750);

	HAL_TIM_Base_Start_IT(&htim1);
 8005c00:	4809      	ldr	r0, [pc, #36]	; (8005c28 <app_init+0x90>)
 8005c02:	f7fd fc3d 	bl	8003480 <HAL_TIM_Base_Start_IT>
}
 8005c06:	bf00      	nop
 8005c08:	bd80      	pop	{r7, pc}
 8005c0a:	bf00      	nop
 8005c0c:	20000728 	.word	0x20000728
 8005c10:	200004b8 	.word	0x200004b8
 8005c14:	20000658 	.word	0x20000658
 8005c18:	200005cc 	.word	0x200005cc
 8005c1c:	20000528 	.word	0x20000528
 8005c20:	40011400 	.word	0x40011400
 8005c24:	40011000 	.word	0x40011000
 8005c28:	200006d4 	.word	0x200006d4

08005c2c <run_motor>:
void run_motor(motor_id_e mtr_name, motor_dir_e mtr_dir, uint16_t duty) {
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b082      	sub	sp, #8
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	4603      	mov	r3, r0
 8005c34:	71fb      	strb	r3, [r7, #7]
 8005c36:	460b      	mov	r3, r1
 8005c38:	71bb      	strb	r3, [r7, #6]
 8005c3a:	4613      	mov	r3, r2
 8005c3c:	80bb      	strh	r3, [r7, #4]
	if (mtr_name == MOTOR1) {
 8005c3e:	79fb      	ldrb	r3, [r7, #7]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d11b      	bne.n	8005c7c <run_motor+0x50>
		if (mtr_dir == CCW) {
 8005c44:	79bb      	ldrb	r3, [r7, #6]
 8005c46:	2b01      	cmp	r3, #1
 8005c48:	d10a      	bne.n	8005c60 <run_motor+0x34>
			HAL_GPIO_WritePin(MTR1_DIR_GPIO_PORT, MTR1_DIR_GPIO_PIN, 0);
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005c50:	481a      	ldr	r0, [pc, #104]	; (8005cbc <run_motor+0x90>)
 8005c52:	f7fb ff89 	bl	8001b68 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&MTR1_PWM_TIMER, MTR1_PWM_CHANNEL, duty);
 8005c56:	4b1a      	ldr	r3, [pc, #104]	; (8005cc0 <run_motor+0x94>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	88ba      	ldrh	r2, [r7, #4]
 8005c5c:	635a      	str	r2, [r3, #52]	; 0x34
		else {
			HAL_GPIO_WritePin(MTR2_DIR_GPIO_PORT, MTR2_DIR_GPIO_PIN, 1);
			__HAL_TIM_SET_COMPARE(&MTR2_PWM_TIMER, MTR2_PWM_CHANNEL, PWM_CNT_PERIOD - duty);
		}
	}
}
 8005c5e:	e029      	b.n	8005cb4 <run_motor+0x88>
			HAL_GPIO_WritePin(MTR1_DIR_GPIO_PORT, MTR1_DIR_GPIO_PIN, 1);
 8005c60:	2201      	movs	r2, #1
 8005c62:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005c66:	4815      	ldr	r0, [pc, #84]	; (8005cbc <run_motor+0x90>)
 8005c68:	f7fb ff7e 	bl	8001b68 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&MTR1_PWM_TIMER, MTR1_PWM_CHANNEL, PWM_CNT_PERIOD - duty);
 8005c6c:	88bb      	ldrh	r3, [r7, #4]
 8005c6e:	f5c3 63f9 	rsb	r3, r3, #1992	; 0x7c8
 8005c72:	3307      	adds	r3, #7
 8005c74:	4a12      	ldr	r2, [pc, #72]	; (8005cc0 <run_motor+0x94>)
 8005c76:	6812      	ldr	r2, [r2, #0]
 8005c78:	6353      	str	r3, [r2, #52]	; 0x34
}
 8005c7a:	e01b      	b.n	8005cb4 <run_motor+0x88>
	else if (mtr_name == MOTOR2) {
 8005c7c:	79fb      	ldrb	r3, [r7, #7]
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d118      	bne.n	8005cb4 <run_motor+0x88>
		if (mtr_dir == CW) {
 8005c82:	79bb      	ldrb	r3, [r7, #6]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d109      	bne.n	8005c9c <run_motor+0x70>
			HAL_GPIO_WritePin(MTR2_DIR_GPIO_PORT, MTR2_DIR_GPIO_PIN, 0);
 8005c88:	2200      	movs	r2, #0
 8005c8a:	2101      	movs	r1, #1
 8005c8c:	480d      	ldr	r0, [pc, #52]	; (8005cc4 <run_motor+0x98>)
 8005c8e:	f7fb ff6b 	bl	8001b68 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&MTR2_PWM_TIMER, MTR2_PWM_CHANNEL, duty);
 8005c92:	4b0b      	ldr	r3, [pc, #44]	; (8005cc0 <run_motor+0x94>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	88ba      	ldrh	r2, [r7, #4]
 8005c98:	639a      	str	r2, [r3, #56]	; 0x38
}
 8005c9a:	e00b      	b.n	8005cb4 <run_motor+0x88>
			HAL_GPIO_WritePin(MTR2_DIR_GPIO_PORT, MTR2_DIR_GPIO_PIN, 1);
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	2101      	movs	r1, #1
 8005ca0:	4808      	ldr	r0, [pc, #32]	; (8005cc4 <run_motor+0x98>)
 8005ca2:	f7fb ff61 	bl	8001b68 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&MTR2_PWM_TIMER, MTR2_PWM_CHANNEL, PWM_CNT_PERIOD - duty);
 8005ca6:	88bb      	ldrh	r3, [r7, #4]
 8005ca8:	f5c3 63f9 	rsb	r3, r3, #1992	; 0x7c8
 8005cac:	3307      	adds	r3, #7
 8005cae:	4a04      	ldr	r2, [pc, #16]	; (8005cc0 <run_motor+0x94>)
 8005cb0:	6812      	ldr	r2, [r2, #0]
 8005cb2:	6393      	str	r3, [r2, #56]	; 0x38
}
 8005cb4:	bf00      	nop
 8005cb6:	3708      	adds	r7, #8
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}
 8005cbc:	40011000 	.word	0x40011000
 8005cc0:	20000728 	.word	0x20000728
 8005cc4:	40011400 	.word	0x40011400

08005cc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005ccc:	bf00      	nop
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bc80      	pop	{r7}
 8005cd2:	4770      	bx	lr

08005cd4 <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(void)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b086      	sub	sp, #24
 8005cd8:	af04      	add	r7, sp, #16
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8005cda:	2364      	movs	r3, #100	; 0x64
 8005cdc:	9302      	str	r3, [sp, #8]
 8005cde:	2301      	movs	r3, #1
 8005ce0:	9301      	str	r3, [sp, #4]
 8005ce2:	1dfb      	adds	r3, r7, #7
 8005ce4:	9300      	str	r3, [sp, #0]
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	2275      	movs	r2, #117	; 0x75
 8005cea:	21d0      	movs	r1, #208	; 0xd0
 8005cec:	4822      	ldr	r0, [pc, #136]	; (8005d78 <MPU6050_Init+0xa4>)
 8005cee:	f7fc f99f 	bl	8002030 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8005cf2:	79fb      	ldrb	r3, [r7, #7]
 8005cf4:	2b68      	cmp	r3, #104	; 0x68
 8005cf6:	d139      	bne.n	8005d6c <MPU6050_Init+0x98>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8005cfc:	2364      	movs	r3, #100	; 0x64
 8005cfe:	9302      	str	r3, [sp, #8]
 8005d00:	2301      	movs	r3, #1
 8005d02:	9301      	str	r3, [sp, #4]
 8005d04:	1dbb      	adds	r3, r7, #6
 8005d06:	9300      	str	r3, [sp, #0]
 8005d08:	2301      	movs	r3, #1
 8005d0a:	226b      	movs	r2, #107	; 0x6b
 8005d0c:	21d0      	movs	r1, #208	; 0xd0
 8005d0e:	481a      	ldr	r0, [pc, #104]	; (8005d78 <MPU6050_Init+0xa4>)
 8005d10:	f7fc f894 	bl	8001e3c <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8005d14:	2307      	movs	r3, #7
 8005d16:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8005d18:	2364      	movs	r3, #100	; 0x64
 8005d1a:	9302      	str	r3, [sp, #8]
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	9301      	str	r3, [sp, #4]
 8005d20:	1dbb      	adds	r3, r7, #6
 8005d22:	9300      	str	r3, [sp, #0]
 8005d24:	2301      	movs	r3, #1
 8005d26:	2219      	movs	r2, #25
 8005d28:	21d0      	movs	r1, #208	; 0xd0
 8005d2a:	4813      	ldr	r0, [pc, #76]	; (8005d78 <MPU6050_Init+0xa4>)
 8005d2c:	f7fc f886 	bl	8001e3c <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8005d30:	2300      	movs	r3, #0
 8005d32:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8005d34:	2364      	movs	r3, #100	; 0x64
 8005d36:	9302      	str	r3, [sp, #8]
 8005d38:	2301      	movs	r3, #1
 8005d3a:	9301      	str	r3, [sp, #4]
 8005d3c:	1dbb      	adds	r3, r7, #6
 8005d3e:	9300      	str	r3, [sp, #0]
 8005d40:	2301      	movs	r3, #1
 8005d42:	221c      	movs	r2, #28
 8005d44:	21d0      	movs	r1, #208	; 0xd0
 8005d46:	480c      	ldr	r0, [pc, #48]	; (8005d78 <MPU6050_Init+0xa4>)
 8005d48:	f7fc f878 	bl	8001e3c <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8005d50:	2364      	movs	r3, #100	; 0x64
 8005d52:	9302      	str	r3, [sp, #8]
 8005d54:	2301      	movs	r3, #1
 8005d56:	9301      	str	r3, [sp, #4]
 8005d58:	1dbb      	adds	r3, r7, #6
 8005d5a:	9300      	str	r3, [sp, #0]
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	221b      	movs	r2, #27
 8005d60:	21d0      	movs	r1, #208	; 0xd0
 8005d62:	4805      	ldr	r0, [pc, #20]	; (8005d78 <MPU6050_Init+0xa4>)
 8005d64:	f7fc f86a 	bl	8001e3c <HAL_I2C_Mem_Write>
        return 0;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	e000      	b.n	8005d6e <MPU6050_Init+0x9a>
    }
    return 1;
 8005d6c:	2301      	movs	r3, #1
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3708      	adds	r7, #8
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}
 8005d76:	bf00      	nop
 8005d78:	20000570 	.word	0x20000570
 8005d7c:	00000000 	.word	0x00000000

08005d80 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(MPU6050_t *DataStruct)
{
 8005d80:	b5b0      	push	{r4, r5, r7, lr}
 8005d82:	b090      	sub	sp, #64	; 0x40
 8005d84:	af04      	add	r7, sp, #16
 8005d86:	6078      	str	r0, [r7, #4]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8005d88:	2364      	movs	r3, #100	; 0x64
 8005d8a:	9302      	str	r3, [sp, #8]
 8005d8c:	230e      	movs	r3, #14
 8005d8e:	9301      	str	r3, [sp, #4]
 8005d90:	f107 030c 	add.w	r3, r7, #12
 8005d94:	9300      	str	r3, [sp, #0]
 8005d96:	2301      	movs	r3, #1
 8005d98:	223b      	movs	r2, #59	; 0x3b
 8005d9a:	21d0      	movs	r1, #208	; 0xd0
 8005d9c:	489a      	ldr	r0, [pc, #616]	; (8006008 <MPU6050_Read_All+0x288>)
 8005d9e:	f7fc f947 	bl	8002030 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8005da2:	7b3b      	ldrb	r3, [r7, #12]
 8005da4:	021b      	lsls	r3, r3, #8
 8005da6:	b21a      	sxth	r2, r3
 8005da8:	7b7b      	ldrb	r3, [r7, #13]
 8005daa:	b21b      	sxth	r3, r3
 8005dac:	4313      	orrs	r3, r2
 8005dae:	b21a      	sxth	r2, r3
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8005db4:	7bbb      	ldrb	r3, [r7, #14]
 8005db6:	021b      	lsls	r3, r3, #8
 8005db8:	b21a      	sxth	r2, r3
 8005dba:	7bfb      	ldrb	r3, [r7, #15]
 8005dbc:	b21b      	sxth	r3, r3
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	b21a      	sxth	r2, r3
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8005dc6:	7c3b      	ldrb	r3, [r7, #16]
 8005dc8:	021b      	lsls	r3, r3, #8
 8005dca:	b21a      	sxth	r2, r3
 8005dcc:	7c7b      	ldrb	r3, [r7, #17]
 8005dce:	b21b      	sxth	r3, r3
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	b21a      	sxth	r2, r3
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 8005dd8:	7cbb      	ldrb	r3, [r7, #18]
 8005dda:	021b      	lsls	r3, r3, #8
 8005ddc:	b21a      	sxth	r2, r3
 8005dde:	7cfb      	ldrb	r3, [r7, #19]
 8005de0:	b21b      	sxth	r3, r3
 8005de2:	4313      	orrs	r3, r2
 8005de4:	857b      	strh	r3, [r7, #42]	; 0x2a
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 8005de6:	7d3b      	ldrb	r3, [r7, #20]
 8005de8:	021b      	lsls	r3, r3, #8
 8005dea:	b21a      	sxth	r2, r3
 8005dec:	7d7b      	ldrb	r3, [r7, #21]
 8005dee:	b21b      	sxth	r3, r3
 8005df0:	4313      	orrs	r3, r2
 8005df2:	b21a      	sxth	r2, r3
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	829a      	strh	r2, [r3, #20]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 8005df8:	7dbb      	ldrb	r3, [r7, #22]
 8005dfa:	021b      	lsls	r3, r3, #8
 8005dfc:	b21a      	sxth	r2, r3
 8005dfe:	7dfb      	ldrb	r3, [r7, #23]
 8005e00:	b21b      	sxth	r3, r3
 8005e02:	4313      	orrs	r3, r2
 8005e04:	b21a      	sxth	r2, r3
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	82da      	strh	r2, [r3, #22]
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 8005e0a:	7e3b      	ldrb	r3, [r7, #24]
 8005e0c:	021b      	lsls	r3, r3, #8
 8005e0e:	b21a      	sxth	r2, r3
 8005e10:	7e7b      	ldrb	r3, [r7, #25]
 8005e12:	b21b      	sxth	r3, r3
 8005e14:	4313      	orrs	r3, r2
 8005e16:	b21a      	sxth	r2, r3
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	831a      	strh	r2, [r3, #24]

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005e22:	4618      	mov	r0, r3
 8005e24:	f7fa faee 	bl	8000404 <__aeabi_i2d>
 8005e28:	f04f 0200 	mov.w	r2, #0
 8005e2c:	4b77      	ldr	r3, [pc, #476]	; (800600c <MPU6050_Read_All+0x28c>)
 8005e2e:	f7fa fc7d 	bl	800072c <__aeabi_ddiv>
 8005e32:	4603      	mov	r3, r0
 8005e34:	460c      	mov	r4, r1
 8005e36:	4618      	mov	r0, r3
 8005e38:	4621      	mov	r1, r4
 8005e3a:	f7fa fdfd 	bl	8000a38 <__aeabi_d2f>
 8005e3e:	4602      	mov	r2, r0
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	609a      	str	r2, [r3, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f7fa fada 	bl	8000404 <__aeabi_i2d>
 8005e50:	f04f 0200 	mov.w	r2, #0
 8005e54:	4b6d      	ldr	r3, [pc, #436]	; (800600c <MPU6050_Read_All+0x28c>)
 8005e56:	f7fa fc69 	bl	800072c <__aeabi_ddiv>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	460c      	mov	r4, r1
 8005e5e:	4618      	mov	r0, r3
 8005e60:	4621      	mov	r1, r4
 8005e62:	f7fa fde9 	bl	8000a38 <__aeabi_d2f>
 8005e66:	4602      	mov	r2, r0
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	60da      	str	r2, [r3, #12]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005e72:	4618      	mov	r0, r3
 8005e74:	f7fa feea 	bl	8000c4c <__aeabi_i2f>
 8005e78:	4602      	mov	r2, r0
 8005e7a:	4b65      	ldr	r3, [pc, #404]	; (8006010 <MPU6050_Read_All+0x290>)
 8005e7c:	4619      	mov	r1, r3
 8005e7e:	4610      	mov	r0, r2
 8005e80:	f7fa ffec 	bl	8000e5c <__aeabi_fdiv>
 8005e84:	4603      	mov	r3, r0
 8005e86:	461a      	mov	r2, r3
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	611a      	str	r2, [r3, #16]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 8005e8c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8005e90:	4618      	mov	r0, r3
 8005e92:	f7fa fedb 	bl	8000c4c <__aeabi_i2f>
 8005e96:	4603      	mov	r3, r0
 8005e98:	495e      	ldr	r1, [pc, #376]	; (8006014 <MPU6050_Read_All+0x294>)
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f7fa ffde 	bl	8000e5c <__aeabi_fdiv>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	495d      	ldr	r1, [pc, #372]	; (8006018 <MPU6050_Read_All+0x298>)
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f7fa fe1d 	bl	8000ae4 <__addsf3>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	461a      	mov	r2, r3
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	629a      	str	r2, [r3, #40]	; 0x28
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8005eb8:	4618      	mov	r0, r3
 8005eba:	f7fa faa3 	bl	8000404 <__aeabi_i2d>
 8005ebe:	a34e      	add	r3, pc, #312	; (adr r3, 8005ff8 <MPU6050_Read_All+0x278>)
 8005ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ec4:	f7fa fc32 	bl	800072c <__aeabi_ddiv>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	460c      	mov	r4, r1
 8005ecc:	4618      	mov	r0, r3
 8005ece:	4621      	mov	r1, r4
 8005ed0:	f7fa fdb2 	bl	8000a38 <__aeabi_d2f>
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	61da      	str	r2, [r3, #28]
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	f7fa fa8f 	bl	8000404 <__aeabi_i2d>
 8005ee6:	a344      	add	r3, pc, #272	; (adr r3, 8005ff8 <MPU6050_Read_All+0x278>)
 8005ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eec:	f7fa fc1e 	bl	800072c <__aeabi_ddiv>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	460c      	mov	r4, r1
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	4621      	mov	r1, r4
 8005ef8:	f7fa fd9e 	bl	8000a38 <__aeabi_d2f>
 8005efc:	4602      	mov	r2, r0
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	621a      	str	r2, [r3, #32]
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8005f08:	4618      	mov	r0, r3
 8005f0a:	f7fa fa7b 	bl	8000404 <__aeabi_i2d>
 8005f0e:	a33a      	add	r3, pc, #232	; (adr r3, 8005ff8 <MPU6050_Read_All+0x278>)
 8005f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f14:	f7fa fc0a 	bl	800072c <__aeabi_ddiv>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	460c      	mov	r4, r1
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	4621      	mov	r1, r4
 8005f20:	f7fa fd8a 	bl	8000a38 <__aeabi_d2f>
 8005f24:	4602      	mov	r2, r0
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	625a      	str	r2, [r3, #36]	; 0x24

    // Kalman angle solve
    float dt = (float)(HAL_GetTick() - timer) / 1000;
 8005f2a:	f7fb f947 	bl	80011bc <HAL_GetTick>
 8005f2e:	4602      	mov	r2, r0
 8005f30:	4b3a      	ldr	r3, [pc, #232]	; (800601c <MPU6050_Read_All+0x29c>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	1ad3      	subs	r3, r2, r3
 8005f36:	4618      	mov	r0, r3
 8005f38:	f7fa fe84 	bl	8000c44 <__aeabi_ui2f>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	4938      	ldr	r1, [pc, #224]	; (8006020 <MPU6050_Read_All+0x2a0>)
 8005f40:	4618      	mov	r0, r3
 8005f42:	f7fa ff8b 	bl	8000e5c <__aeabi_fdiv>
 8005f46:	4603      	mov	r3, r0
 8005f48:	627b      	str	r3, [r7, #36]	; 0x24
    timer = HAL_GetTick();
 8005f4a:	f7fb f937 	bl	80011bc <HAL_GetTick>
 8005f4e:	4602      	mov	r2, r0
 8005f50:	4b32      	ldr	r3, [pc, #200]	; (800601c <MPU6050_Read_All+0x29c>)
 8005f52:	601a      	str	r2, [r3, #0]
    float roll;
    float roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005f5a:	461a      	mov	r2, r3
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005f62:	fb03 f202 	mul.w	r2, r3, r2
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005f6c:	4619      	mov	r1, r3
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005f74:	fb03 f301 	mul.w	r3, r3, r1
 8005f78:	4413      	add	r3, r2
    float roll_sqrt = sqrt(
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f7fa fa42 	bl	8000404 <__aeabi_i2d>
 8005f80:	4603      	mov	r3, r0
 8005f82:	460c      	mov	r4, r1
 8005f84:	4618      	mov	r0, r3
 8005f86:	4621      	mov	r1, r4
 8005f88:	f003 fd76 	bl	8009a78 <sqrt>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	460c      	mov	r4, r1
 8005f90:	4618      	mov	r0, r3
 8005f92:	4621      	mov	r1, r4
 8005f94:	f7fa fd50 	bl	8000a38 <__aeabi_d2f>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	623b      	str	r3, [r7, #32]
    if (roll_sqrt != 0.0)
 8005f9c:	f04f 0100 	mov.w	r1, #0
 8005fa0:	6a38      	ldr	r0, [r7, #32]
 8005fa2:	f7fb f83b 	bl	800101c <__aeabi_fcmpeq>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d13b      	bne.n	8006024 <MPU6050_Read_All+0x2a4>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f7fa fe4a 	bl	8000c4c <__aeabi_i2f>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	6a39      	ldr	r1, [r7, #32]
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	f7fa ff4d 	bl	8000e5c <__aeabi_fdiv>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f7fa fa2f 	bl	8000428 <__aeabi_f2d>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	460c      	mov	r4, r1
 8005fce:	4618      	mov	r0, r3
 8005fd0:	4621      	mov	r1, r4
 8005fd2:	f003 fbc1 	bl	8009758 <atan>
 8005fd6:	a30a      	add	r3, pc, #40	; (adr r3, 8006000 <MPU6050_Read_All+0x280>)
 8005fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fdc:	f7fa fa7c 	bl	80004d8 <__aeabi_dmul>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	460c      	mov	r4, r1
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	4621      	mov	r1, r4
 8005fe8:	f7fa fd26 	bl	8000a38 <__aeabi_d2f>
 8005fec:	4603      	mov	r3, r0
 8005fee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ff0:	e01b      	b.n	800602a <MPU6050_Read_All+0x2aa>
 8005ff2:	bf00      	nop
 8005ff4:	f3af 8000 	nop.w
 8005ff8:	00000000 	.word	0x00000000
 8005ffc:	40606000 	.word	0x40606000
 8006000:	1a63c1f8 	.word	0x1a63c1f8
 8006004:	404ca5dc 	.word	0x404ca5dc
 8006008:	20000570 	.word	0x20000570
 800600c:	40d00000 	.word	0x40d00000
 8006010:	46614800 	.word	0x46614800
 8006014:	43aa0000 	.word	0x43aa0000
 8006018:	42121eb8 	.word	0x42121eb8
 800601c:	2000077c 	.word	0x2000077c
 8006020:	447a0000 	.word	0x447a0000
    }
    else
    {
        roll = 0.0;
 8006024:	f04f 0300 	mov.w	r3, #0
 8006028:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    float pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006030:	425b      	negs	r3, r3
 8006032:	4618      	mov	r0, r3
 8006034:	f7fa f9e6 	bl	8000404 <__aeabi_i2d>
 8006038:	4604      	mov	r4, r0
 800603a:	460d      	mov	r5, r1
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006042:	4618      	mov	r0, r3
 8006044:	f7fa f9de 	bl	8000404 <__aeabi_i2d>
 8006048:	4602      	mov	r2, r0
 800604a:	460b      	mov	r3, r1
 800604c:	4620      	mov	r0, r4
 800604e:	4629      	mov	r1, r5
 8006050:	f003 fd10 	bl	8009a74 <atan2>
 8006054:	a32e      	add	r3, pc, #184	; (adr r3, 8006110 <MPU6050_Read_All+0x390>)
 8006056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800605a:	f7fa fa3d 	bl	80004d8 <__aeabi_dmul>
 800605e:	4603      	mov	r3, r0
 8006060:	460c      	mov	r4, r1
 8006062:	4618      	mov	r0, r3
 8006064:	4621      	mov	r1, r4
 8006066:	f7fa fce7 	bl	8000a38 <__aeabi_d2f>
 800606a:	4603      	mov	r3, r0
 800606c:	61fb      	str	r3, [r7, #28]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 800606e:	492a      	ldr	r1, [pc, #168]	; (8006118 <MPU6050_Read_All+0x398>)
 8006070:	69f8      	ldr	r0, [r7, #28]
 8006072:	f7fa ffdd 	bl	8001030 <__aeabi_fcmplt>
 8006076:	4603      	mov	r3, r0
 8006078:	2b00      	cmp	r3, #0
 800607a:	d008      	beq.n	800608e <MPU6050_Read_All+0x30e>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006080:	4926      	ldr	r1, [pc, #152]	; (800611c <MPU6050_Read_All+0x39c>)
 8006082:	4618      	mov	r0, r3
 8006084:	f7fa fff2 	bl	800106c <__aeabi_fcmpgt>
 8006088:	4603      	mov	r3, r0
 800608a:	2b00      	cmp	r3, #0
 800608c:	d10f      	bne.n	80060ae <MPU6050_Read_All+0x32e>
 800608e:	4923      	ldr	r1, [pc, #140]	; (800611c <MPU6050_Read_All+0x39c>)
 8006090:	69f8      	ldr	r0, [r7, #28]
 8006092:	f7fa ffeb 	bl	800106c <__aeabi_fcmpgt>
 8006096:	4603      	mov	r3, r0
 8006098:	2b00      	cmp	r3, #0
 800609a:	d00f      	beq.n	80060bc <MPU6050_Read_All+0x33c>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060a0:	491d      	ldr	r1, [pc, #116]	; (8006118 <MPU6050_Read_All+0x398>)
 80060a2:	4618      	mov	r0, r3
 80060a4:	f7fa ffc4 	bl	8001030 <__aeabi_fcmplt>
 80060a8:	4603      	mov	r3, r0
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d006      	beq.n	80060bc <MPU6050_Read_All+0x33c>
    {
        KalmanY.angle = pitch;
 80060ae:	4a1c      	ldr	r2, [pc, #112]	; (8006120 <MPU6050_Read_All+0x3a0>)
 80060b0:	69fb      	ldr	r3, [r7, #28]
 80060b2:	60d3      	str	r3, [r2, #12]
        DataStruct->KalmanAngleY = pitch;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	69fa      	ldr	r2, [r7, #28]
 80060b8:	631a      	str	r2, [r3, #48]	; 0x30
 80060ba:	e009      	b.n	80060d0 <MPU6050_Read_All+0x350>
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6a1a      	ldr	r2, [r3, #32]
 80060c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c2:	69f9      	ldr	r1, [r7, #28]
 80060c4:	4816      	ldr	r0, [pc, #88]	; (8006120 <MPU6050_Read_All+0x3a0>)
 80060c6:	f000 f82f 	bl	8006128 <Kalman_getAngle>
 80060ca:	4602      	mov	r2, r0
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	631a      	str	r2, [r3, #48]	; 0x30
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80060d8:	4910      	ldr	r1, [pc, #64]	; (800611c <MPU6050_Read_All+0x39c>)
 80060da:	4618      	mov	r0, r3
 80060dc:	f7fa ffc6 	bl	800106c <__aeabi_fcmpgt>
 80060e0:	4603      	mov	r3, r0
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d005      	beq.n	80060f2 <MPU6050_Read_All+0x372>
        DataStruct->Gx = -DataStruct->Gx;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	69db      	ldr	r3, [r3, #28]
 80060ea:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	61da      	str	r2, [r3, #28]
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	69da      	ldr	r2, [r3, #28]
 80060f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80060fa:	480a      	ldr	r0, [pc, #40]	; (8006124 <MPU6050_Read_All+0x3a4>)
 80060fc:	f000 f814 	bl	8006128 <Kalman_getAngle>
 8006100:	4602      	mov	r2, r0
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006106:	bf00      	nop
 8006108:	3730      	adds	r7, #48	; 0x30
 800610a:	46bd      	mov	sp, r7
 800610c:	bdb0      	pop	{r4, r5, r7, pc}
 800610e:	bf00      	nop
 8006110:	1a63c1f8 	.word	0x1a63c1f8
 8006114:	404ca5dc 	.word	0x404ca5dc
 8006118:	c2b40000 	.word	0xc2b40000
 800611c:	42b40000 	.word	0x42b40000
 8006120:	20000038 	.word	0x20000038
 8006124:	20000014 	.word	0x20000014

08006128 <Kalman_getAngle>:

float Kalman_getAngle(Kalman_t *Kalman, float newAngle, float newRate, float dt)
{
 8006128:	b590      	push	{r4, r7, lr}
 800612a:	b08d      	sub	sp, #52	; 0x34
 800612c:	af00      	add	r7, sp, #0
 800612e:	60f8      	str	r0, [r7, #12]
 8006130:	60b9      	str	r1, [r7, #8]
 8006132:	607a      	str	r2, [r7, #4]
 8006134:	603b      	str	r3, [r7, #0]
    float rate = newRate - Kalman->bias;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	691b      	ldr	r3, [r3, #16]
 800613a:	4619      	mov	r1, r3
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f7fa fccf 	bl	8000ae0 <__aeabi_fsub>
 8006142:	4603      	mov	r3, r0
 8006144:	62fb      	str	r3, [r7, #44]	; 0x2c
    Kalman->angle += dt * rate;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	68dc      	ldr	r4, [r3, #12]
 800614a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800614c:	6838      	ldr	r0, [r7, #0]
 800614e:	f7fa fdd1 	bl	8000cf4 <__aeabi_fmul>
 8006152:	4603      	mov	r3, r0
 8006154:	4619      	mov	r1, r3
 8006156:	4620      	mov	r0, r4
 8006158:	f7fa fcc4 	bl	8000ae4 <__addsf3>
 800615c:	4603      	mov	r3, r0
 800615e:	461a      	mov	r2, r3
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	60da      	str	r2, [r3, #12]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	695c      	ldr	r4, [r3, #20]
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	6a1b      	ldr	r3, [r3, #32]
 800616c:	6839      	ldr	r1, [r7, #0]
 800616e:	4618      	mov	r0, r3
 8006170:	f7fa fdc0 	bl	8000cf4 <__aeabi_fmul>
 8006174:	4603      	mov	r3, r0
 8006176:	461a      	mov	r2, r3
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	699b      	ldr	r3, [r3, #24]
 800617c:	4619      	mov	r1, r3
 800617e:	4610      	mov	r0, r2
 8006180:	f7fa fcae 	bl	8000ae0 <__aeabi_fsub>
 8006184:	4603      	mov	r3, r0
 8006186:	461a      	mov	r2, r3
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	69db      	ldr	r3, [r3, #28]
 800618c:	4619      	mov	r1, r3
 800618e:	4610      	mov	r0, r2
 8006190:	f7fa fca6 	bl	8000ae0 <__aeabi_fsub>
 8006194:	4603      	mov	r3, r0
 8006196:	461a      	mov	r2, r3
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4619      	mov	r1, r3
 800619e:	4610      	mov	r0, r2
 80061a0:	f7fa fca0 	bl	8000ae4 <__addsf3>
 80061a4:	4603      	mov	r3, r0
 80061a6:	6839      	ldr	r1, [r7, #0]
 80061a8:	4618      	mov	r0, r3
 80061aa:	f7fa fda3 	bl	8000cf4 <__aeabi_fmul>
 80061ae:	4603      	mov	r3, r0
 80061b0:	4619      	mov	r1, r3
 80061b2:	4620      	mov	r0, r4
 80061b4:	f7fa fc96 	bl	8000ae4 <__addsf3>
 80061b8:	4603      	mov	r3, r0
 80061ba:	461a      	mov	r2, r3
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	615a      	str	r2, [r3, #20]
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	699c      	ldr	r4, [r3, #24]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	6a1b      	ldr	r3, [r3, #32]
 80061c8:	6839      	ldr	r1, [r7, #0]
 80061ca:	4618      	mov	r0, r3
 80061cc:	f7fa fd92 	bl	8000cf4 <__aeabi_fmul>
 80061d0:	4603      	mov	r3, r0
 80061d2:	4619      	mov	r1, r3
 80061d4:	4620      	mov	r0, r4
 80061d6:	f7fa fc83 	bl	8000ae0 <__aeabi_fsub>
 80061da:	4603      	mov	r3, r0
 80061dc:	461a      	mov	r2, r3
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	619a      	str	r2, [r3, #24]
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	69dc      	ldr	r4, [r3, #28]
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	6a1b      	ldr	r3, [r3, #32]
 80061ea:	6839      	ldr	r1, [r7, #0]
 80061ec:	4618      	mov	r0, r3
 80061ee:	f7fa fd81 	bl	8000cf4 <__aeabi_fmul>
 80061f2:	4603      	mov	r3, r0
 80061f4:	4619      	mov	r1, r3
 80061f6:	4620      	mov	r0, r4
 80061f8:	f7fa fc72 	bl	8000ae0 <__aeabi_fsub>
 80061fc:	4603      	mov	r3, r0
 80061fe:	461a      	mov	r2, r3
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	61da      	str	r2, [r3, #28]
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	6a1c      	ldr	r4, [r3, #32]
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	6839      	ldr	r1, [r7, #0]
 800620e:	4618      	mov	r0, r3
 8006210:	f7fa fd70 	bl	8000cf4 <__aeabi_fmul>
 8006214:	4603      	mov	r3, r0
 8006216:	4619      	mov	r1, r3
 8006218:	4620      	mov	r0, r4
 800621a:	f7fa fc63 	bl	8000ae4 <__addsf3>
 800621e:	4603      	mov	r3, r0
 8006220:	461a      	mov	r2, r3
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	621a      	str	r2, [r3, #32]

    float S = Kalman->P[0][0] + Kalman->R_measure;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	695a      	ldr	r2, [r3, #20]
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	4619      	mov	r1, r3
 8006230:	4610      	mov	r0, r2
 8006232:	f7fa fc57 	bl	8000ae4 <__addsf3>
 8006236:	4603      	mov	r3, r0
 8006238:	62bb      	str	r3, [r7, #40]	; 0x28
    float K[2];
    K[0] = Kalman->P[0][0] / S;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	695b      	ldr	r3, [r3, #20]
 800623e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006240:	4618      	mov	r0, r3
 8006242:	f7fa fe0b 	bl	8000e5c <__aeabi_fdiv>
 8006246:	4603      	mov	r3, r0
 8006248:	617b      	str	r3, [r7, #20]
    K[1] = Kalman->P[1][0] / S;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	69db      	ldr	r3, [r3, #28]
 800624e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006250:	4618      	mov	r0, r3
 8006252:	f7fa fe03 	bl	8000e5c <__aeabi_fdiv>
 8006256:	4603      	mov	r3, r0
 8006258:	61bb      	str	r3, [r7, #24]

    float y = newAngle - Kalman->angle;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	68db      	ldr	r3, [r3, #12]
 800625e:	4619      	mov	r1, r3
 8006260:	68b8      	ldr	r0, [r7, #8]
 8006262:	f7fa fc3d 	bl	8000ae0 <__aeabi_fsub>
 8006266:	4603      	mov	r3, r0
 8006268:	627b      	str	r3, [r7, #36]	; 0x24
    Kalman->angle += K[0] * y;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	68dc      	ldr	r4, [r3, #12]
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006272:	4618      	mov	r0, r3
 8006274:	f7fa fd3e 	bl	8000cf4 <__aeabi_fmul>
 8006278:	4603      	mov	r3, r0
 800627a:	4619      	mov	r1, r3
 800627c:	4620      	mov	r0, r4
 800627e:	f7fa fc31 	bl	8000ae4 <__addsf3>
 8006282:	4603      	mov	r3, r0
 8006284:	461a      	mov	r2, r3
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	60da      	str	r2, [r3, #12]
    Kalman->bias += K[1] * y;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	691c      	ldr	r4, [r3, #16]
 800628e:	69bb      	ldr	r3, [r7, #24]
 8006290:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006292:	4618      	mov	r0, r3
 8006294:	f7fa fd2e 	bl	8000cf4 <__aeabi_fmul>
 8006298:	4603      	mov	r3, r0
 800629a:	4619      	mov	r1, r3
 800629c:	4620      	mov	r0, r4
 800629e:	f7fa fc21 	bl	8000ae4 <__addsf3>
 80062a2:	4603      	mov	r3, r0
 80062a4:	461a      	mov	r2, r3
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	611a      	str	r2, [r3, #16]

    float P00_temp = Kalman->P[0][0];
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	695b      	ldr	r3, [r3, #20]
 80062ae:	623b      	str	r3, [r7, #32]
    float P01_temp = Kalman->P[0][1];
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	699b      	ldr	r3, [r3, #24]
 80062b4:	61fb      	str	r3, [r7, #28]

    Kalman->P[0][0] -= K[0] * P00_temp;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	695c      	ldr	r4, [r3, #20]
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	6a39      	ldr	r1, [r7, #32]
 80062be:	4618      	mov	r0, r3
 80062c0:	f7fa fd18 	bl	8000cf4 <__aeabi_fmul>
 80062c4:	4603      	mov	r3, r0
 80062c6:	4619      	mov	r1, r3
 80062c8:	4620      	mov	r0, r4
 80062ca:	f7fa fc09 	bl	8000ae0 <__aeabi_fsub>
 80062ce:	4603      	mov	r3, r0
 80062d0:	461a      	mov	r2, r3
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	615a      	str	r2, [r3, #20]
    Kalman->P[0][1] -= K[0] * P01_temp;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	699c      	ldr	r4, [r3, #24]
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	69f9      	ldr	r1, [r7, #28]
 80062de:	4618      	mov	r0, r3
 80062e0:	f7fa fd08 	bl	8000cf4 <__aeabi_fmul>
 80062e4:	4603      	mov	r3, r0
 80062e6:	4619      	mov	r1, r3
 80062e8:	4620      	mov	r0, r4
 80062ea:	f7fa fbf9 	bl	8000ae0 <__aeabi_fsub>
 80062ee:	4603      	mov	r3, r0
 80062f0:	461a      	mov	r2, r3
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	619a      	str	r2, [r3, #24]
    Kalman->P[1][0] -= K[1] * P00_temp;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	69dc      	ldr	r4, [r3, #28]
 80062fa:	69bb      	ldr	r3, [r7, #24]
 80062fc:	6a39      	ldr	r1, [r7, #32]
 80062fe:	4618      	mov	r0, r3
 8006300:	f7fa fcf8 	bl	8000cf4 <__aeabi_fmul>
 8006304:	4603      	mov	r3, r0
 8006306:	4619      	mov	r1, r3
 8006308:	4620      	mov	r0, r4
 800630a:	f7fa fbe9 	bl	8000ae0 <__aeabi_fsub>
 800630e:	4603      	mov	r3, r0
 8006310:	461a      	mov	r2, r3
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	61da      	str	r2, [r3, #28]
    Kalman->P[1][1] -= K[1] * P01_temp;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	6a1c      	ldr	r4, [r3, #32]
 800631a:	69bb      	ldr	r3, [r7, #24]
 800631c:	69f9      	ldr	r1, [r7, #28]
 800631e:	4618      	mov	r0, r3
 8006320:	f7fa fce8 	bl	8000cf4 <__aeabi_fmul>
 8006324:	4603      	mov	r3, r0
 8006326:	4619      	mov	r1, r3
 8006328:	4620      	mov	r0, r4
 800632a:	f7fa fbd9 	bl	8000ae0 <__aeabi_fsub>
 800632e:	4603      	mov	r3, r0
 8006330:	461a      	mov	r2, r3
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	621a      	str	r2, [r3, #32]

    return Kalman->angle;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	68db      	ldr	r3, [r3, #12]
};
 800633a:	4618      	mov	r0, r3
 800633c:	3734      	adds	r7, #52	; 0x34
 800633e:	46bd      	mov	sp, r7
 8006340:	bd90      	pop	{r4, r7, pc}
	...

08006344 <_qFFMath_GetAbnormal>:
#define cast_reinterpret( dst, src, dst_type )                              \
(void)memcpy( &dst, &src, sizeof(dst_type) )                                \

/*============================================================================*/
float _qFFMath_GetAbnormal( const int i )
{
 8006344:	b480      	push	{r7}
 8006346:	b083      	sub	sp, #12
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
    static const uint32_t u_ab[ 2 ] = { 0x7F800000u, 0x7FBFFFFFu };
    static float f_ab[ 2 ] = { 0.0f, 0.0f };
    static bool init = true;
    
    if ( init ) {
 800634c:	4b0a      	ldr	r3, [pc, #40]	; (8006378 <_qFFMath_GetAbnormal+0x34>)
 800634e:	781b      	ldrb	r3, [r3, #0]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d008      	beq.n	8006366 <_qFFMath_GetAbnormal+0x22>
        (void)memcpy( f_ab, u_ab, sizeof(f_ab) );
 8006354:	4b09      	ldr	r3, [pc, #36]	; (800637c <_qFFMath_GetAbnormal+0x38>)
 8006356:	4a0a      	ldr	r2, [pc, #40]	; (8006380 <_qFFMath_GetAbnormal+0x3c>)
 8006358:	e892 0003 	ldmia.w	r2, {r0, r1}
 800635c:	e883 0003 	stmia.w	r3, {r0, r1}
        init = false;
 8006360:	4b05      	ldr	r3, [pc, #20]	; (8006378 <_qFFMath_GetAbnormal+0x34>)
 8006362:	2200      	movs	r2, #0
 8006364:	701a      	strb	r2, [r3, #0]
    }
    
    return f_ab[ i ]; 
 8006366:	4a05      	ldr	r2, [pc, #20]	; (800637c <_qFFMath_GetAbnormal+0x38>)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800636e:	4618      	mov	r0, r3
 8006370:	370c      	adds	r7, #12
 8006372:	46bd      	mov	sp, r7
 8006374:	bc80      	pop	{r7}
 8006376:	4770      	bx	lr
 8006378:	2000005c 	.word	0x2000005c
 800637c:	20000508 	.word	0x20000508
 8006380:	0800a0f4 	.word	0x0800a0f4

08006384 <qFFMath_FPClassify>:
/*============================================================================*/
int qFFMath_FPClassify( const float f ) 
{
 8006384:	b480      	push	{r7}
 8006386:	b085      	sub	sp, #20
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
    uint32_t u = 0u;
 800638c:	2300      	movs	r3, #0
 800638e:	60bb      	str	r3, [r7, #8]
    int retVal;

    cast_reinterpret( u, f, uint32_t );
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	60bb      	str	r3, [r7, #8]
    u &= 0x7FFFFFFFu;
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800639a:	60bb      	str	r3, [r7, #8]

    if ( 0u == u ) {
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d102      	bne.n	80063a8 <qFFMath_FPClassify+0x24>
        retVal = QFFM_FP_ZERO;
 80063a2:	2300      	movs	r3, #0
 80063a4:	60fb      	str	r3, [r7, #12]
 80063a6:	e016      	b.n	80063d6 <qFFMath_FPClassify+0x52>
    }
    else if ( u < 0x00800000u ) {
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80063ae:	d202      	bcs.n	80063b6 <qFFMath_FPClassify+0x32>
        retVal = QFFM_FP_SUBNORMAL;
 80063b0:	2301      	movs	r3, #1
 80063b2:	60fb      	str	r3, [r7, #12]
 80063b4:	e00f      	b.n	80063d6 <qFFMath_FPClassify+0x52>
    }
    else if ( u < 0x7F800000u ) {
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80063bc:	d202      	bcs.n	80063c4 <qFFMath_FPClassify+0x40>
        retVal = QFFM_FP_NORMAL;
 80063be:	2302      	movs	r3, #2
 80063c0:	60fb      	str	r3, [r7, #12]
 80063c2:	e008      	b.n	80063d6 <qFFMath_FPClassify+0x52>
    }
    else if ( 0x7F800000U == u ) {
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80063ca:	d102      	bne.n	80063d2 <qFFMath_FPClassify+0x4e>
        retVal = QFFM_FP_INFINITE;
 80063cc:	2303      	movs	r3, #3
 80063ce:	60fb      	str	r3, [r7, #12]
 80063d0:	e001      	b.n	80063d6 <qFFMath_FPClassify+0x52>
    }
    else {
        retVal = QFFM_FP_NAN;
 80063d2:	2304      	movs	r3, #4
 80063d4:	60fb      	str	r3, [r7, #12]
    }

    return retVal;
 80063d6:	68fb      	ldr	r3, [r7, #12]
}
 80063d8:	4618      	mov	r0, r3
 80063da:	3714      	adds	r7, #20
 80063dc:	46bd      	mov	sp, r7
 80063de:	bc80      	pop	{r7}
 80063e0:	4770      	bx	lr

080063e2 <qFFMath_IsNaN>:
/*============================================================================*/
bool qFFMath_IsNaN( const float x )
{
 80063e2:	b580      	push	{r7, lr}
 80063e4:	b082      	sub	sp, #8
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	6078      	str	r0, [r7, #4]
    return ( QFFM_FP_NAN == qFFMath_FPClassify( x ) );
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f7ff ffca 	bl	8006384 <qFFMath_FPClassify>
 80063f0:	4603      	mov	r3, r0
 80063f2:	2b04      	cmp	r3, #4
 80063f4:	bf0c      	ite	eq
 80063f6:	2301      	moveq	r3, #1
 80063f8:	2300      	movne	r3, #0
 80063fa:	b2db      	uxtb	r3, r3
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	3708      	adds	r7, #8
 8006400:	46bd      	mov	sp, r7
 8006402:	bd80      	pop	{r7, pc}

08006404 <qFFMath_Abs>:
{
    return ( qFFMath_FPClassify( x ) == QFFM_FP_NORMAL );
}
/*============================================================================*/
float qFFMath_Abs( float x )
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b082      	sub	sp, #8
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
    return ( x < 0.0f ) ? -x : x;
 800640c:	f04f 0100 	mov.w	r1, #0
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	f7fa fe0d 	bl	8001030 <__aeabi_fcmplt>
 8006416:	4603      	mov	r3, r0
 8006418:	2b00      	cmp	r3, #0
 800641a:	d003      	beq.n	8006424 <qFFMath_Abs+0x20>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006422:	e000      	b.n	8006426 <qFFMath_Abs+0x22>
 8006424:	687b      	ldr	r3, [r7, #4]
}
 8006426:	4618      	mov	r0, r3
 8006428:	3708      	adds	r7, #8
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}

0800642e <qFFMath_Sqrt>:
    
    return z*( 2.0f - ( x*z ) );
}
/*============================================================================*/
float qFFMath_Sqrt( float x )
{
 800642e:	b580      	push	{r7, lr}
 8006430:	b086      	sub	sp, #24
 8006432:	af00      	add	r7, sp, #0
 8006434:	6078      	str	r0, [r7, #4]
    float retVal;

    if ( x < 0.0f ) {
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f04f 0100 	mov.w	r1, #0
 800643c:	4618      	mov	r0, r3
 800643e:	f7fa fdf7 	bl	8001030 <__aeabi_fcmplt>
 8006442:	4603      	mov	r3, r0
 8006444:	2b00      	cmp	r3, #0
 8006446:	d004      	beq.n	8006452 <qFFMath_Sqrt+0x24>
        retVal = QFFM_NAN;
 8006448:	2001      	movs	r0, #1
 800644a:	f7ff ff7b 	bl	8006344 <_qFFMath_GetAbnormal>
 800644e:	6178      	str	r0, [r7, #20]
 8006450:	e02f      	b.n	80064b2 <qFFMath_Sqrt+0x84>
    }
    else if ( QFFM_FP_ZERO == qFFMath_FPClassify( x ) ) {
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	4618      	mov	r0, r3
 8006456:	f7ff ff95 	bl	8006384 <qFFMath_FPClassify>
 800645a:	4603      	mov	r3, r0
 800645c:	2b00      	cmp	r3, #0
 800645e:	d103      	bne.n	8006468 <qFFMath_Sqrt+0x3a>
        retVal = 0.0f;
 8006460:	f04f 0300 	mov.w	r3, #0
 8006464:	617b      	str	r3, [r7, #20]
 8006466:	e024      	b.n	80064b2 <qFFMath_Sqrt+0x84>
    }
    else {
        uint32_t y = 0u;
 8006468:	2300      	movs	r3, #0
 800646a:	613b      	str	r3, [r7, #16]
        float z = 0.0f;
 800646c:	f04f 0300 	mov.w	r3, #0
 8006470:	60fb      	str	r3, [r7, #12]

        cast_reinterpret( y, x, uint32_t );
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	613b      	str	r3, [r7, #16]
        y = ( ( y - 0x00800000u ) >> 1u ) + 0x20000000u;
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800647c:	085b      	lsrs	r3, r3, #1
 800647e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8006482:	613b      	str	r3, [r7, #16]
        cast_reinterpret( z, y, float );
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	60fb      	str	r3, [r7, #12]
        retVal = ( ( x/z ) + z ) * 0.5f;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	68fa      	ldr	r2, [r7, #12]
 800648c:	4611      	mov	r1, r2
 800648e:	4618      	mov	r0, r3
 8006490:	f7fa fce4 	bl	8000e5c <__aeabi_fdiv>
 8006494:	4603      	mov	r3, r0
 8006496:	461a      	mov	r2, r3
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	4619      	mov	r1, r3
 800649c:	4610      	mov	r0, r2
 800649e:	f7fa fb21 	bl	8000ae4 <__addsf3>
 80064a2:	4603      	mov	r3, r0
 80064a4:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80064a8:	4618      	mov	r0, r3
 80064aa:	f7fa fc23 	bl	8000cf4 <__aeabi_fmul>
 80064ae:	4603      	mov	r3, r0
 80064b0:	617b      	str	r3, [r7, #20]
    }

    return retVal;
 80064b2:	697b      	ldr	r3, [r7, #20]
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	3718      	adds	r7, #24
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}

080064bc <qFFMath_Sin>:
    return ( QFFM_FP_ZERO == qFFMath_FPClassify( x )) ? QFFM_NAN
                                                      : ( x - ( y*qFFMath_Trunc( x/y ) ) );
}
/*============================================================================*/
float qFFMath_Sin( float x )
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b084      	sub	sp, #16
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
    float y;
    x *= -0.318309886f;
 80064c4:	491e      	ldr	r1, [pc, #120]	; (8006540 <qFFMath_Sin+0x84>)
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f7fa fc14 	bl	8000cf4 <__aeabi_fmul>
 80064cc:	4603      	mov	r3, r0
 80064ce:	607b      	str	r3, [r7, #4]
    y = x + 25165824.0f;
 80064d0:	491c      	ldr	r1, [pc, #112]	; (8006544 <qFFMath_Sin+0x88>)
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f7fa fb06 	bl	8000ae4 <__addsf3>
 80064d8:	4603      	mov	r3, r0
 80064da:	60fb      	str	r3, [r7, #12]
    x -= y - 25165824.0f;
 80064dc:	4919      	ldr	r1, [pc, #100]	; (8006544 <qFFMath_Sin+0x88>)
 80064de:	68f8      	ldr	r0, [r7, #12]
 80064e0:	f7fa fafe 	bl	8000ae0 <__aeabi_fsub>
 80064e4:	4603      	mov	r3, r0
 80064e6:	4619      	mov	r1, r3
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f7fa faf9 	bl	8000ae0 <__aeabi_fsub>
 80064ee:	4603      	mov	r3, r0
 80064f0:	607b      	str	r3, [r7, #4]
    x *= qFFMath_Abs( x ) - 1.0f;
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f7ff ff86 	bl	8006404 <qFFMath_Abs>
 80064f8:	4603      	mov	r3, r0
 80064fa:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80064fe:	4618      	mov	r0, r3
 8006500:	f7fa faee 	bl	8000ae0 <__aeabi_fsub>
 8006504:	4603      	mov	r3, r0
 8006506:	4619      	mov	r1, r3
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f7fa fbf3 	bl	8000cf4 <__aeabi_fmul>
 800650e:	4603      	mov	r3, r0
 8006510:	607b      	str	r3, [r7, #4]
    return x*( ( 3.5841304553896f*qFFMath_Abs( x ) ) + 3.1039673861526f );
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f7ff ff76 	bl	8006404 <qFFMath_Abs>
 8006518:	4603      	mov	r3, r0
 800651a:	490b      	ldr	r1, [pc, #44]	; (8006548 <qFFMath_Sin+0x8c>)
 800651c:	4618      	mov	r0, r3
 800651e:	f7fa fbe9 	bl	8000cf4 <__aeabi_fmul>
 8006522:	4603      	mov	r3, r0
 8006524:	4909      	ldr	r1, [pc, #36]	; (800654c <qFFMath_Sin+0x90>)
 8006526:	4618      	mov	r0, r3
 8006528:	f7fa fadc 	bl	8000ae4 <__addsf3>
 800652c:	4603      	mov	r3, r0
 800652e:	6879      	ldr	r1, [r7, #4]
 8006530:	4618      	mov	r0, r3
 8006532:	f7fa fbdf 	bl	8000cf4 <__aeabi_fmul>
 8006536:	4603      	mov	r3, r0
}
 8006538:	4618      	mov	r0, r3
 800653a:	3710      	adds	r7, #16
 800653c:	46bd      	mov	sp, r7
 800653e:	bd80      	pop	{r7, pc}
 8006540:	bea2f983 	.word	0xbea2f983
 8006544:	4bc00000 	.word	0x4bc00000
 8006548:	40656265 	.word	0x40656265
 800654c:	4046a767 	.word	0x4046a767

08006550 <qFFMath_Cos>:
/*============================================================================*/
float qFFMath_Cos( float x )
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b082      	sub	sp, #8
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
    return qFFMath_Sin( x + 1.570796327f );
 8006558:	4906      	ldr	r1, [pc, #24]	; (8006574 <qFFMath_Cos+0x24>)
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f7fa fac2 	bl	8000ae4 <__addsf3>
 8006560:	4603      	mov	r3, r0
 8006562:	4618      	mov	r0, r3
 8006564:	f7ff ffaa 	bl	80064bc <qFFMath_Sin>
 8006568:	4603      	mov	r3, r0
}
 800656a:	4618      	mov	r0, r3
 800656c:	3708      	adds	r7, #8
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}
 8006572:	bf00      	nop
 8006574:	3fc90fdb 	.word	0x3fc90fdb

08006578 <qFFMath_Exp2>:
    y = qFFMath_ATan( y/( x + f ) ) + ( ( x < 0.0f ) ? t : 0.0f );
    return y + ( f*( ( 0.5f*t ) - y ) );
}
/*============================================================================*/
float qFFMath_Exp2( float x )
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b086      	sub	sp, #24
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
    float retVal;

    if ( x <= -126.0f ) {
 8006580:	492e      	ldr	r1, [pc, #184]	; (800663c <qFFMath_Exp2+0xc4>)
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f7fa fd5e 	bl	8001044 <__aeabi_fcmple>
 8006588:	4603      	mov	r3, r0
 800658a:	2b00      	cmp	r3, #0
 800658c:	d003      	beq.n	8006596 <qFFMath_Exp2+0x1e>
        retVal = 0.0f;
 800658e:	f04f 0300 	mov.w	r3, #0
 8006592:	617b      	str	r3, [r7, #20]
 8006594:	e04c      	b.n	8006630 <qFFMath_Exp2+0xb8>
    }
    else if ( x > 128.0f ) {
 8006596:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f7fa fd66 	bl	800106c <__aeabi_fcmpgt>
 80065a0:	4603      	mov	r3, r0
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d004      	beq.n	80065b0 <qFFMath_Exp2+0x38>
        retVal = QFFM_INFINITY;
 80065a6:	2000      	movs	r0, #0
 80065a8:	f7ff fecc 	bl	8006344 <_qFFMath_GetAbnormal>
 80065ac:	6178      	str	r0, [r7, #20]
 80065ae:	e03f      	b.n	8006630 <qFFMath_Exp2+0xb8>
    }
    else {
        float y = 0.0f;
 80065b0:	f04f 0300 	mov.w	r3, #0
 80065b4:	613b      	str	r3, [r7, #16]
        uint32_t exponent;
        /*cstat -CERT-FLP34-C -MISRAC2012-Rule-10.8*/
        exponent = (uint32_t)( x + 127.0f );
 80065b6:	4922      	ldr	r1, [pc, #136]	; (8006640 <qFFMath_Exp2+0xc8>)
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f7fa fa93 	bl	8000ae4 <__addsf3>
 80065be:	4603      	mov	r3, r0
 80065c0:	4618      	mov	r0, r3
 80065c2:	f7fa fd83 	bl	80010cc <__aeabi_f2uiz>
 80065c6:	4603      	mov	r3, r0
 80065c8:	60fb      	str	r3, [r7, #12]
        /*cstat +CERT-FLP34-C +MISRAC2012-Rule-10.8 -CERT-FLP36-C*/
        x += 127.0f - (float)exponent;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	4618      	mov	r0, r3
 80065ce:	f7fa fb39 	bl	8000c44 <__aeabi_ui2f>
 80065d2:	4603      	mov	r3, r0
 80065d4:	4619      	mov	r1, r3
 80065d6:	481a      	ldr	r0, [pc, #104]	; (8006640 <qFFMath_Exp2+0xc8>)
 80065d8:	f7fa fa82 	bl	8000ae0 <__aeabi_fsub>
 80065dc:	4603      	mov	r3, r0
 80065de:	4619      	mov	r1, r3
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f7fa fa7f 	bl	8000ae4 <__addsf3>
 80065e6:	4603      	mov	r3, r0
 80065e8:	607b      	str	r3, [r7, #4]
        /*cstat +CERT-FLP36-C*/
        exponent <<= 23u;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	05db      	lsls	r3, r3, #23
 80065ee:	60fb      	str	r3, [r7, #12]
        cast_reinterpret( y, exponent, float );
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	613b      	str	r3, [r7, #16]
        x *= ( x*0.339766027f ) + 0.660233972f;
 80065f4:	4913      	ldr	r1, [pc, #76]	; (8006644 <qFFMath_Exp2+0xcc>)
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f7fa fb7c 	bl	8000cf4 <__aeabi_fmul>
 80065fc:	4603      	mov	r3, r0
 80065fe:	4912      	ldr	r1, [pc, #72]	; (8006648 <qFFMath_Exp2+0xd0>)
 8006600:	4618      	mov	r0, r3
 8006602:	f7fa fa6f 	bl	8000ae4 <__addsf3>
 8006606:	4603      	mov	r3, r0
 8006608:	4619      	mov	r1, r3
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f7fa fb72 	bl	8000cf4 <__aeabi_fmul>
 8006610:	4603      	mov	r3, r0
 8006612:	607b      	str	r3, [r7, #4]
        retVal = y*( x + 1.0f );
 8006614:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f7fa fa63 	bl	8000ae4 <__addsf3>
 800661e:	4603      	mov	r3, r0
 8006620:	461a      	mov	r2, r3
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	4619      	mov	r1, r3
 8006626:	4610      	mov	r0, r2
 8006628:	f7fa fb64 	bl	8000cf4 <__aeabi_fmul>
 800662c:	4603      	mov	r3, r0
 800662e:	617b      	str	r3, [r7, #20]
    }

    return retVal;
 8006630:	697b      	ldr	r3, [r7, #20]
}
 8006632:	4618      	mov	r0, r3
 8006634:	3718      	adds	r7, #24
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}
 800663a:	bf00      	nop
 800663c:	c2fc0000 	.word	0xc2fc0000
 8006640:	42fe0000 	.word	0x42fe0000
 8006644:	3eadf5d0 	.word	0x3eadf5d0
 8006648:	3f290518 	.word	0x3f290518

0800664c <qFFMath_Log2>:
/*============================================================================*/
float qFFMath_Log2( float x )
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b086      	sub	sp, #24
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
    float retVal;

    if ( x < 0.0f ) {
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f04f 0100 	mov.w	r1, #0
 800665a:	4618      	mov	r0, r3
 800665c:	f7fa fce8 	bl	8001030 <__aeabi_fcmplt>
 8006660:	4603      	mov	r3, r0
 8006662:	2b00      	cmp	r3, #0
 8006664:	d004      	beq.n	8006670 <qFFMath_Log2+0x24>
        retVal = QFFM_NAN;
 8006666:	2001      	movs	r0, #1
 8006668:	f7ff fe6c 	bl	8006344 <_qFFMath_GetAbnormal>
 800666c:	6178      	str	r0, [r7, #20]
 800666e:	e049      	b.n	8006704 <qFFMath_Log2+0xb8>
    }
    else if ( QFFM_FP_ZERO == qFFMath_FPClassify( x ) ) {
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	4618      	mov	r0, r3
 8006674:	f7ff fe86 	bl	8006384 <qFFMath_FPClassify>
 8006678:	4603      	mov	r3, r0
 800667a:	2b00      	cmp	r3, #0
 800667c:	d107      	bne.n	800668e <qFFMath_Log2+0x42>
        retVal = -QFFM_INFINITY;
 800667e:	2000      	movs	r0, #0
 8006680:	f7ff fe60 	bl	8006344 <_qFFMath_GetAbnormal>
 8006684:	4603      	mov	r3, r0
 8006686:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800668a:	617b      	str	r3, [r7, #20]
 800668c:	e03a      	b.n	8006704 <qFFMath_Log2+0xb8>
    }
    else {
        uint32_t y = 0u, y2;
 800668e:	2300      	movs	r3, #0
 8006690:	60fb      	str	r3, [r7, #12]

        cast_reinterpret( y, x, uint32_t );
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	60fb      	str	r3, [r7, #12]
        y2 = y;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	613b      	str	r3, [r7, #16]
        y >>= 23u;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	0ddb      	lsrs	r3, r3, #23
 800669e:	60fb      	str	r3, [r7, #12]
        /*cstat -CERT-FLP36-C*/
        retVal = (float)y;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	4618      	mov	r0, r3
 80066a4:	f7fa face 	bl	8000c44 <__aeabi_ui2f>
 80066a8:	4603      	mov	r3, r0
 80066aa:	617b      	str	r3, [r7, #20]
        /*cstat +CERT-FLP36-C*/
        y = ( y2 & 0x007FFFFFu ) | 0x3F800000u;
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80066b2:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 80066b6:	60fb      	str	r3, [r7, #12]
        cast_reinterpret( x, y, float );
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	607b      	str	r3, [r7, #4]
        retVal += -128.0f + ( x*( ( -0.333333333f*x ) + 2.0f ) ) - 0.666666666f;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	4914      	ldr	r1, [pc, #80]	; (8006710 <qFFMath_Log2+0xc4>)
 80066c0:	4618      	mov	r0, r3
 80066c2:	f7fa fb17 	bl	8000cf4 <__aeabi_fmul>
 80066c6:	4603      	mov	r3, r0
 80066c8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80066cc:	4618      	mov	r0, r3
 80066ce:	f7fa fa09 	bl	8000ae4 <__addsf3>
 80066d2:	4603      	mov	r3, r0
 80066d4:	461a      	mov	r2, r3
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	4619      	mov	r1, r3
 80066da:	4610      	mov	r0, r2
 80066dc:	f7fa fb0a 	bl	8000cf4 <__aeabi_fmul>
 80066e0:	4603      	mov	r3, r0
 80066e2:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
 80066e6:	4618      	mov	r0, r3
 80066e8:	f7fa f9fa 	bl	8000ae0 <__aeabi_fsub>
 80066ec:	4603      	mov	r3, r0
 80066ee:	4909      	ldr	r1, [pc, #36]	; (8006714 <qFFMath_Log2+0xc8>)
 80066f0:	4618      	mov	r0, r3
 80066f2:	f7fa f9f5 	bl	8000ae0 <__aeabi_fsub>
 80066f6:	4603      	mov	r3, r0
 80066f8:	4619      	mov	r1, r3
 80066fa:	6978      	ldr	r0, [r7, #20]
 80066fc:	f7fa f9f2 	bl	8000ae4 <__addsf3>
 8006700:	4603      	mov	r3, r0
 8006702:	617b      	str	r3, [r7, #20]
    }

    return retVal;
 8006704:	697b      	ldr	r3, [r7, #20]
}
 8006706:	4618      	mov	r0, r3
 8006708:	3718      	adds	r7, #24
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}
 800670e:	bf00      	nop
 8006710:	beaaaaab 	.word	0xbeaaaaab
 8006714:	3f2aaaab 	.word	0x3f2aaaab

08006718 <qFFMath_Exp>:
/*============================================================================*/
float qFFMath_Exp( float x )
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b082      	sub	sp, #8
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
    return qFFMath_Exp2( 1.442695041f*x );
 8006720:	4906      	ldr	r1, [pc, #24]	; (800673c <qFFMath_Exp+0x24>)
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f7fa fae6 	bl	8000cf4 <__aeabi_fmul>
 8006728:	4603      	mov	r3, r0
 800672a:	4618      	mov	r0, r3
 800672c:	f7ff ff24 	bl	8006578 <qFFMath_Exp2>
 8006730:	4603      	mov	r3, r0
}
 8006732:	4618      	mov	r0, r3
 8006734:	3708      	adds	r7, #8
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}
 800673a:	bf00      	nop
 800673c:	3fb8aa3b 	.word	0x3fb8aa3b

08006740 <qFFMath_Log>:
{
    return qFFMath_Exp2( 3.32192809f*x );
}
/*============================================================================*/
float qFFMath_Log( float x )
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b082      	sub	sp, #8
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
    return 0.693147181f*qFFMath_Log2(x);
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f7ff ff7f 	bl	800664c <qFFMath_Log2>
 800674e:	4603      	mov	r3, r0
 8006750:	4904      	ldr	r1, [pc, #16]	; (8006764 <qFFMath_Log+0x24>)
 8006752:	4618      	mov	r0, r3
 8006754:	f7fa face 	bl	8000cf4 <__aeabi_fmul>
 8006758:	4603      	mov	r3, r0
}
 800675a:	4618      	mov	r0, r3
 800675c:	3708      	adds	r7, #8
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}
 8006762:	bf00      	nop
 8006764:	3f317218 	.word	0x3f317218

08006768 <qFFMath_Pow>:
    return 0.301029996f*qFFMath_Log2(x);
}
/*============================================================================*/
float qFFMath_Pow( float b,
                   float e )
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b082      	sub	sp, #8
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
 8006770:	6039      	str	r1, [r7, #0]
    return qFFMath_Exp2( e*qFFMath_Log2( b ) );
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f7ff ff6a 	bl	800664c <qFFMath_Log2>
 8006778:	4603      	mov	r3, r0
 800677a:	6839      	ldr	r1, [r7, #0]
 800677c:	4618      	mov	r0, r3
 800677e:	f7fa fab9 	bl	8000cf4 <__aeabi_fmul>
 8006782:	4603      	mov	r3, r0
 8006784:	4618      	mov	r0, r3
 8006786:	f7ff fef7 	bl	8006578 <qFFMath_Exp2>
 800678a:	4603      	mov	r3, r0
}
 800678c:	4618      	mov	r0, r3
 800678e:	3708      	adds	r7, #8
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}

08006794 <qFIS_SetParameter>:

/*============================================================================*/
int qFIS_SetParameter( qFIS_t * const f,
                       const qFIS_Parameter_t p,
                       const qFIS_ParamValue_t x )
{
 8006794:	b480      	push	{r7}
 8006796:	b085      	sub	sp, #20
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
 800679c:	460b      	mov	r3, r1
 800679e:	70fb      	strb	r3, [r7, #3]
 80067a0:	4613      	mov	r3, r2
 80067a2:	70bb      	strb	r3, [r7, #2]
    int retVal = 0;
 80067a4:	2300      	movs	r3, #0
 80067a6:	60fb      	str	r3, [r7, #12]
    typedef float (*methods_fcn)( const float a, const float b );
    static const methods_fcn method[ 5 ] = { &qFIS_Min, &qFIS_Prod, &qFIS_Max,
                                             &qFIS_ProbOR, &qFIS_Sum
                                           };

    if ( NULL != f ) {
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d04f      	beq.n	800684e <qFIS_SetParameter+0xba>
        switch ( p ) {
 80067ae:	78fb      	ldrb	r3, [r7, #3]
 80067b0:	2b04      	cmp	r3, #4
 80067b2:	d84e      	bhi.n	8006852 <qFIS_SetParameter+0xbe>
 80067b4:	a201      	add	r2, pc, #4	; (adr r2, 80067bc <qFIS_SetParameter+0x28>)
 80067b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ba:	bf00      	nop
 80067bc:	080067d1 	.word	0x080067d1
 80067c0:	080067e9 	.word	0x080067e9
 80067c4:	08006807 	.word	0x08006807
 80067c8:	0800681f 	.word	0x0800681f
 80067cc:	0800683d 	.word	0x0800683d
            case qFIS_Implication:
                if ( x <= qFIS_PROD ) {
 80067d0:	78bb      	ldrb	r3, [r7, #2]
 80067d2:	2b01      	cmp	r3, #1
 80067d4:	d83f      	bhi.n	8006856 <qFIS_SetParameter+0xc2>
                    f->implicate = method[ x ];
 80067d6:	78bb      	ldrb	r3, [r7, #2]
 80067d8:	4a26      	ldr	r2, [pc, #152]	; (8006874 <qFIS_SetParameter+0xe0>)
 80067da:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	619a      	str	r2, [r3, #24]
                    retVal = 1;
 80067e2:	2301      	movs	r3, #1
 80067e4:	60fb      	str	r3, [r7, #12]
                }
                break;
 80067e6:	e036      	b.n	8006856 <qFIS_SetParameter+0xc2>
            case qFIS_Aggregation:
                if ( ( x >= qFIS_MAX ) && ( x <= qFIS_SUM ) ) {
 80067e8:	78bb      	ldrb	r3, [r7, #2]
 80067ea:	2b01      	cmp	r3, #1
 80067ec:	d935      	bls.n	800685a <qFIS_SetParameter+0xc6>
 80067ee:	78bb      	ldrb	r3, [r7, #2]
 80067f0:	2b04      	cmp	r3, #4
 80067f2:	d832      	bhi.n	800685a <qFIS_SetParameter+0xc6>
                    f->aggregate = method[ x ];
 80067f4:	78bb      	ldrb	r3, [r7, #2]
 80067f6:	4a1f      	ldr	r2, [pc, #124]	; (8006874 <qFIS_SetParameter+0xe0>)
 80067f8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	61da      	str	r2, [r3, #28]
                    retVal = 1;
 8006800:	2301      	movs	r3, #1
 8006802:	60fb      	str	r3, [r7, #12]
                }
                break;
 8006804:	e029      	b.n	800685a <qFIS_SetParameter+0xc6>
            case qFIS_AND:
                if ( x <= qFIS_PROD ) {
 8006806:	78bb      	ldrb	r3, [r7, #2]
 8006808:	2b01      	cmp	r3, #1
 800680a:	d828      	bhi.n	800685e <qFIS_SetParameter+0xca>
                    f->andOp = method[ x ];
 800680c:	78bb      	ldrb	r3, [r7, #2]
 800680e:	4a19      	ldr	r2, [pc, #100]	; (8006874 <qFIS_SetParameter+0xe0>)
 8006810:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	611a      	str	r2, [r3, #16]
                    retVal = 1;
 8006818:	2301      	movs	r3, #1
 800681a:	60fb      	str	r3, [r7, #12]
                }
                break;
 800681c:	e01f      	b.n	800685e <qFIS_SetParameter+0xca>
            case qFIS_OR:
                if ( ( x >= qFIS_MAX ) && ( x <= qFIS_PROBOR ) ) {
 800681e:	78bb      	ldrb	r3, [r7, #2]
 8006820:	2b01      	cmp	r3, #1
 8006822:	d91e      	bls.n	8006862 <qFIS_SetParameter+0xce>
 8006824:	78bb      	ldrb	r3, [r7, #2]
 8006826:	2b03      	cmp	r3, #3
 8006828:	d81b      	bhi.n	8006862 <qFIS_SetParameter+0xce>
                    f->orOp = method[ x ];
 800682a:	78bb      	ldrb	r3, [r7, #2]
 800682c:	4a11      	ldr	r2, [pc, #68]	; (8006874 <qFIS_SetParameter+0xe0>)
 800682e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	615a      	str	r2, [r3, #20]
                    retVal = 1;
 8006836:	2301      	movs	r3, #1
 8006838:	60fb      	str	r3, [r7, #12]
                }
                break;
 800683a:	e012      	b.n	8006862 <qFIS_SetParameter+0xce>
            case qFIS_EvalPoints:
                if ( (int)x >= 20 ) {
 800683c:	78bb      	ldrb	r3, [r7, #2]
 800683e:	2b13      	cmp	r3, #19
 8006840:	d911      	bls.n	8006866 <qFIS_SetParameter+0xd2>
                    f->nPoints = (size_t)x;
 8006842:	78ba      	ldrb	r2, [r7, #2]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	64da      	str	r2, [r3, #76]	; 0x4c
                    retVal = 1;
 8006848:	2301      	movs	r3, #1
 800684a:	60fb      	str	r3, [r7, #12]
                }
                break;
 800684c:	e00b      	b.n	8006866 <qFIS_SetParameter+0xd2>
            default:
                break;
        }
    }
 800684e:	bf00      	nop
 8006850:	e00a      	b.n	8006868 <qFIS_SetParameter+0xd4>
                break;
 8006852:	bf00      	nop
 8006854:	e008      	b.n	8006868 <qFIS_SetParameter+0xd4>
                break;
 8006856:	bf00      	nop
 8006858:	e006      	b.n	8006868 <qFIS_SetParameter+0xd4>
                break;
 800685a:	bf00      	nop
 800685c:	e004      	b.n	8006868 <qFIS_SetParameter+0xd4>
                break;
 800685e:	bf00      	nop
 8006860:	e002      	b.n	8006868 <qFIS_SetParameter+0xd4>
                break;
 8006862:	bf00      	nop
 8006864:	e000      	b.n	8006868 <qFIS_SetParameter+0xd4>
                break;
 8006866:	bf00      	nop

    return retVal;
 8006868:	68fb      	ldr	r3, [r7, #12]
}
 800686a:	4618      	mov	r0, r3
 800686c:	3714      	adds	r7, #20
 800686e:	46bd      	mov	sp, r7
 8006870:	bc80      	pop	{r7}
 8006872:	4770      	bx	lr
 8006874:	0800a0fc 	.word	0x0800a0fc

08006878 <qFIS_Setup>:
                qFIS_MF_t *const mf_outputs,
                const size_t nmo,
                const qFIS_Rules_t * const r,
                float *wi,
                const size_t n )
{
 8006878:	b5b0      	push	{r4, r5, r7, lr}
 800687a:	b086      	sub	sp, #24
 800687c:	af00      	add	r7, sp, #0
 800687e:	60f8      	str	r0, [r7, #12]
 8006880:	607a      	str	r2, [r7, #4]
 8006882:	603b      	str	r3, [r7, #0]
 8006884:	460b      	mov	r3, r1
 8006886:	72fb      	strb	r3, [r7, #11]
    int retVal = 0;
 8006888:	2300      	movs	r3, #0
 800688a:	617b      	str	r3, [r7, #20]

    if ( ( NULL != f ) && ( t <= Tsukamoto ) && ( NULL != r ) && ( NULL != wi ) ) {
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2b00      	cmp	r3, #0
 8006890:	f000 80bb 	beq.w	8006a0a <qFIS_Setup+0x192>
 8006894:	7afb      	ldrb	r3, [r7, #11]
 8006896:	2b02      	cmp	r3, #2
 8006898:	f200 80b7 	bhi.w	8006a0a <qFIS_Setup+0x192>
 800689c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800689e:	2b00      	cmp	r3, #0
 80068a0:	f000 80b3 	beq.w	8006a0a <qFIS_Setup+0x192>
 80068a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	f000 80af 	beq.w	8006a0a <qFIS_Setup+0x192>
        size_t i;

        f->nInputs = ni/sizeof(qFIS_Input_t);
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	4a59      	ldr	r2, [pc, #356]	; (8006a14 <qFIS_Setup+0x19c>)
 80068b0:	fba2 2303 	umull	r2, r3, r2, r3
 80068b4:	08da      	lsrs	r2, r3, #3
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	63da      	str	r2, [r3, #60]	; 0x3c
        f->nOutputs = no/sizeof(qFIS_Output_t);
 80068ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068bc:	4a56      	ldr	r2, [pc, #344]	; (8006a18 <qFIS_Setup+0x1a0>)
 80068be:	fba2 2303 	umull	r2, r3, r2, r3
 80068c2:	091a      	lsrs	r2, r3, #4
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	641a      	str	r2, [r3, #64]	; 0x40
        f->nMFInputs = nmi/sizeof(qFIS_MF_t);
 80068c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068ca:	4a54      	ldr	r2, [pc, #336]	; (8006a1c <qFIS_Setup+0x1a4>)
 80068cc:	fba2 2303 	umull	r2, r3, r2, r3
 80068d0:	091a      	lsrs	r2, r3, #4
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	645a      	str	r2, [r3, #68]	; 0x44
        f->nMFOutputs = nmo/sizeof(qFIS_MF_t);
 80068d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068d8:	4a50      	ldr	r2, [pc, #320]	; (8006a1c <qFIS_Setup+0x1a4>)
 80068da:	fba2 2303 	umull	r2, r3, r2, r3
 80068de:	091a      	lsrs	r2, r3, #4
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	649a      	str	r2, [r3, #72]	; 0x48
        f->input = inputs;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	687a      	ldr	r2, [r7, #4]
 80068e8:	601a      	str	r2, [r3, #0]
        f->output = outputs;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068ee:	605a      	str	r2, [r3, #4]
        f->inMF = mf_inputs;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068f4:	609a      	str	r2, [r3, #8]
        f->outMF = mf_outputs;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80068fa:	60da      	str	r2, [r3, #12]
        f->wi = wi;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006900:	631a      	str	r2, [r3, #48]	; 0x30
        f->rules = r;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006906:	635a      	str	r2, [r3, #52]	; 0x34
        f->nRules = n;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800690c:	651a      	str	r2, [r3, #80]	; 0x50
        f->type = t;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	7afa      	ldrb	r2, [r7, #11]
 8006912:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
        retVal += qFIS_SetParameter( f, qFIS_EvalPoints, (qFIS_ParamValue_t)100 );
 8006916:	2264      	movs	r2, #100	; 0x64
 8006918:	2104      	movs	r1, #4
 800691a:	68f8      	ldr	r0, [r7, #12]
 800691c:	f7ff ff3a 	bl	8006794 <qFIS_SetParameter>
 8006920:	4602      	mov	r2, r0
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	4413      	add	r3, r2
 8006926:	617b      	str	r3, [r7, #20]
        retVal += qFIS_SetParameter( f, qFIS_AND, qFIS_MIN );
 8006928:	2200      	movs	r2, #0
 800692a:	2102      	movs	r1, #2
 800692c:	68f8      	ldr	r0, [r7, #12]
 800692e:	f7ff ff31 	bl	8006794 <qFIS_SetParameter>
 8006932:	4602      	mov	r2, r0
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	4413      	add	r3, r2
 8006938:	617b      	str	r3, [r7, #20]
        retVal += qFIS_SetParameter( f, qFIS_OR, qFIS_MAX );
 800693a:	2202      	movs	r2, #2
 800693c:	2103      	movs	r1, #3
 800693e:	68f8      	ldr	r0, [r7, #12]
 8006940:	f7ff ff28 	bl	8006794 <qFIS_SetParameter>
 8006944:	4602      	mov	r2, r0
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	4413      	add	r3, r2
 800694a:	617b      	str	r3, [r7, #20]
        retVal += qFIS_SetParameter( f, qFIS_Implication, qFIS_MIN );
 800694c:	2200      	movs	r2, #0
 800694e:	2100      	movs	r1, #0
 8006950:	68f8      	ldr	r0, [r7, #12]
 8006952:	f7ff ff1f 	bl	8006794 <qFIS_SetParameter>
 8006956:	4602      	mov	r2, r0
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	4413      	add	r3, r2
 800695c:	617b      	str	r3, [r7, #20]
        retVal += qFIS_SetParameter( f, qFIS_Aggregation, qFIS_MAX );
 800695e:	2202      	movs	r2, #2
 8006960:	2101      	movs	r1, #1
 8006962:	68f8      	ldr	r0, [r7, #12]
 8006964:	f7ff ff16 	bl	8006794 <qFIS_SetParameter>
 8006968:	4602      	mov	r2, r0
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	4413      	add	r3, r2
 800696e:	617b      	str	r3, [r7, #20]
        retVal = ( 5 == retVal ) ? 1 : 0;
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	2b05      	cmp	r3, #5
 8006974:	bf0c      	ite	eq
 8006976:	2301      	moveq	r3, #1
 8006978:	2300      	movne	r3, #0
 800697a:	b2db      	uxtb	r3, r3
 800697c:	617b      	str	r3, [r7, #20]
        f->deFuzz = ( Mamdani == t ) ? &qFIS_DeFuzz_Centroid
                                     : &qFIS_DeFuzz_WtAverage;
 800697e:	7afb      	ldrb	r3, [r7, #11]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d101      	bne.n	8006988 <qFIS_Setup+0x110>
 8006984:	4a26      	ldr	r2, [pc, #152]	; (8006a20 <qFIS_Setup+0x1a8>)
 8006986:	e000      	b.n	800698a <qFIS_Setup+0x112>
 8006988:	4a26      	ldr	r2, [pc, #152]	; (8006a24 <qFIS_Setup+0x1ac>)
        f->deFuzz = ( Mamdani == t ) ? &qFIS_DeFuzz_Centroid
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	629a      	str	r2, [r3, #40]	; 0x28
        f->ruleWeight = NULL;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	2200      	movs	r2, #0
 8006992:	62da      	str	r2, [r3, #44]	; 0x2c
        for ( i = 0 ; i < f->nOutputs ; ++i ) {
 8006994:	2300      	movs	r3, #0
 8006996:	613b      	str	r3, [r7, #16]
 8006998:	e032      	b.n	8006a00 <qFIS_Setup+0x188>
            /*cstat -CERT-FLP36-C*/
            f->output[ i ].res = ( f->output[ i ].b.max - f->output[ i ].b.min )/(float)f->nPoints;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	685a      	ldr	r2, [r3, #4]
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	2134      	movs	r1, #52	; 0x34
 80069a2:	fb01 f303 	mul.w	r3, r1, r3
 80069a6:	4413      	add	r3, r2
 80069a8:	6858      	ldr	r0, [r3, #4]
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	685a      	ldr	r2, [r3, #4]
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	2134      	movs	r1, #52	; 0x34
 80069b2:	fb01 f303 	mul.w	r3, r1, r3
 80069b6:	4413      	add	r3, r2
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4619      	mov	r1, r3
 80069bc:	f7fa f890 	bl	8000ae0 <__aeabi_fsub>
 80069c0:	4603      	mov	r3, r0
 80069c2:	461d      	mov	r5, r3
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069c8:	4618      	mov	r0, r3
 80069ca:	f7fa f93b 	bl	8000c44 <__aeabi_ui2f>
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	685a      	ldr	r2, [r3, #4]
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	2134      	movs	r1, #52	; 0x34
 80069d6:	fb01 f303 	mul.w	r3, r1, r3
 80069da:	18d4      	adds	r4, r2, r3
 80069dc:	4601      	mov	r1, r0
 80069de:	4628      	mov	r0, r5
 80069e0:	f7fa fa3c 	bl	8000e5c <__aeabi_fdiv>
 80069e4:	4603      	mov	r3, r0
 80069e6:	60e3      	str	r3, [r4, #12]
            /*cstat +CERT-FLP36-C*/
            f->output[ i ].owner = f;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	685a      	ldr	r2, [r3, #4]
 80069ec:	693b      	ldr	r3, [r7, #16]
 80069ee:	2134      	movs	r1, #52	; 0x34
 80069f0:	fb01 f303 	mul.w	r3, r1, r3
 80069f4:	4413      	add	r3, r2
 80069f6:	68fa      	ldr	r2, [r7, #12]
 80069f8:	629a      	str	r2, [r3, #40]	; 0x28
        for ( i = 0 ; i < f->nOutputs ; ++i ) {
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	3301      	adds	r3, #1
 80069fe:	613b      	str	r3, [r7, #16]
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a04:	693a      	ldr	r2, [r7, #16]
 8006a06:	429a      	cmp	r2, r3
 8006a08:	d3c7      	bcc.n	800699a <qFIS_Setup+0x122>
        }
    }

    return retVal;
 8006a0a:	697b      	ldr	r3, [r7, #20]
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	3718      	adds	r7, #24
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bdb0      	pop	{r4, r5, r7, pc}
 8006a14:	aaaaaaab 	.word	0xaaaaaaab
 8006a18:	4ec4ec4f 	.word	0x4ec4ec4f
 8006a1c:	cccccccd 	.word	0xcccccccd
 8006a20:	08007295 	.word	0x08007295
 8006a24:	08007329 	.word	0x08007329

08006a28 <qFIS_InputSetup>:
/*============================================================================*/
int qFIS_InputSetup( qFIS_Input_t * const v,
                     const qFIS_Tag_t t,
                     const float min,
                     const float max )
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b087      	sub	sp, #28
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	60f8      	str	r0, [r7, #12]
 8006a30:	60b9      	str	r1, [r7, #8]
 8006a32:	607a      	str	r2, [r7, #4]
 8006a34:	603b      	str	r3, [r7, #0]
    int retVal = 0;
 8006a36:	2300      	movs	r3, #0
 8006a38:	617b      	str	r3, [r7, #20]

    if ( ( NULL != v ) && ( t >= 0 ) ) {
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d018      	beq.n	8006a72 <qFIS_InputSetup+0x4a>
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	db15      	blt.n	8006a72 <qFIS_InputSetup+0x4a>
        v[ t ].b.min = min;
 8006a46:	68ba      	ldr	r2, [r7, #8]
 8006a48:	4613      	mov	r3, r2
 8006a4a:	005b      	lsls	r3, r3, #1
 8006a4c:	4413      	add	r3, r2
 8006a4e:	009b      	lsls	r3, r3, #2
 8006a50:	461a      	mov	r2, r3
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	4413      	add	r3, r2
 8006a56:	687a      	ldr	r2, [r7, #4]
 8006a58:	601a      	str	r2, [r3, #0]
        v[ t ].b.max = max;
 8006a5a:	68ba      	ldr	r2, [r7, #8]
 8006a5c:	4613      	mov	r3, r2
 8006a5e:	005b      	lsls	r3, r3, #1
 8006a60:	4413      	add	r3, r2
 8006a62:	009b      	lsls	r3, r3, #2
 8006a64:	461a      	mov	r2, r3
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	4413      	add	r3, r2
 8006a6a:	683a      	ldr	r2, [r7, #0]
 8006a6c:	605a      	str	r2, [r3, #4]
        retVal = 1;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	617b      	str	r3, [r7, #20]
    }

    return retVal;
 8006a72:	697b      	ldr	r3, [r7, #20]
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	371c      	adds	r7, #28
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bc80      	pop	{r7}
 8006a7c:	4770      	bx	lr

08006a7e <qFIS_OutputSetup>:
/*============================================================================*/
int qFIS_OutputSetup( qFIS_Output_t * const v,
                      const qFIS_Tag_t t,
                      const float min,
                      const float max )
{
 8006a7e:	b480      	push	{r7}
 8006a80:	b087      	sub	sp, #28
 8006a82:	af00      	add	r7, sp, #0
 8006a84:	60f8      	str	r0, [r7, #12]
 8006a86:	60b9      	str	r1, [r7, #8]
 8006a88:	607a      	str	r2, [r7, #4]
 8006a8a:	603b      	str	r3, [r7, #0]
    int retVal = 0;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	617b      	str	r3, [r7, #20]

    if ( ( NULL != v ) && ( t >= 0 ) ) {
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d05a      	beq.n	8006b4c <qFIS_OutputSetup+0xce>
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	db57      	blt.n	8006b4c <qFIS_OutputSetup+0xce>
        v[ t ].data[ 0 ] = 0.0f;
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	2234      	movs	r2, #52	; 0x34
 8006aa0:	fb02 f303 	mul.w	r3, r2, r3
 8006aa4:	68fa      	ldr	r2, [r7, #12]
 8006aa6:	4413      	add	r3, r2
 8006aa8:	f04f 0200 	mov.w	r2, #0
 8006aac:	619a      	str	r2, [r3, #24]
        v[ t ].data[ 1 ] = 0.0f;
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	2234      	movs	r2, #52	; 0x34
 8006ab2:	fb02 f303 	mul.w	r3, r2, r3
 8006ab6:	68fa      	ldr	r2, [r7, #12]
 8006ab8:	4413      	add	r3, r2
 8006aba:	f04f 0200 	mov.w	r2, #0
 8006abe:	61da      	str	r2, [r3, #28]
        v[ t ].data[ 2 ] = 0.0f;
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	2234      	movs	r2, #52	; 0x34
 8006ac4:	fb02 f303 	mul.w	r3, r2, r3
 8006ac8:	68fa      	ldr	r2, [r7, #12]
 8006aca:	4413      	add	r3, r2
 8006acc:	f04f 0200 	mov.w	r2, #0
 8006ad0:	621a      	str	r2, [r3, #32]
        v[ t ].data[ 3 ] = 0.0f;
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	2234      	movs	r2, #52	; 0x34
 8006ad6:	fb02 f303 	mul.w	r3, r2, r3
 8006ada:	68fa      	ldr	r2, [r7, #12]
 8006adc:	4413      	add	r3, r2
 8006ade:	f04f 0200 	mov.w	r2, #0
 8006ae2:	625a      	str	r2, [r3, #36]	; 0x24
        v[ t ].x = 0.0f;
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	2234      	movs	r2, #52	; 0x34
 8006ae8:	fb02 f303 	mul.w	r3, r2, r3
 8006aec:	68fa      	ldr	r2, [r7, #12]
 8006aee:	4413      	add	r3, r2
 8006af0:	f04f 0200 	mov.w	r2, #0
 8006af4:	611a      	str	r2, [r3, #16]
        v[ t ].y = 0.0f;
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	2234      	movs	r2, #52	; 0x34
 8006afa:	fb02 f303 	mul.w	r3, r2, r3
 8006afe:	68fa      	ldr	r2, [r7, #12]
 8006b00:	4413      	add	r3, r2
 8006b02:	f04f 0200 	mov.w	r2, #0
 8006b06:	615a      	str	r2, [r3, #20]
        v[ t ].b.min = min;
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	2234      	movs	r2, #52	; 0x34
 8006b0c:	fb02 f303 	mul.w	r3, r2, r3
 8006b10:	68fa      	ldr	r2, [r7, #12]
 8006b12:	4413      	add	r3, r2
 8006b14:	687a      	ldr	r2, [r7, #4]
 8006b16:	601a      	str	r2, [r3, #0]
        v[ t ].b.max = max;
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	2234      	movs	r2, #52	; 0x34
 8006b1c:	fb02 f303 	mul.w	r3, r2, r3
 8006b20:	68fa      	ldr	r2, [r7, #12]
 8006b22:	4413      	add	r3, r2
 8006b24:	683a      	ldr	r2, [r7, #0]
 8006b26:	605a      	str	r2, [r3, #4]
        v[ t ].xag = NULL;
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	2234      	movs	r2, #52	; 0x34
 8006b2c:	fb02 f303 	mul.w	r3, r2, r3
 8006b30:	68fa      	ldr	r2, [r7, #12]
 8006b32:	4413      	add	r3, r2
 8006b34:	2200      	movs	r2, #0
 8006b36:	62da      	str	r2, [r3, #44]	; 0x2c
        v[ t ].yag = NULL;
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	2234      	movs	r2, #52	; 0x34
 8006b3c:	fb02 f303 	mul.w	r3, r2, r3
 8006b40:	68fa      	ldr	r2, [r7, #12]
 8006b42:	4413      	add	r3, r2
 8006b44:	2200      	movs	r2, #0
 8006b46:	631a      	str	r2, [r3, #48]	; 0x30
        retVal = 1;
 8006b48:	2301      	movs	r3, #1
 8006b4a:	617b      	str	r3, [r7, #20]
    }

    return retVal;
 8006b4c:	697b      	ldr	r3, [r7, #20]
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	371c      	adds	r7, #28
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bc80      	pop	{r7}
 8006b56:	4770      	bx	lr

08006b58 <qFIS_SetInput>:
/*============================================================================*/
int qFIS_SetInput( qFIS_Input_t * const v,
                   const qFIS_Tag_t t,
                   const float value )
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b087      	sub	sp, #28
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	60f8      	str	r0, [r7, #12]
 8006b60:	60b9      	str	r1, [r7, #8]
 8006b62:	607a      	str	r2, [r7, #4]
    int retVal = 0;
 8006b64:	2300      	movs	r3, #0
 8006b66:	617b      	str	r3, [r7, #20]

    if ( ( NULL != v ) && ( t >= 0 ) ) {
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d00e      	beq.n	8006b8c <qFIS_SetInput+0x34>
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	db0b      	blt.n	8006b8c <qFIS_SetInput+0x34>
        v[ t ].b.value = value;
 8006b74:	68ba      	ldr	r2, [r7, #8]
 8006b76:	4613      	mov	r3, r2
 8006b78:	005b      	lsls	r3, r3, #1
 8006b7a:	4413      	add	r3, r2
 8006b7c:	009b      	lsls	r3, r3, #2
 8006b7e:	461a      	mov	r2, r3
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	4413      	add	r3, r2
 8006b84:	687a      	ldr	r2, [r7, #4]
 8006b86:	609a      	str	r2, [r3, #8]
        retVal = 1;
 8006b88:	2301      	movs	r3, #1
 8006b8a:	617b      	str	r3, [r7, #20]
    }

    return retVal;
 8006b8c:	697b      	ldr	r3, [r7, #20]
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	371c      	adds	r7, #28
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bc80      	pop	{r7}
 8006b96:	4770      	bx	lr

08006b98 <qFIS_GetOutput>:
/*============================================================================*/
float qFIS_GetOutput( const qFIS_Output_t * const v,
                      const qFIS_Tag_t t )
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b085      	sub	sp, #20
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	6039      	str	r1, [r7, #0]
    float retVal = 0.0f;
 8006ba2:	f04f 0300 	mov.w	r3, #0
 8006ba6:	60fb      	str	r3, [r7, #12]

    if ( ( NULL != v ) && ( t >= 0 ) ) {
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d00a      	beq.n	8006bc4 <qFIS_GetOutput+0x2c>
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	db07      	blt.n	8006bc4 <qFIS_GetOutput+0x2c>
        retVal = v[ t ].b.value;
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	2234      	movs	r2, #52	; 0x34
 8006bb8:	fb02 f303 	mul.w	r3, r2, r3
 8006bbc:	687a      	ldr	r2, [r7, #4]
 8006bbe:	4413      	add	r3, r2
 8006bc0:	689b      	ldr	r3, [r3, #8]
 8006bc2:	60fb      	str	r3, [r7, #12]
    }

    return retVal;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3714      	adds	r7, #20
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bc80      	pop	{r7}
 8006bce:	4770      	bx	lr

08006bd0 <qFIS_SetMF>:
                const qFIS_Tag_t mf,
                const qFIS_MF_Name_t s,
                qFIS_MF_Fcn_t custom_mf,
                const float *cp,
                float h )
{
 8006bd0:	b590      	push	{r4, r7, lr}
 8006bd2:	b087      	sub	sp, #28
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	60f8      	str	r0, [r7, #12]
 8006bd8:	60b9      	str	r1, [r7, #8]
 8006bda:	607a      	str	r2, [r7, #4]
 8006bdc:	70fb      	strb	r3, [r7, #3]
    int retVal = 0;
 8006bde:	2300      	movs	r3, #0
 8006be0:	617b      	str	r3, [r7, #20]
    /* Only for Tsukamoto consequents*/
    &qFIS_TLinSMF, &qFIS_TLinZMF, &qFIS_TConcaveMF,&qFIS_TSigMF, &qFIS_TSMF,
    &qFIS_TZMF
    };

    if ( ( NULL != m ) && ( io >= 0 ) && ( mf >= 0 ) && ( s < _NUM_MFS ) ) {
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d055      	beq.n	8006c94 <qFIS_SetMF+0xc4>
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	db52      	blt.n	8006c94 <qFIS_SetMF+0xc4>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	db4f      	blt.n	8006c94 <qFIS_SetMF+0xc4>
 8006bf4:	78fb      	ldrb	r3, [r7, #3]
 8006bf6:	2b1a      	cmp	r3, #26
 8006bf8:	d84c      	bhi.n	8006c94 <qFIS_SetMF+0xc4>
        if ( NULL != custom_mf ) {
 8006bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d00a      	beq.n	8006c16 <qFIS_SetMF+0x46>
            m[ mf ].shape = custom_mf; /*user-defined membership function*/
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	4613      	mov	r3, r2
 8006c04:	009b      	lsls	r3, r3, #2
 8006c06:	4413      	add	r3, r2
 8006c08:	009b      	lsls	r3, r3, #2
 8006c0a:	461a      	mov	r2, r3
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	4413      	add	r3, r2
 8006c10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c12:	601a      	str	r2, [r3, #0]
 8006c14:	e00c      	b.n	8006c30 <qFIS_SetMF+0x60>
        }
        else {
            m[ mf ].shape = fShape[ s ];
 8006c16:	78f9      	ldrb	r1, [r7, #3]
 8006c18:	687a      	ldr	r2, [r7, #4]
 8006c1a:	4613      	mov	r3, r2
 8006c1c:	009b      	lsls	r3, r3, #2
 8006c1e:	4413      	add	r3, r2
 8006c20:	009b      	lsls	r3, r3, #2
 8006c22:	461a      	mov	r2, r3
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	4413      	add	r3, r2
 8006c28:	4a1d      	ldr	r2, [pc, #116]	; (8006ca0 <qFIS_SetMF+0xd0>)
 8006c2a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8006c2e:	601a      	str	r2, [r3, #0]
        }
        m[ mf ].index = (size_t)io;
 8006c30:	687a      	ldr	r2, [r7, #4]
 8006c32:	4613      	mov	r3, r2
 8006c34:	009b      	lsls	r3, r3, #2
 8006c36:	4413      	add	r3, r2
 8006c38:	009b      	lsls	r3, r3, #2
 8006c3a:	461a      	mov	r2, r3
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	4413      	add	r3, r2
 8006c40:	68ba      	ldr	r2, [r7, #8]
 8006c42:	611a      	str	r2, [r3, #16]
        m[ mf ].points = cp;
 8006c44:	687a      	ldr	r2, [r7, #4]
 8006c46:	4613      	mov	r3, r2
 8006c48:	009b      	lsls	r3, r3, #2
 8006c4a:	4413      	add	r3, r2
 8006c4c:	009b      	lsls	r3, r3, #2
 8006c4e:	461a      	mov	r2, r3
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	4413      	add	r3, r2
 8006c54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c56:	605a      	str	r2, [r3, #4]
        m[ mf ].fx = 0.0f;
 8006c58:	687a      	ldr	r2, [r7, #4]
 8006c5a:	4613      	mov	r3, r2
 8006c5c:	009b      	lsls	r3, r3, #2
 8006c5e:	4413      	add	r3, r2
 8006c60:	009b      	lsls	r3, r3, #2
 8006c62:	461a      	mov	r2, r3
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	4413      	add	r3, r2
 8006c68:	f04f 0200 	mov.w	r2, #0
 8006c6c:	609a      	str	r2, [r3, #8]
        m[ mf ].h = qFIS_Bound( h, 0.0f, 1.0f );
 8006c6e:	687a      	ldr	r2, [r7, #4]
 8006c70:	4613      	mov	r3, r2
 8006c72:	009b      	lsls	r3, r3, #2
 8006c74:	4413      	add	r3, r2
 8006c76:	009b      	lsls	r3, r3, #2
 8006c78:	461a      	mov	r2, r3
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	189c      	adds	r4, r3, r2
 8006c7e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8006c82:	f04f 0100 	mov.w	r1, #0
 8006c86:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c88:	f001 fcd3 	bl	8008632 <qFIS_Bound>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	60e3      	str	r3, [r4, #12]
        retVal = 1;
 8006c90:	2301      	movs	r3, #1
 8006c92:	617b      	str	r3, [r7, #20]
    }

    return retVal;
 8006c94:	697b      	ldr	r3, [r7, #20]
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	371c      	adds	r7, #28
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd90      	pop	{r4, r7, pc}
 8006c9e:	bf00      	nop
 8006ca0:	0800a110 	.word	0x0800a110

08006ca4 <qFIS_EvalInputMFs>:

    return retVal;
}
/*============================================================================*/
static void qFIS_EvalInputMFs( qFIS_t * const f )
{
 8006ca4:	b5b0      	push	{r4, r5, r7, lr}
 8006ca6:	b084      	sub	sp, #16
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
    size_t i;
    qFIS_MF_t *mf;

    for ( i = 0 ; i < f->nMFInputs ; ++i ) {
 8006cac:	2300      	movs	r3, #0
 8006cae:	60fb      	str	r3, [r7, #12]
 8006cb0:	e026      	b.n	8006d00 <qFIS_EvalInputMFs+0x5c>
        mf = &f->inMF[ i ];
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6899      	ldr	r1, [r3, #8]
 8006cb6:	68fa      	ldr	r2, [r7, #12]
 8006cb8:	4613      	mov	r3, r2
 8006cba:	009b      	lsls	r3, r3, #2
 8006cbc:	4413      	add	r3, r2
 8006cbe:	009b      	lsls	r3, r3, #2
 8006cc0:	440b      	add	r3, r1
 8006cc2:	60bb      	str	r3, [r7, #8]
        /*cstat -MISRAC2012-Rule-11.3 -CERT-EXP39-C_d*/
        mf->fx = mf->h*mf->shape( (qFIS_IO_Base_t*)&f->input[ mf->index ],
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	68dd      	ldr	r5, [r3, #12]
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	681c      	ldr	r4, [r3, #0]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6819      	ldr	r1, [r3, #0]
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	691a      	ldr	r2, [r3, #16]
 8006cd4:	4613      	mov	r3, r2
 8006cd6:	005b      	lsls	r3, r3, #1
 8006cd8:	4413      	add	r3, r2
 8006cda:	009b      	lsls	r3, r3, #2
 8006cdc:	18c8      	adds	r0, r1, r3
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	4619      	mov	r1, r3
 8006ce6:	47a0      	blx	r4
 8006ce8:	4603      	mov	r3, r0
 8006cea:	4619      	mov	r1, r3
 8006cec:	4628      	mov	r0, r5
 8006cee:	f7fa f801 	bl	8000cf4 <__aeabi_fmul>
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	461a      	mov	r2, r3
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	609a      	str	r2, [r3, #8]
    for ( i = 0 ; i < f->nMFInputs ; ++i ) {
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	3301      	adds	r3, #1
 8006cfe:	60fb      	str	r3, [r7, #12]
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d04:	68fa      	ldr	r2, [r7, #12]
 8006d06:	429a      	cmp	r2, r3
 8006d08:	d3d3      	bcc.n	8006cb2 <qFIS_EvalInputMFs+0xe>
                                  mf->points,
                                  1u );
        /*cstat +MISRAC2012-Rule-11.3 +CERT-EXP39-C_d*/
    }
}
 8006d0a:	bf00      	nop
 8006d0c:	3710      	adds	r7, #16
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bdb0      	pop	{r4, r5, r7, pc}

08006d12 <qFIS_TruncateInputs>:
/*============================================================================*/
static void qFIS_TruncateInputs( qFIS_t * const f )
{
 8006d12:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d14:	b085      	sub	sp, #20
 8006d16:	af00      	add	r7, sp, #0
 8006d18:	6078      	str	r0, [r7, #4]
    size_t i;

    for ( i = 0 ; i < f->nInputs ; ++i ) {
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	60fb      	str	r3, [r7, #12]
 8006d1e:	e02b      	b.n	8006d78 <qFIS_TruncateInputs+0x66>
        f->input[ i ].b.value = qFIS_Bound( f->input[ i ].b.value,
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6819      	ldr	r1, [r3, #0]
 8006d24:	68fa      	ldr	r2, [r7, #12]
 8006d26:	4613      	mov	r3, r2
 8006d28:	005b      	lsls	r3, r3, #1
 8006d2a:	4413      	add	r3, r2
 8006d2c:	009b      	lsls	r3, r3, #2
 8006d2e:	440b      	add	r3, r1
 8006d30:	6898      	ldr	r0, [r3, #8]
                                            f->input[ i ].b.min,
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6819      	ldr	r1, [r3, #0]
 8006d36:	68fa      	ldr	r2, [r7, #12]
 8006d38:	4613      	mov	r3, r2
 8006d3a:	005b      	lsls	r3, r3, #1
 8006d3c:	4413      	add	r3, r2
 8006d3e:	009b      	lsls	r3, r3, #2
 8006d40:	440b      	add	r3, r1
        f->input[ i ].b.value = qFIS_Bound( f->input[ i ].b.value,
 8006d42:	681d      	ldr	r5, [r3, #0]
                                            f->input[ i ].b.max );
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6819      	ldr	r1, [r3, #0]
 8006d48:	68fa      	ldr	r2, [r7, #12]
 8006d4a:	4613      	mov	r3, r2
 8006d4c:	005b      	lsls	r3, r3, #1
 8006d4e:	4413      	add	r3, r2
 8006d50:	009b      	lsls	r3, r3, #2
 8006d52:	440b      	add	r3, r1
        f->input[ i ].b.value = qFIS_Bound( f->input[ i ].b.value,
 8006d54:	685e      	ldr	r6, [r3, #4]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6819      	ldr	r1, [r3, #0]
 8006d5a:	68fa      	ldr	r2, [r7, #12]
 8006d5c:	4613      	mov	r3, r2
 8006d5e:	005b      	lsls	r3, r3, #1
 8006d60:	4413      	add	r3, r2
 8006d62:	009b      	lsls	r3, r3, #2
 8006d64:	18cc      	adds	r4, r1, r3
 8006d66:	4632      	mov	r2, r6
 8006d68:	4629      	mov	r1, r5
 8006d6a:	f001 fc62 	bl	8008632 <qFIS_Bound>
 8006d6e:	4603      	mov	r3, r0
 8006d70:	60a3      	str	r3, [r4, #8]
    for ( i = 0 ; i < f->nInputs ; ++i ) {
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	3301      	adds	r3, #1
 8006d76:	60fb      	str	r3, [r7, #12]
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d7c:	68fa      	ldr	r2, [r7, #12]
 8006d7e:	429a      	cmp	r2, r3
 8006d80:	d3ce      	bcc.n	8006d20 <qFIS_TruncateInputs+0xe>
    }
}
 8006d82:	bf00      	nop
 8006d84:	3714      	adds	r7, #20
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006d8a <qFIS_Fuzzify>:
/*============================================================================*/
int qFIS_Fuzzify( qFIS_t * const f )
{
 8006d8a:	b580      	push	{r7, lr}
 8006d8c:	b084      	sub	sp, #16
 8006d8e:	af00      	add	r7, sp, #0
 8006d90:	6078      	str	r0, [r7, #4]
    int retVal = 0;
 8006d92:	2300      	movs	r3, #0
 8006d94:	60fb      	str	r3, [r7, #12]

    if ( NULL != f ) {
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d007      	beq.n	8006dac <qFIS_Fuzzify+0x22>
        qFIS_TruncateInputs( f );
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f7ff ffb8 	bl	8006d12 <qFIS_TruncateInputs>
        qFIS_EvalInputMFs( f );
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f7ff ff7e 	bl	8006ca4 <qFIS_EvalInputMFs>
        retVal = 1;
 8006da8:	2301      	movs	r3, #1
 8006daa:	60fb      	str	r3, [r7, #12]
    }

    return retVal;
 8006dac:	68fb      	ldr	r3, [r7, #12]
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	3710      	adds	r7, #16
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}

08006db6 <qFIS_ParseFuzzValue>:
/*============================================================================*/
static float qFIS_ParseFuzzValue( qFIS_MF_t * const mfIO,
                                  qFIS_Rules_t index )
{
 8006db6:	b580      	push	{r7, lr}
 8006db8:	b084      	sub	sp, #16
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	6078      	str	r0, [r7, #4]
 8006dbe:	460b      	mov	r3, r1
 8006dc0:	807b      	strh	r3, [r7, #2]
    uint8_t neg = (uint8_t)( index < 0 );
 8006dc2:	887b      	ldrh	r3, [r7, #2]
 8006dc4:	0bdb      	lsrs	r3, r3, #15
 8006dc6:	b2db      	uxtb	r3, r3
 8006dc8:	73fb      	strb	r3, [r7, #15]
    float y;

    if ( 0u != neg ) {
 8006dca:	7bfb      	ldrb	r3, [r7, #15]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d003      	beq.n	8006dd8 <qFIS_ParseFuzzValue+0x22>
        index = -index;
 8006dd0:	887b      	ldrh	r3, [r7, #2]
 8006dd2:	425b      	negs	r3, r3
 8006dd4:	b29b      	uxth	r3, r3
 8006dd6:	807b      	strh	r3, [r7, #2]
    }
    /*cstat -CERT-INT32-C_a*/
    y = qFIS_Bound( mfIO[ index - 1 ].fx, 0.0f, 1.0f );
 8006dd8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8006ddc:	4613      	mov	r3, r2
 8006dde:	009b      	lsls	r3, r3, #2
 8006de0:	4413      	add	r3, r2
 8006de2:	009b      	lsls	r3, r3, #2
 8006de4:	3b14      	subs	r3, #20
 8006de6:	687a      	ldr	r2, [r7, #4]
 8006de8:	4413      	add	r3, r2
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8006df0:	f04f 0100 	mov.w	r1, #0
 8006df4:	4618      	mov	r0, r3
 8006df6:	f001 fc1c 	bl	8008632 <qFIS_Bound>
 8006dfa:	60b8      	str	r0, [r7, #8]
    /*cstat +CERT-INT32-C_a*/
    y = ( 0u != neg ) ? ( 1.0f - y ) : y ;
 8006dfc:	7bfb      	ldrb	r3, [r7, #15]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d006      	beq.n	8006e10 <qFIS_ParseFuzzValue+0x5a>
 8006e02:	68b9      	ldr	r1, [r7, #8]
 8006e04:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8006e08:	f7f9 fe6a 	bl	8000ae0 <__aeabi_fsub>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	e000      	b.n	8006e12 <qFIS_ParseFuzzValue+0x5c>
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	60bb      	str	r3, [r7, #8]

    return y;
 8006e14:	68bb      	ldr	r3, [r7, #8]
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3710      	adds	r7, #16
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}
	...

08006e20 <qFIS_GetFuzzOperator>:
/*============================================================================*/
static qFIS_FuzzyOperator_t qFIS_GetFuzzOperator( const qFIS_t * const f )
{
 8006e20:	b480      	push	{r7}
 8006e22:	b085      	sub	sp, #20
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
    qFIS_FuzzyOperator_t oper;

    switch ( f->lastConnector ) {
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f9b3 305c 	ldrsh.w	r3, [r3, #92]	; 0x5c
 8006e2e:	4a0c      	ldr	r2, [pc, #48]	; (8006e60 <qFIS_GetFuzzOperator+0x40>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d003      	beq.n	8006e3c <qFIS_GetFuzzOperator+0x1c>
 8006e34:	4a0b      	ldr	r2, [pc, #44]	; (8006e64 <qFIS_GetFuzzOperator+0x44>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d004      	beq.n	8006e44 <qFIS_GetFuzzOperator+0x24>
 8006e3a:	e007      	b.n	8006e4c <qFIS_GetFuzzOperator+0x2c>
        case _QFIS_AND:
            oper = f->andOp;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	691b      	ldr	r3, [r3, #16]
 8006e40:	60fb      	str	r3, [r7, #12]
            break;
 8006e42:	e006      	b.n	8006e52 <qFIS_GetFuzzOperator+0x32>
        case _QFIS_OR:
            oper = f->orOp;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	695b      	ldr	r3, [r3, #20]
 8006e48:	60fb      	str	r3, [r7, #12]
            break;
 8006e4a:	e002      	b.n	8006e52 <qFIS_GetFuzzOperator+0x32>
        default: 
            oper = &qFIS_Sum;
 8006e4c:	4b06      	ldr	r3, [pc, #24]	; (8006e68 <qFIS_GetFuzzOperator+0x48>)
 8006e4e:	60fb      	str	r3, [r7, #12]
            break;
 8006e50:	bf00      	nop
    }

    return oper;
 8006e52:	68fb      	ldr	r3, [r7, #12]
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	3714      	adds	r7, #20
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bc80      	pop	{r7}
 8006e5c:	4770      	bx	lr
 8006e5e:	bf00      	nop
 8006e60:	ffff8002 	.word	0xffff8002
 8006e64:	ffff8003 	.word	0xffff8003
 8006e68:	08008607 	.word	0x08008607

08006e6c <qFIS_InferenceAntecedent>:
/*============================================================================*/
static size_t qFIS_InferenceAntecedent( struct _qFIS_s * const f,
                                        size_t i )
{
 8006e6c:	b590      	push	{r4, r7, lr}
 8006e6e:	b087      	sub	sp, #28
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
 8006e74:	6039      	str	r1, [r7, #0]
    int16_t inIndex, MFInIndex, connector;
    qFIS_FuzzyOperator_t op;
    /*cstat -CERT-INT30-C_a*/
    inIndex = f->rules[ i ];
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	005b      	lsls	r3, r3, #1
 8006e7e:	4413      	add	r3, r2
 8006e80:	881b      	ldrh	r3, [r3, #0]
 8006e82:	82fb      	strh	r3, [r7, #22]
    MFInIndex = f->rules[ i + 1u ];
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	3301      	adds	r3, #1
 8006e8c:	005b      	lsls	r3, r3, #1
 8006e8e:	4413      	add	r3, r2
 8006e90:	881b      	ldrh	r3, [r3, #0]
 8006e92:	82bb      	strh	r3, [r7, #20]
    connector = f->rules[ i + 2u ];
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	3302      	adds	r3, #2
 8006e9c:	005b      	lsls	r3, r3, #1
 8006e9e:	4413      	add	r3, r2
 8006ea0:	881b      	ldrh	r3, [r3, #0]
 8006ea2:	827b      	strh	r3, [r7, #18]
    /*cstat -CERT-INT30-C_a*/
    op = qFIS_GetFuzzOperator( f );
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f7ff ffbb 	bl	8006e20 <qFIS_GetFuzzOperator>
 8006eaa:	60f8      	str	r0, [r7, #12]
    f->rStrength = op( f->rStrength, qFIS_ParseFuzzValue( f->inMF, MFInIndex ) );
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6d9c      	ldr	r4, [r3, #88]	; 0x58
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	689b      	ldr	r3, [r3, #8]
 8006eb4:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8006eb8:	4611      	mov	r1, r2
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f7ff ff7b 	bl	8006db6 <qFIS_ParseFuzzValue>
 8006ec0:	4602      	mov	r2, r0
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	4611      	mov	r1, r2
 8006ec6:	4620      	mov	r0, r4
 8006ec8:	4798      	blx	r3
 8006eca:	4602      	mov	r2, r0
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	659a      	str	r2, [r3, #88]	; 0x58

    if ( ( inIndex < 0 ) || ( (size_t)inIndex > f->nInputs ) ) {
 8006ed0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	db05      	blt.n	8006ee4 <qFIS_InferenceAntecedent+0x78>
 8006ed8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	d902      	bls.n	8006eea <qFIS_InferenceAntecedent+0x7e>
        i = QFIS_INFERENCE_ERROR;
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	603b      	str	r3, [r7, #0]
 8006ee8:	e022      	b.n	8006f30 <qFIS_InferenceAntecedent+0xc4>
    }
    else {
        if ( ( _QFIS_AND == connector ) || ( _QFIS_OR == connector ) ) {
 8006eea:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006eee:	4a13      	ldr	r2, [pc, #76]	; (8006f3c <qFIS_InferenceAntecedent+0xd0>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d004      	beq.n	8006efe <qFIS_InferenceAntecedent+0x92>
 8006ef4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006ef8:	4a11      	ldr	r2, [pc, #68]	; (8006f40 <qFIS_InferenceAntecedent+0xd4>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d10a      	bne.n	8006f14 <qFIS_InferenceAntecedent+0xa8>
            f->lastConnector = connector;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	8a7a      	ldrh	r2, [r7, #18]
 8006f02:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
            f->inferenceState = &qFIS_InferenceAntecedent;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	4a0e      	ldr	r2, [pc, #56]	; (8006f44 <qFIS_InferenceAntecedent+0xd8>)
 8006f0a:	621a      	str	r2, [r3, #32]
            i += 2u;
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	3302      	adds	r3, #2
 8006f10:	603b      	str	r3, [r7, #0]
 8006f12:	e00d      	b.n	8006f30 <qFIS_InferenceAntecedent+0xc4>
        }
        else if ( _QFIS_THEN == connector ) {
 8006f14:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006f18:	4a0b      	ldr	r2, [pc, #44]	; (8006f48 <qFIS_InferenceAntecedent+0xdc>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d106      	bne.n	8006f2c <qFIS_InferenceAntecedent+0xc0>
            f->inferenceState = &qFIS_InferenceReachEnd;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	4a0a      	ldr	r2, [pc, #40]	; (8006f4c <qFIS_InferenceAntecedent+0xe0>)
 8006f22:	621a      	str	r2, [r3, #32]
            i += 2u;
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	3302      	adds	r3, #2
 8006f28:	603b      	str	r3, [r7, #0]
 8006f2a:	e001      	b.n	8006f30 <qFIS_InferenceAntecedent+0xc4>
        }
        else {
            i = QFIS_INFERENCE_ERROR;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	603b      	str	r3, [r7, #0]
        }
    }

    return i;
 8006f30:	683b      	ldr	r3, [r7, #0]
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	371c      	adds	r7, #28
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd90      	pop	{r4, r7, pc}
 8006f3a:	bf00      	nop
 8006f3c:	ffff8002 	.word	0xffff8002
 8006f40:	ffff8003 	.word	0xffff8003
 8006f44:	08006e6d 	.word	0x08006e6d
 8006f48:	ffff8004 	.word	0xffff8004
 8006f4c:	08006f51 	.word	0x08006f51

08006f50 <qFIS_InferenceReachEnd>:
/*============================================================================*/
static size_t qFIS_InferenceReachEnd( struct _qFIS_s * const f,
                                      size_t i )
{
 8006f50:	b590      	push	{r4, r7, lr}
 8006f52:	b085      	sub	sp, #20
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
 8006f58:	6039      	str	r1, [r7, #0]
    int16_t  connector;

    connector = ( f->nOutputs > 1u )? f->rules[ i + 2u ] : -1;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f5e:	2b01      	cmp	r3, #1
 8006f60:	d908      	bls.n	8006f74 <qFIS_InferenceReachEnd+0x24>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	3302      	adds	r3, #2
 8006f6a:	005b      	lsls	r3, r3, #1
 8006f6c:	4413      	add	r3, r2
 8006f6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006f72:	e001      	b.n	8006f78 <qFIS_InferenceReachEnd+0x28>
 8006f74:	f04f 33ff 	mov.w	r3, #4294967295
 8006f78:	81fb      	strh	r3, [r7, #14]
    i += 2u;
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	3302      	adds	r3, #2
 8006f7e:	603b      	str	r3, [r7, #0]
    if ( _QFIS_AND != connector ) {
 8006f80:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006f84:	4a23      	ldr	r2, [pc, #140]	; (8007014 <qFIS_InferenceReachEnd+0xc4>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d03f      	beq.n	800700a <qFIS_InferenceReachEnd+0xba>
        f->inferenceState = &qFIS_InferenceAntecedent;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	4a22      	ldr	r2, [pc, #136]	; (8007018 <qFIS_InferenceReachEnd+0xc8>)
 8006f8e:	621a      	str	r2, [r3, #32]
        f->lastConnector = -1;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006f96:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
        f->wi[ f->ruleCount ] = f->rStrength;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fa2:	009b      	lsls	r3, r3, #2
 8006fa4:	4413      	add	r3, r2
 8006fa6:	687a      	ldr	r2, [r7, #4]
 8006fa8:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8006faa:	601a      	str	r2, [r3, #0]
        if ( NULL != f->ruleWeight ) {
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d01e      	beq.n	8006ff2 <qFIS_InferenceReachEnd+0xa2>
            f->wi[ f->ruleCount ] *= qFIS_Bound( f->ruleWeight[ f->ruleCount ], 0.0f, 1.0f );
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fbc:	009b      	lsls	r3, r3, #2
 8006fbe:	4413      	add	r3, r2
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8006fc6:	f04f 0100 	mov.w	r1, #0
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f001 fb31 	bl	8008632 <qFIS_Bound>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fd8:	009b      	lsls	r3, r3, #2
 8006fda:	4413      	add	r3, r2
 8006fdc:	6819      	ldr	r1, [r3, #0]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fe6:	009b      	lsls	r3, r3, #2
 8006fe8:	18d4      	adds	r4, r2, r3
 8006fea:	f7f9 fe83 	bl	8000cf4 <__aeabi_fmul>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	6023      	str	r3, [r4, #0]
        }
        f->rStrength = 0.0f;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f04f 0200 	mov.w	r2, #0
 8006ff8:	659a      	str	r2, [r3, #88]	; 0x58
        ++f->ruleCount;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ffe:	1c5a      	adds	r2, r3, #1
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	655a      	str	r2, [r3, #84]	; 0x54
        --i;
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	3b01      	subs	r3, #1
 8007008:	603b      	str	r3, [r7, #0]
    }

    return i;
 800700a:	683b      	ldr	r3, [r7, #0]
}
 800700c:	4618      	mov	r0, r3
 800700e:	3714      	adds	r7, #20
 8007010:	46bd      	mov	sp, r7
 8007012:	bd90      	pop	{r4, r7, pc}
 8007014:	ffff8002 	.word	0xffff8002
 8007018:	08006e6d 	.word	0x08006e6d

0800701c <qFIS_AggregationFindConsequent>:
/*============================================================================*/
static size_t qFIS_AggregationFindConsequent( struct _qFIS_s * const f,
                                              size_t i )
{
 800701c:	b480      	push	{r7}
 800701e:	b083      	sub	sp, #12
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
 8007024:	6039      	str	r1, [r7, #0]
    while ( _QFIS_THEN != f->rules[ i++ ] ) {}
 8007026:	bf00      	nop
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	1c59      	adds	r1, r3, #1
 8007030:	6039      	str	r1, [r7, #0]
 8007032:	005b      	lsls	r3, r3, #1
 8007034:	4413      	add	r3, r2
 8007036:	f9b3 3000 	ldrsh.w	r3, [r3]
 800703a:	4a07      	ldr	r2, [pc, #28]	; (8007058 <qFIS_AggregationFindConsequent+0x3c>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d1f3      	bne.n	8007028 <qFIS_AggregationFindConsequent+0xc>
    f->aggregationState = &qFIS_InferenceConsequent;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	4a06      	ldr	r2, [pc, #24]	; (800705c <qFIS_AggregationFindConsequent+0x40>)
 8007044:	625a      	str	r2, [r3, #36]	; 0x24

    return --i;
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	3b01      	subs	r3, #1
 800704a:	603b      	str	r3, [r7, #0]
 800704c:	683b      	ldr	r3, [r7, #0]
}
 800704e:	4618      	mov	r0, r3
 8007050:	370c      	adds	r7, #12
 8007052:	46bd      	mov	sp, r7
 8007054:	bc80      	pop	{r7}
 8007056:	4770      	bx	lr
 8007058:	ffff8004 	.word	0xffff8004
 800705c:	08007061 	.word	0x08007061

08007060 <qFIS_InferenceConsequent>:
/*============================================================================*/
static size_t qFIS_InferenceConsequent( struct _qFIS_s * const f,
                                        size_t i )
{
 8007060:	b5b0      	push	{r4, r5, r7, lr}
 8007062:	b088      	sub	sp, #32
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
 8007068:	6039      	str	r1, [r7, #0]
    int16_t outIndex, MFOutIndex, connector;
    uint8_t neg = 0u;
 800706a:	2300      	movs	r3, #0
 800706c:	777b      	strb	r3, [r7, #29]

    outIndex = f->rules[ i ];
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	005b      	lsls	r3, r3, #1
 8007076:	4413      	add	r3, r2
 8007078:	881b      	ldrh	r3, [r3, #0]
 800707a:	837b      	strh	r3, [r7, #26]
    MFOutIndex = f->rules[ i + 1u ];
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	3301      	adds	r3, #1
 8007084:	005b      	lsls	r3, r3, #1
 8007086:	4413      	add	r3, r2
 8007088:	881b      	ldrh	r3, [r3, #0]
 800708a:	83fb      	strh	r3, [r7, #30]
    connector = ( f->nOutputs > 1u )? f->rules[ i + 2u ] : -1;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007090:	2b01      	cmp	r3, #1
 8007092:	d908      	bls.n	80070a6 <qFIS_InferenceConsequent+0x46>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	3302      	adds	r3, #2
 800709c:	005b      	lsls	r3, r3, #1
 800709e:	4413      	add	r3, r2
 80070a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80070a4:	e001      	b.n	80070aa <qFIS_InferenceConsequent+0x4a>
 80070a6:	f04f 33ff 	mov.w	r3, #4294967295
 80070aa:	833b      	strh	r3, [r7, #24]
    if ( MFOutIndex < 0 ) {
 80070ac:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	da05      	bge.n	80070c0 <qFIS_InferenceConsequent+0x60>
        MFOutIndex = -MFOutIndex;
 80070b4:	8bfb      	ldrh	r3, [r7, #30]
 80070b6:	425b      	negs	r3, r3
 80070b8:	b29b      	uxth	r3, r3
 80070ba:	83fb      	strh	r3, [r7, #30]
        neg = 1u;
 80070bc:	2301      	movs	r3, #1
 80070be:	777b      	strb	r3, [r7, #29]
    }
    MFOutIndex -= 1;
 80070c0:	8bfb      	ldrh	r3, [r7, #30]
 80070c2:	3b01      	subs	r3, #1
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	83fb      	strh	r3, [r7, #30]

    if ( f->wi[ f->ruleCount ] > 0.0f ) {
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070d0:	009b      	lsls	r3, r3, #2
 80070d2:	4413      	add	r3, r2
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f04f 0100 	mov.w	r1, #0
 80070da:	4618      	mov	r0, r3
 80070dc:	f7f9 ffc6 	bl	800106c <__aeabi_fcmpgt>
 80070e0:	4603      	mov	r3, r0
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d07b      	beq.n	80071de <qFIS_InferenceConsequent+0x17e>
        qFIS_Output_t *o = &f->output[ outIndex ];
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	685a      	ldr	r2, [r3, #4]
 80070ea:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80070ee:	2134      	movs	r1, #52	; 0x34
 80070f0:	fb01 f303 	mul.w	r3, r1, r3
 80070f4:	4413      	add	r3, r2
 80070f6:	617b      	str	r3, [r7, #20]
        qFIS_MF_t *m = &f->outMF[ MFOutIndex ];
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	68d9      	ldr	r1, [r3, #12]
 80070fc:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8007100:	4613      	mov	r3, r2
 8007102:	009b      	lsls	r3, r3, #2
 8007104:	4413      	add	r3, r2
 8007106:	009b      	lsls	r3, r3, #2
 8007108:	440b      	add	r3, r1
 800710a:	613b      	str	r3, [r7, #16]

        if ( Mamdani == f->type ) {
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8007112:	2b00      	cmp	r3, #0
 8007114:	d133      	bne.n	800717e <qFIS_InferenceConsequent+0x11e>
            float v;
            /*cstat -MISRAC2012-Rule-11.3 -CERT-EXP39-C_d*/
            v = m->h*m->shape( (qFIS_IO_Base_t*)o, m->points, 1u );
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	68dc      	ldr	r4, [r3, #12]
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	693a      	ldr	r2, [r7, #16]
 8007120:	6851      	ldr	r1, [r2, #4]
 8007122:	2201      	movs	r2, #1
 8007124:	6978      	ldr	r0, [r7, #20]
 8007126:	4798      	blx	r3
 8007128:	4603      	mov	r3, r0
 800712a:	4619      	mov	r1, r3
 800712c:	4620      	mov	r0, r4
 800712e:	f7f9 fde1 	bl	8000cf4 <__aeabi_fmul>
 8007132:	4603      	mov	r3, r0
 8007134:	60bb      	str	r3, [r7, #8]
            /*cstat +MISRAC2012-Rule-11.3 +CERT-EXP39-C_d*/
            v = ( 1u == neg )? ( 1.0f - v ) : v;
 8007136:	7f7b      	ldrb	r3, [r7, #29]
 8007138:	2b01      	cmp	r3, #1
 800713a:	d106      	bne.n	800714a <qFIS_InferenceConsequent+0xea>
 800713c:	68b9      	ldr	r1, [r7, #8]
 800713e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8007142:	f7f9 fccd 	bl	8000ae0 <__aeabi_fsub>
 8007146:	4603      	mov	r3, r0
 8007148:	e000      	b.n	800714c <qFIS_InferenceConsequent+0xec>
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	60bb      	str	r3, [r7, #8]
            o->y = f->aggregate( o->y, f->implicate( f->wi[ f->ruleCount ], v ) );
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	69dc      	ldr	r4, [r3, #28]
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	695d      	ldr	r5, [r3, #20]
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	699b      	ldr	r3, [r3, #24]
 800715a:	687a      	ldr	r2, [r7, #4]
 800715c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800715e:	687a      	ldr	r2, [r7, #4]
 8007160:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007162:	0092      	lsls	r2, r2, #2
 8007164:	440a      	add	r2, r1
 8007166:	6812      	ldr	r2, [r2, #0]
 8007168:	68b9      	ldr	r1, [r7, #8]
 800716a:	4610      	mov	r0, r2
 800716c:	4798      	blx	r3
 800716e:	4603      	mov	r3, r0
 8007170:	4619      	mov	r1, r3
 8007172:	4628      	mov	r0, r5
 8007174:	47a0      	blx	r4
 8007176:	4602      	mov	r2, r0
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	615a      	str	r2, [r3, #20]
 800717c:	e02f      	b.n	80071de <qFIS_InferenceConsequent+0x17e>
        }
        else { /* Sugeno and Tsukamoto*/
            float zi;
            /*cstat -MISRAC2012-Rule-11.3 -CERT-EXP39-C_d*/
            zi = m->shape( (qFIS_IO_Base_t*)f->input, m->points, f->nInputs );
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	687a      	ldr	r2, [r7, #4]
 8007184:	6810      	ldr	r0, [r2, #0]
 8007186:	693a      	ldr	r2, [r7, #16]
 8007188:	6851      	ldr	r1, [r2, #4]
 800718a:	687a      	ldr	r2, [r7, #4]
 800718c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800718e:	4798      	blx	r3
 8007190:	60f8      	str	r0, [r7, #12]
            /*cstat +MISRAC2012-Rule-11.3 +CERT-EXP39-C_d*/
            o->data[ 0 ] += zi*f->wi[ f->ruleCount ];
 8007192:	697b      	ldr	r3, [r7, #20]
 8007194:	699c      	ldr	r4, [r3, #24]
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800719e:	009b      	lsls	r3, r3, #2
 80071a0:	4413      	add	r3, r2
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	68f9      	ldr	r1, [r7, #12]
 80071a6:	4618      	mov	r0, r3
 80071a8:	f7f9 fda4 	bl	8000cf4 <__aeabi_fmul>
 80071ac:	4603      	mov	r3, r0
 80071ae:	4619      	mov	r1, r3
 80071b0:	4620      	mov	r0, r4
 80071b2:	f7f9 fc97 	bl	8000ae4 <__addsf3>
 80071b6:	4603      	mov	r3, r0
 80071b8:	461a      	mov	r2, r3
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	619a      	str	r2, [r3, #24]
            o->data[ 1 ] += f->wi[ f->ruleCount ];
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	69d8      	ldr	r0, [r3, #28]
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071ca:	009b      	lsls	r3, r3, #2
 80071cc:	4413      	add	r3, r2
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4619      	mov	r1, r3
 80071d2:	f7f9 fc87 	bl	8000ae4 <__addsf3>
 80071d6:	4603      	mov	r3, r0
 80071d8:	461a      	mov	r2, r3
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	61da      	str	r2, [r3, #28]
        }
    }

    i += 2u;
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	3302      	adds	r3, #2
 80071e2:	603b      	str	r3, [r7, #0]
    if ( _QFIS_AND != connector ) {
 80071e4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80071e8:	4a09      	ldr	r2, [pc, #36]	; (8007210 <qFIS_InferenceConsequent+0x1b0>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d00a      	beq.n	8007204 <qFIS_InferenceConsequent+0x1a4>
        f->aggregationState = &qFIS_AggregationFindConsequent;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	4a08      	ldr	r2, [pc, #32]	; (8007214 <qFIS_InferenceConsequent+0x1b4>)
 80071f2:	625a      	str	r2, [r3, #36]	; 0x24
        ++f->ruleCount;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071f8:	1c5a      	adds	r2, r3, #1
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	655a      	str	r2, [r3, #84]	; 0x54
        --i;
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	3b01      	subs	r3, #1
 8007202:	603b      	str	r3, [r7, #0]
    }

    return i;
 8007204:	683b      	ldr	r3, [r7, #0]
}
 8007206:	4618      	mov	r0, r3
 8007208:	3720      	adds	r7, #32
 800720a:	46bd      	mov	sp, r7
 800720c:	bdb0      	pop	{r4, r5, r7, pc}
 800720e:	bf00      	nop
 8007210:	ffff8002 	.word	0xffff8002
 8007214:	0800701d 	.word	0x0800701d

08007218 <qFIS_Aggregate>:
/*============================================================================*/
static void qFIS_Aggregate( qFIS_t * const f )
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b084      	sub	sp, #16
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
    if ( NULL != f ) {
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d02d      	beq.n	8007282 <qFIS_Aggregate+0x6a>
        if ( QFIS_RULES_BEGIN == f->rules[ 0 ] ) {
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800722a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800722e:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8007232:	d126      	bne.n	8007282 <qFIS_Aggregate+0x6a>
            size_t i = 1u;
 8007234:	2301      	movs	r3, #1
 8007236:	60fb      	str	r3, [r7, #12]

            f->aggregationState = &qFIS_AggregationFindConsequent;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	4a14      	ldr	r2, [pc, #80]	; (800728c <qFIS_Aggregate+0x74>)
 800723c:	625a      	str	r2, [r3, #36]	; 0x24
            f->ruleCount = 0u;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2200      	movs	r2, #0
 8007242:	655a      	str	r2, [r3, #84]	; 0x54
            while ( ( _QFIS_RULES_END != f->rules[ i ] ) && ( f->ruleCount < f->nRules ) ) {
 8007244:	e00b      	b.n	800725e <qFIS_Aggregate+0x46>
                i = f->aggregationState( f, i );
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800724a:	68f9      	ldr	r1, [r7, #12]
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	4798      	blx	r3
 8007250:	60f8      	str	r0, [r7, #12]
                if ( QFIS_INFERENCE_ERROR == i ) {
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d013      	beq.n	8007280 <qFIS_Aggregate+0x68>
                    break;
                }
                ++i;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	3301      	adds	r3, #1
 800725c:	60fb      	str	r3, [r7, #12]
            while ( ( _QFIS_RULES_END != f->rules[ i ] ) && ( f->ruleCount < f->nRules ) ) {
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	005b      	lsls	r3, r3, #1
 8007266:	4413      	add	r3, r2
 8007268:	f9b3 3000 	ldrsh.w	r3, [r3]
 800726c:	4a08      	ldr	r2, [pc, #32]	; (8007290 <qFIS_Aggregate+0x78>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d007      	beq.n	8007282 <qFIS_Aggregate+0x6a>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800727a:	429a      	cmp	r2, r3
 800727c:	d3e3      	bcc.n	8007246 <qFIS_Aggregate+0x2e>
            }
        }
    }
}
 800727e:	e000      	b.n	8007282 <qFIS_Aggregate+0x6a>
                    break;
 8007280:	bf00      	nop
}
 8007282:	bf00      	nop
 8007284:	3710      	adds	r7, #16
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}
 800728a:	bf00      	nop
 800728c:	0800701d 	.word	0x0800701d
 8007290:	ffff8001 	.word	0xffff8001

08007294 <qFIS_DeFuzz_Centroid>:
/*============================================================================*/
static float qFIS_DeFuzz_Centroid( qFIS_Output_t * const o,
                                   const qFIS_DeFuzzState_t stage )
{
 8007294:	b590      	push	{r4, r7, lr}
 8007296:	b085      	sub	sp, #20
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
 800729c:	460b      	mov	r3, r1
 800729e:	70fb      	strb	r3, [r7, #3]
    float d = 0.0f;
 80072a0:	f04f 0300 	mov.w	r3, #0
 80072a4:	60fb      	str	r3, [r7, #12]

    switch ( stage ) {
 80072a6:	78fb      	ldrb	r3, [r7, #3]
 80072a8:	2b01      	cmp	r3, #1
 80072aa:	d004      	beq.n	80072b6 <qFIS_DeFuzz_Centroid+0x22>
 80072ac:	2b02      	cmp	r3, #2
 80072ae:	d02b      	beq.n	8007308 <qFIS_DeFuzz_Centroid+0x74>
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d020      	beq.n	80072f6 <qFIS_DeFuzz_Centroid+0x62>
            break;
        case DeFuzz_End:
            d = o->data[ 0 ]/o->data[ 1 ]; /*sum(x*y)/sum(y)*/
            break;
        default:
            break;
 80072b4:	e033      	b.n	800731e <qFIS_DeFuzz_Centroid+0x8a>
            o->data[ 0 ] += o->x*o->y;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	699c      	ldr	r4, [r3, #24]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	691a      	ldr	r2, [r3, #16]
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	695b      	ldr	r3, [r3, #20]
 80072c2:	4619      	mov	r1, r3
 80072c4:	4610      	mov	r0, r2
 80072c6:	f7f9 fd15 	bl	8000cf4 <__aeabi_fmul>
 80072ca:	4603      	mov	r3, r0
 80072cc:	4619      	mov	r1, r3
 80072ce:	4620      	mov	r0, r4
 80072d0:	f7f9 fc08 	bl	8000ae4 <__addsf3>
 80072d4:	4603      	mov	r3, r0
 80072d6:	461a      	mov	r2, r3
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	619a      	str	r2, [r3, #24]
            o->data[ 1 ] += o->y;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	69da      	ldr	r2, [r3, #28]
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	695b      	ldr	r3, [r3, #20]
 80072e4:	4619      	mov	r1, r3
 80072e6:	4610      	mov	r0, r2
 80072e8:	f7f9 fbfc 	bl	8000ae4 <__addsf3>
 80072ec:	4603      	mov	r3, r0
 80072ee:	461a      	mov	r2, r3
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	61da      	str	r2, [r3, #28]
            break;
 80072f4:	e013      	b.n	800731e <qFIS_DeFuzz_Centroid+0x8a>
            o->data[ 0 ] = 0.0f; /*store sum(y)*/
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f04f 0200 	mov.w	r2, #0
 80072fc:	619a      	str	r2, [r3, #24]
            o->data[ 1 ] = 0.0f; /*store sum(x*y)*/
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f04f 0200 	mov.w	r2, #0
 8007304:	61da      	str	r2, [r3, #28]
            break;
 8007306:	e00a      	b.n	800731e <qFIS_DeFuzz_Centroid+0x8a>
            d = o->data[ 0 ]/o->data[ 1 ]; /*sum(x*y)/sum(y)*/
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	699a      	ldr	r2, [r3, #24]
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	69db      	ldr	r3, [r3, #28]
 8007310:	4619      	mov	r1, r3
 8007312:	4610      	mov	r0, r2
 8007314:	f7f9 fda2 	bl	8000e5c <__aeabi_fdiv>
 8007318:	4603      	mov	r3, r0
 800731a:	60fb      	str	r3, [r7, #12]
            break;
 800731c:	bf00      	nop
    }

    return d;
 800731e:	68fb      	ldr	r3, [r7, #12]
}
 8007320:	4618      	mov	r0, r3
 8007322:	3714      	adds	r7, #20
 8007324:	46bd      	mov	sp, r7
 8007326:	bd90      	pop	{r4, r7, pc}

08007328 <qFIS_DeFuzz_WtAverage>:
    return d;
}
/*============================================================================*/
static float qFIS_DeFuzz_WtAverage( qFIS_Output_t * const o,
                                    const qFIS_DeFuzzState_t stage )
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b084      	sub	sp, #16
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
 8007330:	460b      	mov	r3, r1
 8007332:	70fb      	strb	r3, [r7, #3]
    float d = 0.0f;
 8007334:	f04f 0300 	mov.w	r3, #0
 8007338:	60fb      	str	r3, [r7, #12]

    if ( DeFuzz_End == stage ) {
 800733a:	78fb      	ldrb	r3, [r7, #3]
 800733c:	2b02      	cmp	r3, #2
 800733e:	d109      	bne.n	8007354 <qFIS_DeFuzz_WtAverage+0x2c>
        d = o->data[ 0 ]/o->data[ 1 ];
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	699a      	ldr	r2, [r3, #24]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	69db      	ldr	r3, [r3, #28]
 8007348:	4619      	mov	r1, r3
 800734a:	4610      	mov	r0, r2
 800734c:	f7f9 fd86 	bl	8000e5c <__aeabi_fdiv>
 8007350:	4603      	mov	r3, r0
 8007352:	60fb      	str	r3, [r7, #12]
    }

    return d;
 8007354:	68fb      	ldr	r3, [r7, #12]
}
 8007356:	4618      	mov	r0, r3
 8007358:	3710      	adds	r7, #16
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}

0800735e <qFIS_DeFuzzify>:

    return d;
}
/*============================================================================*/
int qFIS_DeFuzzify( qFIS_t * const f )
{
 800735e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007360:	b087      	sub	sp, #28
 8007362:	af00      	add	r7, sp, #0
 8007364:	6078      	str	r0, [r7, #4]
    int retVal = 0;
 8007366:	2300      	movs	r3, #0
 8007368:	60fb      	str	r3, [r7, #12]

    if ( NULL != f ) {
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2b00      	cmp	r3, #0
 800736e:	f000 8136 	beq.w	80075de <qFIS_DeFuzzify+0x280>
        size_t i;

        for ( i = 0; i < f->nOutputs ; ++i ) {
 8007372:	2300      	movs	r3, #0
 8007374:	617b      	str	r3, [r7, #20]
 8007376:	e00e      	b.n	8007396 <qFIS_DeFuzzify+0x38>
            f->deFuzz( &f->output[ i ] , DeFuzz_Init );
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800737c:	687a      	ldr	r2, [r7, #4]
 800737e:	6851      	ldr	r1, [r2, #4]
 8007380:	697a      	ldr	r2, [r7, #20]
 8007382:	2034      	movs	r0, #52	; 0x34
 8007384:	fb00 f202 	mul.w	r2, r0, r2
 8007388:	440a      	add	r2, r1
 800738a:	2100      	movs	r1, #0
 800738c:	4610      	mov	r0, r2
 800738e:	4798      	blx	r3
        for ( i = 0; i < f->nOutputs ; ++i ) {
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	3301      	adds	r3, #1
 8007394:	617b      	str	r3, [r7, #20]
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800739a:	697a      	ldr	r2, [r7, #20]
 800739c:	429a      	cmp	r2, r3
 800739e:	d3eb      	bcc.n	8007378 <qFIS_DeFuzzify+0x1a>
        }

        if ( Mamdani == f->type  ) {
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	f040 809b 	bne.w	80074e2 <qFIS_DeFuzzify+0x184>
            size_t k;

            for ( k = 0u ; k < f->nPoints ; ++k ) {
 80073ac:	2300      	movs	r3, #0
 80073ae:	613b      	str	r3, [r7, #16]
 80073b0:	e090      	b.n	80074d4 <qFIS_DeFuzzify+0x176>
                for ( i = 0; i < f->nOutputs ; ++i ) { /* initialize*/
 80073b2:	2300      	movs	r3, #0
 80073b4:	617b      	str	r3, [r7, #20]
 80073b6:	e039      	b.n	800742c <qFIS_DeFuzzify+0xce>
                    f->output[ i ].y = 0.0f;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	685a      	ldr	r2, [r3, #4]
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	2134      	movs	r1, #52	; 0x34
 80073c0:	fb01 f303 	mul.w	r3, r1, r3
 80073c4:	4413      	add	r3, r2
 80073c6:	f04f 0200 	mov.w	r2, #0
 80073ca:	615a      	str	r2, [r3, #20]
                    f->output[ i ].x = qFIS_GetNextX( f->output[ i ].b.min,
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	685a      	ldr	r2, [r3, #4]
 80073d0:	697b      	ldr	r3, [r7, #20]
 80073d2:	2134      	movs	r1, #52	; 0x34
 80073d4:	fb01 f303 	mul.w	r3, r1, r3
 80073d8:	4413      	add	r3, r2
 80073da:	6818      	ldr	r0, [r3, #0]
                                                      f->output[ i ].res,
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	685a      	ldr	r2, [r3, #4]
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	2134      	movs	r1, #52	; 0x34
 80073e4:	fb01 f303 	mul.w	r3, r1, r3
 80073e8:	4413      	add	r3, r2
                    f->output[ i ].x = qFIS_GetNextX( f->output[ i ].b.min,
 80073ea:	68dd      	ldr	r5, [r3, #12]
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	685a      	ldr	r2, [r3, #4]
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	2134      	movs	r1, #52	; 0x34
 80073f4:	fb01 f303 	mul.w	r3, r1, r3
 80073f8:	18d4      	adds	r4, r2, r3
 80073fa:	693a      	ldr	r2, [r7, #16]
 80073fc:	4629      	mov	r1, r5
 80073fe:	f000 f951 	bl	80076a4 <qFIS_GetNextX>
 8007402:	4603      	mov	r3, r0
 8007404:	6123      	str	r3, [r4, #16]
                                                      k );
                    f->output[ i ].b.value = f->output[ i ].x;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	685a      	ldr	r2, [r3, #4]
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	2134      	movs	r1, #52	; 0x34
 800740e:	fb01 f303 	mul.w	r3, r1, r3
 8007412:	441a      	add	r2, r3
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6859      	ldr	r1, [r3, #4]
 8007418:	697b      	ldr	r3, [r7, #20]
 800741a:	2034      	movs	r0, #52	; 0x34
 800741c:	fb00 f303 	mul.w	r3, r0, r3
 8007420:	440b      	add	r3, r1
 8007422:	6912      	ldr	r2, [r2, #16]
 8007424:	609a      	str	r2, [r3, #8]
                for ( i = 0; i < f->nOutputs ; ++i ) { /* initialize*/
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	3301      	adds	r3, #1
 800742a:	617b      	str	r3, [r7, #20]
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007430:	697a      	ldr	r2, [r7, #20]
 8007432:	429a      	cmp	r2, r3
 8007434:	d3c0      	bcc.n	80073b8 <qFIS_DeFuzzify+0x5a>
                }
                qFIS_Aggregate( f );
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f7ff feee 	bl	8007218 <qFIS_Aggregate>
                for ( i = 0; i < f->nOutputs ; ++i ) {
 800743c:	2300      	movs	r3, #0
 800743e:	617b      	str	r3, [r7, #20]
 8007440:	e040      	b.n	80074c4 <qFIS_DeFuzzify+0x166>
                    f->deFuzz( &f->output[ i ] , DeFuzz_Compute );
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007446:	687a      	ldr	r2, [r7, #4]
 8007448:	6851      	ldr	r1, [r2, #4]
 800744a:	697a      	ldr	r2, [r7, #20]
 800744c:	2034      	movs	r0, #52	; 0x34
 800744e:	fb00 f202 	mul.w	r2, r0, r2
 8007452:	440a      	add	r2, r1
 8007454:	2101      	movs	r1, #1
 8007456:	4610      	mov	r0, r2
 8007458:	4798      	blx	r3
                    if ( NULL != f->output[ i ].xag ) { /*store aggregated*/
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	685a      	ldr	r2, [r3, #4]
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	2134      	movs	r1, #52	; 0x34
 8007462:	fb01 f303 	mul.w	r3, r1, r3
 8007466:	4413      	add	r3, r2
 8007468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800746a:	2b00      	cmp	r3, #0
 800746c:	d027      	beq.n	80074be <qFIS_DeFuzzify+0x160>
                        f->output[ i ].xag[ k ] = f->output[ i ].x;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	685a      	ldr	r2, [r3, #4]
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	2134      	movs	r1, #52	; 0x34
 8007476:	fb01 f303 	mul.w	r3, r1, r3
 800747a:	441a      	add	r2, r3
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6859      	ldr	r1, [r3, #4]
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	2034      	movs	r0, #52	; 0x34
 8007484:	fb00 f303 	mul.w	r3, r0, r3
 8007488:	440b      	add	r3, r1
 800748a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800748c:	693b      	ldr	r3, [r7, #16]
 800748e:	009b      	lsls	r3, r3, #2
 8007490:	440b      	add	r3, r1
 8007492:	6912      	ldr	r2, [r2, #16]
 8007494:	601a      	str	r2, [r3, #0]
                        f->output[ i ].yag[ k ] = f->output[ i ].y;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	685a      	ldr	r2, [r3, #4]
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	2134      	movs	r1, #52	; 0x34
 800749e:	fb01 f303 	mul.w	r3, r1, r3
 80074a2:	441a      	add	r2, r3
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6859      	ldr	r1, [r3, #4]
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	2034      	movs	r0, #52	; 0x34
 80074ac:	fb00 f303 	mul.w	r3, r0, r3
 80074b0:	440b      	add	r3, r1
 80074b2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80074b4:	693b      	ldr	r3, [r7, #16]
 80074b6:	009b      	lsls	r3, r3, #2
 80074b8:	440b      	add	r3, r1
 80074ba:	6952      	ldr	r2, [r2, #20]
 80074bc:	601a      	str	r2, [r3, #0]
                for ( i = 0; i < f->nOutputs ; ++i ) {
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	3301      	adds	r3, #1
 80074c2:	617b      	str	r3, [r7, #20]
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074c8:	697a      	ldr	r2, [r7, #20]
 80074ca:	429a      	cmp	r2, r3
 80074cc:	d3b9      	bcc.n	8007442 <qFIS_DeFuzzify+0xe4>
            for ( k = 0u ; k < f->nPoints ; ++k ) {
 80074ce:	693b      	ldr	r3, [r7, #16]
 80074d0:	3301      	adds	r3, #1
 80074d2:	613b      	str	r3, [r7, #16]
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074d8:	693a      	ldr	r2, [r7, #16]
 80074da:	429a      	cmp	r2, r3
 80074dc:	f4ff af69 	bcc.w	80073b2 <qFIS_DeFuzzify+0x54>
 80074e0:	e038      	b.n	8007554 <qFIS_DeFuzzify+0x1f6>
                    }
                }
            }
        }
        else { /*Sugeno and Tsukamoto systems*/
            for ( i = 0; i < f->nOutputs ; ++i ) { /* initialize*/
 80074e2:	2300      	movs	r3, #0
 80074e4:	617b      	str	r3, [r7, #20]
 80074e6:	e016      	b.n	8007516 <qFIS_DeFuzzify+0x1b8>
                f->output[ i ].data[ 0 ] = 0.0f; /*store sum wi*/
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	685a      	ldr	r2, [r3, #4]
 80074ec:	697b      	ldr	r3, [r7, #20]
 80074ee:	2134      	movs	r1, #52	; 0x34
 80074f0:	fb01 f303 	mul.w	r3, r1, r3
 80074f4:	4413      	add	r3, r2
 80074f6:	f04f 0200 	mov.w	r2, #0
 80074fa:	619a      	str	r2, [r3, #24]
                f->output[ i ].data[ 1 ] = 0.0f; /*store sum zi*wi*/
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	685a      	ldr	r2, [r3, #4]
 8007500:	697b      	ldr	r3, [r7, #20]
 8007502:	2134      	movs	r1, #52	; 0x34
 8007504:	fb01 f303 	mul.w	r3, r1, r3
 8007508:	4413      	add	r3, r2
 800750a:	f04f 0200 	mov.w	r2, #0
 800750e:	61da      	str	r2, [r3, #28]
            for ( i = 0; i < f->nOutputs ; ++i ) { /* initialize*/
 8007510:	697b      	ldr	r3, [r7, #20]
 8007512:	3301      	adds	r3, #1
 8007514:	617b      	str	r3, [r7, #20]
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800751a:	697a      	ldr	r2, [r7, #20]
 800751c:	429a      	cmp	r2, r3
 800751e:	d3e3      	bcc.n	80074e8 <qFIS_DeFuzzify+0x18a>
            }
            qFIS_Aggregate( f );
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f7ff fe79 	bl	8007218 <qFIS_Aggregate>
            for ( i = 0; i < f->nOutputs ; ++i ) { /* initialize*/
 8007526:	2300      	movs	r3, #0
 8007528:	617b      	str	r3, [r7, #20]
 800752a:	e00e      	b.n	800754a <qFIS_DeFuzzify+0x1ec>
                f->deFuzz( &f->output[ i ] , DeFuzz_Compute );
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007530:	687a      	ldr	r2, [r7, #4]
 8007532:	6851      	ldr	r1, [r2, #4]
 8007534:	697a      	ldr	r2, [r7, #20]
 8007536:	2034      	movs	r0, #52	; 0x34
 8007538:	fb00 f202 	mul.w	r2, r0, r2
 800753c:	440a      	add	r2, r1
 800753e:	2101      	movs	r1, #1
 8007540:	4610      	mov	r0, r2
 8007542:	4798      	blx	r3
            for ( i = 0; i < f->nOutputs ; ++i ) { /* initialize*/
 8007544:	697b      	ldr	r3, [r7, #20]
 8007546:	3301      	adds	r3, #1
 8007548:	617b      	str	r3, [r7, #20]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800754e:	697a      	ldr	r2, [r7, #20]
 8007550:	429a      	cmp	r2, r3
 8007552:	d3eb      	bcc.n	800752c <qFIS_DeFuzzify+0x1ce>
            }
        }

        for ( i = 0; i < f->nOutputs ; ++i ) {
 8007554:	2300      	movs	r3, #0
 8007556:	617b      	str	r3, [r7, #20]
 8007558:	e03c      	b.n	80075d4 <qFIS_DeFuzzify+0x276>
            f->output[ i ].b.value = f->deFuzz( &f->output[ i ] , DeFuzz_End );
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800755e:	687a      	ldr	r2, [r7, #4]
 8007560:	6851      	ldr	r1, [r2, #4]
 8007562:	697a      	ldr	r2, [r7, #20]
 8007564:	2034      	movs	r0, #52	; 0x34
 8007566:	fb00 f202 	mul.w	r2, r0, r2
 800756a:	188d      	adds	r5, r1, r2
 800756c:	687a      	ldr	r2, [r7, #4]
 800756e:	6851      	ldr	r1, [r2, #4]
 8007570:	697a      	ldr	r2, [r7, #20]
 8007572:	2034      	movs	r0, #52	; 0x34
 8007574:	fb00 f202 	mul.w	r2, r0, r2
 8007578:	188c      	adds	r4, r1, r2
 800757a:	2102      	movs	r1, #2
 800757c:	4628      	mov	r0, r5
 800757e:	4798      	blx	r3
 8007580:	4603      	mov	r3, r0
 8007582:	60a3      	str	r3, [r4, #8]
            f->output[ i ].b.value = qFIS_Bound( f->output[ i ].b.value,
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	685a      	ldr	r2, [r3, #4]
 8007588:	697b      	ldr	r3, [r7, #20]
 800758a:	2134      	movs	r1, #52	; 0x34
 800758c:	fb01 f303 	mul.w	r3, r1, r3
 8007590:	4413      	add	r3, r2
 8007592:	6898      	ldr	r0, [r3, #8]
                                                 f->output[ i ].b.min,
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	685a      	ldr	r2, [r3, #4]
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	2134      	movs	r1, #52	; 0x34
 800759c:	fb01 f303 	mul.w	r3, r1, r3
 80075a0:	4413      	add	r3, r2
            f->output[ i ].b.value = qFIS_Bound( f->output[ i ].b.value,
 80075a2:	681d      	ldr	r5, [r3, #0]
                                                 f->output[ i ].b.max );
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	685a      	ldr	r2, [r3, #4]
 80075a8:	697b      	ldr	r3, [r7, #20]
 80075aa:	2134      	movs	r1, #52	; 0x34
 80075ac:	fb01 f303 	mul.w	r3, r1, r3
 80075b0:	4413      	add	r3, r2
            f->output[ i ].b.value = qFIS_Bound( f->output[ i ].b.value,
 80075b2:	685e      	ldr	r6, [r3, #4]
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	685a      	ldr	r2, [r3, #4]
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	2134      	movs	r1, #52	; 0x34
 80075bc:	fb01 f303 	mul.w	r3, r1, r3
 80075c0:	18d4      	adds	r4, r2, r3
 80075c2:	4632      	mov	r2, r6
 80075c4:	4629      	mov	r1, r5
 80075c6:	f001 f834 	bl	8008632 <qFIS_Bound>
 80075ca:	4603      	mov	r3, r0
 80075cc:	60a3      	str	r3, [r4, #8]
        for ( i = 0; i < f->nOutputs ; ++i ) {
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	3301      	adds	r3, #1
 80075d2:	617b      	str	r3, [r7, #20]
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075d8:	697a      	ldr	r2, [r7, #20]
 80075da:	429a      	cmp	r2, r3
 80075dc:	d3bd      	bcc.n	800755a <qFIS_DeFuzzify+0x1fc>
        }
    }

    return retVal;
 80075de:	68fb      	ldr	r3, [r7, #12]
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	371c      	adds	r7, #28
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080075e8 <qFIS_Inference>:

    return retVal;
}
/*============================================================================*/
int qFIS_Inference( qFIS_t * const f )
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b084      	sub	sp, #16
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
    int retVal = 0;
 80075f0:	2300      	movs	r3, #0
 80075f2:	60fb      	str	r3, [r7, #12]

    if ( NULL != f  ) {
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d04a      	beq.n	8007690 <qFIS_Inference+0xa8>
        size_t i = 0u;
 80075fa:	2300      	movs	r3, #0
 80075fc:	60bb      	str	r3, [r7, #8]

        if ( QFIS_RULES_BEGIN == f->rules[ 0 ] ) {
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007602:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007606:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800760a:	d12f      	bne.n	800766c <qFIS_Inference+0x84>
            f->inferenceState = &qFIS_InferenceAntecedent;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	4a23      	ldr	r2, [pc, #140]	; (800769c <qFIS_Inference+0xb4>)
 8007610:	621a      	str	r2, [r3, #32]
            f->rStrength = 0.0f;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f04f 0200 	mov.w	r2, #0
 8007618:	659a      	str	r2, [r3, #88]	; 0x58
            f->lastConnector = -1;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007620:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
            f->ruleCount = 0u;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2200      	movs	r2, #0
 8007628:	655a      	str	r2, [r3, #84]	; 0x54
            i = 1u;
 800762a:	2301      	movs	r3, #1
 800762c:	60bb      	str	r3, [r7, #8]
            while ( ( _QFIS_RULES_END != f->rules[ i ] ) && ( f->ruleCount < f->nRules ) ) {
 800762e:	e00b      	b.n	8007648 <qFIS_Inference+0x60>
                i = f->inferenceState( f, i );
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6a1b      	ldr	r3, [r3, #32]
 8007634:	68b9      	ldr	r1, [r7, #8]
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	4798      	blx	r3
 800763a:	60b8      	str	r0, [r7, #8]
                if ( QFIS_INFERENCE_ERROR == i ) {
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d013      	beq.n	800766a <qFIS_Inference+0x82>
                    break;
                }
                ++i;
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	3301      	adds	r3, #1
 8007646:	60bb      	str	r3, [r7, #8]
            while ( ( _QFIS_RULES_END != f->rules[ i ] ) && ( f->ruleCount < f->nRules ) ) {
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	005b      	lsls	r3, r3, #1
 8007650:	4413      	add	r3, r2
 8007652:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007656:	4a12      	ldr	r2, [pc, #72]	; (80076a0 <qFIS_Inference+0xb8>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d007      	beq.n	800766c <qFIS_Inference+0x84>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007664:	429a      	cmp	r2, r3
 8007666:	d3e3      	bcc.n	8007630 <qFIS_Inference+0x48>
 8007668:	e000      	b.n	800766c <qFIS_Inference+0x84>
                    break;
 800766a:	bf00      	nop
            }
        }
        if ( ( _QFIS_RULES_END == f->rules[ i ] ) && ( f->ruleCount == f->nRules) ) {
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	005b      	lsls	r3, r3, #1
 8007674:	4413      	add	r3, r2
 8007676:	f9b3 3000 	ldrsh.w	r3, [r3]
 800767a:	4a09      	ldr	r2, [pc, #36]	; (80076a0 <qFIS_Inference+0xb8>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d107      	bne.n	8007690 <qFIS_Inference+0xa8>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007688:	429a      	cmp	r2, r3
 800768a:	d101      	bne.n	8007690 <qFIS_Inference+0xa8>
            retVal = 1;
 800768c:	2301      	movs	r3, #1
 800768e:	60fb      	str	r3, [r7, #12]
        }
    }

    return retVal;
 8007690:	68fb      	ldr	r3, [r7, #12]
}
 8007692:	4618      	mov	r0, r3
 8007694:	3710      	adds	r7, #16
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}
 800769a:	bf00      	nop
 800769c:	08006e6d 	.word	0x08006e6d
 80076a0:	ffff8001 	.word	0xffff8001

080076a4 <qFIS_GetNextX>:
/*============================================================================*/
static float qFIS_GetNextX( const float init,
                            const float res,
                            const size_t i )
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b084      	sub	sp, #16
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	60f8      	str	r0, [r7, #12]
 80076ac:	60b9      	str	r1, [r7, #8]
 80076ae:	607a      	str	r2, [r7, #4]
    /*cstat -CERT-FLP36-C*/
    return init + ( ( (float)i + 0.5f )*res );
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f7f9 fac7 	bl	8000c44 <__aeabi_ui2f>
 80076b6:	4603      	mov	r3, r0
 80076b8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80076bc:	4618      	mov	r0, r3
 80076be:	f7f9 fa11 	bl	8000ae4 <__addsf3>
 80076c2:	4603      	mov	r3, r0
 80076c4:	68b9      	ldr	r1, [r7, #8]
 80076c6:	4618      	mov	r0, r3
 80076c8:	f7f9 fb14 	bl	8000cf4 <__aeabi_fmul>
 80076cc:	4603      	mov	r3, r0
 80076ce:	68f9      	ldr	r1, [r7, #12]
 80076d0:	4618      	mov	r0, r3
 80076d2:	f7f9 fa07 	bl	8000ae4 <__addsf3>
 80076d6:	4603      	mov	r3, r0
    /*cstat +CERT-FLP36-C*/
}
 80076d8:	4618      	mov	r0, r3
 80076da:	3710      	adds	r7, #16
 80076dc:	46bd      	mov	sp, r7
 80076de:	bd80      	pop	{r7, pc}

080076e0 <qFIS_TriMF>:
/*============================================================================*/
static float qFIS_TriMF( const qFIS_IO_Base_t * const in,
                         const float *p,
                         const size_t n )
{
 80076e0:	b5b0      	push	{r4, r5, r7, lr}
 80076e2:	b08a      	sub	sp, #40	; 0x28
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	60f8      	str	r0, [r7, #12]
 80076e8:	60b9      	str	r1, [r7, #8]
 80076ea:	607a      	str	r2, [r7, #4]
    float a, b, c, tmp;
    float x = in[ 0 ].value;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	689b      	ldr	r3, [r3, #8]
 80076f0:	627b      	str	r3, [r7, #36]	; 0x24
    (void)n;

    a = p[ 0 ];
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	623b      	str	r3, [r7, #32]
    b = p[ 1 ];
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	685b      	ldr	r3, [r3, #4]
 80076fc:	61fb      	str	r3, [r7, #28]
    c = p[ 2 ];
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	689b      	ldr	r3, [r3, #8]
 8007702:	61bb      	str	r3, [r7, #24]
    tmp = qFIS_Min( ( x - a )/( b - a ) , ( c - x )/( c - b ) );
 8007704:	6a39      	ldr	r1, [r7, #32]
 8007706:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007708:	f7f9 f9ea 	bl	8000ae0 <__aeabi_fsub>
 800770c:	4603      	mov	r3, r0
 800770e:	461c      	mov	r4, r3
 8007710:	6a39      	ldr	r1, [r7, #32]
 8007712:	69f8      	ldr	r0, [r7, #28]
 8007714:	f7f9 f9e4 	bl	8000ae0 <__aeabi_fsub>
 8007718:	4603      	mov	r3, r0
 800771a:	4619      	mov	r1, r3
 800771c:	4620      	mov	r0, r4
 800771e:	f7f9 fb9d 	bl	8000e5c <__aeabi_fdiv>
 8007722:	4603      	mov	r3, r0
 8007724:	461c      	mov	r4, r3
 8007726:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007728:	69b8      	ldr	r0, [r7, #24]
 800772a:	f7f9 f9d9 	bl	8000ae0 <__aeabi_fsub>
 800772e:	4603      	mov	r3, r0
 8007730:	461d      	mov	r5, r3
 8007732:	69f9      	ldr	r1, [r7, #28]
 8007734:	69b8      	ldr	r0, [r7, #24]
 8007736:	f7f9 f9d3 	bl	8000ae0 <__aeabi_fsub>
 800773a:	4603      	mov	r3, r0
 800773c:	4619      	mov	r1, r3
 800773e:	4628      	mov	r0, r5
 8007740:	f7f9 fb8c 	bl	8000e5c <__aeabi_fdiv>
 8007744:	4603      	mov	r3, r0
 8007746:	4619      	mov	r1, r3
 8007748:	4620      	mov	r0, r4
 800774a:	f000 feef 	bl	800852c <qFIS_Min>
 800774e:	6178      	str	r0, [r7, #20]

    return qFIS_Max( tmp , 0.0f );
 8007750:	f04f 0100 	mov.w	r1, #0
 8007754:	6978      	ldr	r0, [r7, #20]
 8007756:	f000 ff04 	bl	8008562 <qFIS_Max>
 800775a:	4603      	mov	r3, r0
}
 800775c:	4618      	mov	r0, r3
 800775e:	3728      	adds	r7, #40	; 0x28
 8007760:	46bd      	mov	sp, r7
 8007762:	bdb0      	pop	{r4, r5, r7, pc}

08007764 <qFIS_TrapMF>:
/*============================================================================*/
static float qFIS_TrapMF( const qFIS_IO_Base_t * const in,
                          const float *p,
                          const size_t n )
{
 8007764:	b590      	push	{r4, r7, lr}
 8007766:	b08b      	sub	sp, #44	; 0x2c
 8007768:	af00      	add	r7, sp, #0
 800776a:	60f8      	str	r0, [r7, #12]
 800776c:	60b9      	str	r1, [r7, #8]
 800776e:	607a      	str	r2, [r7, #4]
    float a, b, c, d, tmp;
    float x = in[ 0 ].value;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	689b      	ldr	r3, [r3, #8]
 8007774:	627b      	str	r3, [r7, #36]	; 0x24
    (void)n;

    a = p[ 0 ];
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	623b      	str	r3, [r7, #32]
    b = p[ 1 ];
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	685b      	ldr	r3, [r3, #4]
 8007780:	61fb      	str	r3, [r7, #28]
    c = p[ 2 ];
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	689b      	ldr	r3, [r3, #8]
 8007786:	61bb      	str	r3, [r7, #24]
    d = p[ 3 ];
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	68db      	ldr	r3, [r3, #12]
 800778c:	617b      	str	r3, [r7, #20]
    tmp = qFIS_Min( ( x - a )/( b - a ) , 1.0f );
 800778e:	6a39      	ldr	r1, [r7, #32]
 8007790:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007792:	f7f9 f9a5 	bl	8000ae0 <__aeabi_fsub>
 8007796:	4603      	mov	r3, r0
 8007798:	461c      	mov	r4, r3
 800779a:	6a39      	ldr	r1, [r7, #32]
 800779c:	69f8      	ldr	r0, [r7, #28]
 800779e:	f7f9 f99f 	bl	8000ae0 <__aeabi_fsub>
 80077a2:	4603      	mov	r3, r0
 80077a4:	4619      	mov	r1, r3
 80077a6:	4620      	mov	r0, r4
 80077a8:	f7f9 fb58 	bl	8000e5c <__aeabi_fdiv>
 80077ac:	4603      	mov	r3, r0
 80077ae:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80077b2:	4618      	mov	r0, r3
 80077b4:	f000 feba 	bl	800852c <qFIS_Min>
 80077b8:	6138      	str	r0, [r7, #16]
    tmp = qFIS_Min( tmp, ( d - x )/( d - c ) ) ;
 80077ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80077bc:	6978      	ldr	r0, [r7, #20]
 80077be:	f7f9 f98f 	bl	8000ae0 <__aeabi_fsub>
 80077c2:	4603      	mov	r3, r0
 80077c4:	461c      	mov	r4, r3
 80077c6:	69b9      	ldr	r1, [r7, #24]
 80077c8:	6978      	ldr	r0, [r7, #20]
 80077ca:	f7f9 f989 	bl	8000ae0 <__aeabi_fsub>
 80077ce:	4603      	mov	r3, r0
 80077d0:	4619      	mov	r1, r3
 80077d2:	4620      	mov	r0, r4
 80077d4:	f7f9 fb42 	bl	8000e5c <__aeabi_fdiv>
 80077d8:	4603      	mov	r3, r0
 80077da:	4619      	mov	r1, r3
 80077dc:	6938      	ldr	r0, [r7, #16]
 80077de:	f000 fea5 	bl	800852c <qFIS_Min>
 80077e2:	6138      	str	r0, [r7, #16]

    return qFIS_Max( tmp , 0.0f );
 80077e4:	f04f 0100 	mov.w	r1, #0
 80077e8:	6938      	ldr	r0, [r7, #16]
 80077ea:	f000 feba 	bl	8008562 <qFIS_Max>
 80077ee:	4603      	mov	r3, r0
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	372c      	adds	r7, #44	; 0x2c
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd90      	pop	{r4, r7, pc}

080077f8 <qFIS_GBellMF>:
/*============================================================================*/
static float qFIS_GBellMF( const qFIS_IO_Base_t * const in,
                           const float *p,
                           const size_t n )
{
 80077f8:	b590      	push	{r4, r7, lr}
 80077fa:	b089      	sub	sp, #36	; 0x24
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	60f8      	str	r0, [r7, #12]
 8007800:	60b9      	str	r1, [r7, #8]
 8007802:	607a      	str	r2, [r7, #4]
    float a, b, c;
    float x = in[ 0 ].value;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	689b      	ldr	r3, [r3, #8]
 8007808:	61fb      	str	r3, [r7, #28]
    (void)n;

    a = p[ 0 ];
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	61bb      	str	r3, [r7, #24]
    b = p[ 1 ];
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	685b      	ldr	r3, [r3, #4]
 8007814:	617b      	str	r3, [r7, #20]
    c = p[ 2 ];
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	689b      	ldr	r3, [r3, #8]
 800781a:	613b      	str	r3, [r7, #16]
    
    return ( 1.0f/( 1.0f + QLIB_POW( QLIB_ABS( ( x - c )/a ) , 2.0f*b ) ) );
 800781c:	6939      	ldr	r1, [r7, #16]
 800781e:	69f8      	ldr	r0, [r7, #28]
 8007820:	f7f9 f95e 	bl	8000ae0 <__aeabi_fsub>
 8007824:	4603      	mov	r3, r0
 8007826:	69b9      	ldr	r1, [r7, #24]
 8007828:	4618      	mov	r0, r3
 800782a:	f7f9 fb17 	bl	8000e5c <__aeabi_fdiv>
 800782e:	4603      	mov	r3, r0
 8007830:	4618      	mov	r0, r3
 8007832:	f7fe fde7 	bl	8006404 <qFFMath_Abs>
 8007836:	4604      	mov	r4, r0
 8007838:	697b      	ldr	r3, [r7, #20]
 800783a:	4619      	mov	r1, r3
 800783c:	4618      	mov	r0, r3
 800783e:	f7f9 f951 	bl	8000ae4 <__addsf3>
 8007842:	4603      	mov	r3, r0
 8007844:	4619      	mov	r1, r3
 8007846:	4620      	mov	r0, r4
 8007848:	f7fe ff8e 	bl	8006768 <qFFMath_Pow>
 800784c:	4603      	mov	r3, r0
 800784e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8007852:	4618      	mov	r0, r3
 8007854:	f7f9 f946 	bl	8000ae4 <__addsf3>
 8007858:	4603      	mov	r3, r0
 800785a:	4619      	mov	r1, r3
 800785c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8007860:	f7f9 fafc 	bl	8000e5c <__aeabi_fdiv>
 8007864:	4603      	mov	r3, r0
}
 8007866:	4618      	mov	r0, r3
 8007868:	3724      	adds	r7, #36	; 0x24
 800786a:	46bd      	mov	sp, r7
 800786c:	bd90      	pop	{r4, r7, pc}

0800786e <qFIS_GaussMF>:
/*============================================================================*/
static float qFIS_GaussMF( const qFIS_IO_Base_t * const in,
                           const float *p,
                           const size_t n )
{
 800786e:	b580      	push	{r7, lr}
 8007870:	b088      	sub	sp, #32
 8007872:	af00      	add	r7, sp, #0
 8007874:	60f8      	str	r0, [r7, #12]
 8007876:	60b9      	str	r1, [r7, #8]
 8007878:	607a      	str	r2, [r7, #4]
    float a, c, tmp;
    float x = in[ 0 ].value;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	689b      	ldr	r3, [r3, #8]
 800787e:	61fb      	str	r3, [r7, #28]
    (void)n;

    a = p[ 0 ];
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	61bb      	str	r3, [r7, #24]
    c = p[ 1 ];
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	685b      	ldr	r3, [r3, #4]
 800788a:	617b      	str	r3, [r7, #20]
    tmp = ( x - c )/a;
 800788c:	6979      	ldr	r1, [r7, #20]
 800788e:	69f8      	ldr	r0, [r7, #28]
 8007890:	f7f9 f926 	bl	8000ae0 <__aeabi_fsub>
 8007894:	4603      	mov	r3, r0
 8007896:	69b9      	ldr	r1, [r7, #24]
 8007898:	4618      	mov	r0, r3
 800789a:	f7f9 fadf 	bl	8000e5c <__aeabi_fdiv>
 800789e:	4603      	mov	r3, r0
 80078a0:	613b      	str	r3, [r7, #16]

    return QLIB_EXP( -0.5f*tmp*tmp );
 80078a2:	f04f 413f 	mov.w	r1, #3204448256	; 0xbf000000
 80078a6:	6938      	ldr	r0, [r7, #16]
 80078a8:	f7f9 fa24 	bl	8000cf4 <__aeabi_fmul>
 80078ac:	4603      	mov	r3, r0
 80078ae:	6939      	ldr	r1, [r7, #16]
 80078b0:	4618      	mov	r0, r3
 80078b2:	f7f9 fa1f 	bl	8000cf4 <__aeabi_fmul>
 80078b6:	4603      	mov	r3, r0
 80078b8:	4618      	mov	r0, r3
 80078ba:	f7fe ff2d 	bl	8006718 <qFFMath_Exp>
 80078be:	4603      	mov	r3, r0
}
 80078c0:	4618      	mov	r0, r3
 80078c2:	3720      	adds	r7, #32
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bd80      	pop	{r7, pc}

080078c8 <qFIS_Gauss2MF>:
/*============================================================================*/
static float qFIS_Gauss2MF( const qFIS_IO_Base_t * const in,
                            const float *p,
                            const size_t n )
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b08a      	sub	sp, #40	; 0x28
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	60f8      	str	r0, [r7, #12]
 80078d0:	60b9      	str	r1, [r7, #8]
 80078d2:	607a      	str	r2, [r7, #4]
    float c1, c2, f1, f2;
    float x = in[ 0 ].value;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	689b      	ldr	r3, [r3, #8]
 80078d8:	627b      	str	r3, [r7, #36]	; 0x24

    c1 = p[ 1 ];
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	685b      	ldr	r3, [r3, #4]
 80078de:	623b      	str	r3, [r7, #32]
    c2 = p[ 3 ];
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	68db      	ldr	r3, [r3, #12]
 80078e4:	61fb      	str	r3, [r7, #28]
    f1 = ( x <= c1 ) ? qFIS_GaussMF( in , p, n ) : 1.0f;
 80078e6:	6a39      	ldr	r1, [r7, #32]
 80078e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80078ea:	f7f9 fbab 	bl	8001044 <__aeabi_fcmple>
 80078ee:	4603      	mov	r3, r0
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d006      	beq.n	8007902 <qFIS_Gauss2MF+0x3a>
 80078f4:	687a      	ldr	r2, [r7, #4]
 80078f6:	68b9      	ldr	r1, [r7, #8]
 80078f8:	68f8      	ldr	r0, [r7, #12]
 80078fa:	f7ff ffb8 	bl	800786e <qFIS_GaussMF>
 80078fe:	4603      	mov	r3, r0
 8007900:	e001      	b.n	8007906 <qFIS_Gauss2MF+0x3e>
 8007902:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8007906:	61bb      	str	r3, [r7, #24]
    f2 = ( x <= c2 ) ? qFIS_GaussMF( in , &p[ 2 ], n ) : 1.0f;
 8007908:	69f9      	ldr	r1, [r7, #28]
 800790a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800790c:	f7f9 fb9a 	bl	8001044 <__aeabi_fcmple>
 8007910:	4603      	mov	r3, r0
 8007912:	2b00      	cmp	r3, #0
 8007914:	d008      	beq.n	8007928 <qFIS_Gauss2MF+0x60>
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	3308      	adds	r3, #8
 800791a:	687a      	ldr	r2, [r7, #4]
 800791c:	4619      	mov	r1, r3
 800791e:	68f8      	ldr	r0, [r7, #12]
 8007920:	f7ff ffa5 	bl	800786e <qFIS_GaussMF>
 8007924:	4603      	mov	r3, r0
 8007926:	e001      	b.n	800792c <qFIS_Gauss2MF+0x64>
 8007928:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800792c:	617b      	str	r3, [r7, #20]

    return f1*f2;
 800792e:	6979      	ldr	r1, [r7, #20]
 8007930:	69b8      	ldr	r0, [r7, #24]
 8007932:	f7f9 f9df 	bl	8000cf4 <__aeabi_fmul>
 8007936:	4603      	mov	r3, r0
}
 8007938:	4618      	mov	r0, r3
 800793a:	3728      	adds	r7, #40	; 0x28
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}

08007940 <qFIS_SigMF>:
/*============================================================================*/
static float qFIS_SigMF( const qFIS_IO_Base_t * const in,
                         const float *p,
                         const size_t n )
{
 8007940:	b590      	push	{r4, r7, lr}
 8007942:	b089      	sub	sp, #36	; 0x24
 8007944:	af00      	add	r7, sp, #0
 8007946:	60f8      	str	r0, [r7, #12]
 8007948:	60b9      	str	r1, [r7, #8]
 800794a:	607a      	str	r2, [r7, #4]
    float a, b;
    float x = in[ 0 ].value;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	689b      	ldr	r3, [r3, #8]
 8007950:	61fb      	str	r3, [r7, #28]
    (void)n;

    a = p[ 0 ];
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	61bb      	str	r3, [r7, #24]
    b = p[ 1 ];
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	685b      	ldr	r3, [r3, #4]
 800795c:	617b      	str	r3, [r7, #20]

    return 1.0f/( 1.0f + QLIB_EXP( -a*( x - b ) ) );
 800795e:	69bb      	ldr	r3, [r7, #24]
 8007960:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8007964:	6979      	ldr	r1, [r7, #20]
 8007966:	69f8      	ldr	r0, [r7, #28]
 8007968:	f7f9 f8ba 	bl	8000ae0 <__aeabi_fsub>
 800796c:	4603      	mov	r3, r0
 800796e:	4619      	mov	r1, r3
 8007970:	4620      	mov	r0, r4
 8007972:	f7f9 f9bf 	bl	8000cf4 <__aeabi_fmul>
 8007976:	4603      	mov	r3, r0
 8007978:	4618      	mov	r0, r3
 800797a:	f7fe fecd 	bl	8006718 <qFFMath_Exp>
 800797e:	4603      	mov	r3, r0
 8007980:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8007984:	4618      	mov	r0, r3
 8007986:	f7f9 f8ad 	bl	8000ae4 <__addsf3>
 800798a:	4603      	mov	r3, r0
 800798c:	4619      	mov	r1, r3
 800798e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8007992:	f7f9 fa63 	bl	8000e5c <__aeabi_fdiv>
 8007996:	4603      	mov	r3, r0
}
 8007998:	4618      	mov	r0, r3
 800799a:	3724      	adds	r7, #36	; 0x24
 800799c:	46bd      	mov	sp, r7
 800799e:	bd90      	pop	{r4, r7, pc}

080079a0 <qFIS_TSigMF>:
/*============================================================================*/
static float qFIS_TSigMF( const qFIS_IO_Base_t * const in,
                          const float *p,
                          const size_t n )
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b08a      	sub	sp, #40	; 0x28
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	60f8      	str	r0, [r7, #12]
 80079a8:	60b9      	str	r1, [r7, #8]
 80079aa:	607a      	str	r2, [r7, #4]
    float a, b, y;
    float x = in[ 0 ].value;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	689b      	ldr	r3, [r3, #8]
 80079b0:	623b      	str	r3, [r7, #32]
    float min = in[ 0 ].min;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	61fb      	str	r3, [r7, #28]
    float max = in[ 0 ].max;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	685b      	ldr	r3, [r3, #4]
 80079bc:	61bb      	str	r3, [r7, #24]
    (void)n;

    a = p[ 0 ]; /*slope*/
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	617b      	str	r3, [r7, #20]
    b = p[ 1 ]; /*inflection*/
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	685b      	ldr	r3, [r3, #4]
 80079c8:	613b      	str	r3, [r7, #16]
    if ( qFMathEx_Equal( x, 1.0f ) ) {
 80079ca:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80079ce:	6a38      	ldr	r0, [r7, #32]
 80079d0:	f000 fe99 	bl	8008706 <qFMathEx_Equal>
 80079d4:	4603      	mov	r3, r0
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d00d      	beq.n	80079f6 <qFIS_TSigMF+0x56>
        if ( a >= 0.0f ) {
 80079da:	f04f 0100 	mov.w	r1, #0
 80079de:	6978      	ldr	r0, [r7, #20]
 80079e0:	f7f9 fb3a 	bl	8001058 <__aeabi_fcmpge>
 80079e4:	4603      	mov	r3, r0
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d002      	beq.n	80079f0 <qFIS_TSigMF+0x50>
            y = max;
 80079ea:	69bb      	ldr	r3, [r7, #24]
 80079ec:	627b      	str	r3, [r7, #36]	; 0x24
 80079ee:	e033      	b.n	8007a58 <qFIS_TSigMF+0xb8>
        }
        else {
            y = min;
 80079f0:	69fb      	ldr	r3, [r7, #28]
 80079f2:	627b      	str	r3, [r7, #36]	; 0x24
 80079f4:	e030      	b.n	8007a58 <qFIS_TSigMF+0xb8>
        }
    }
    else if ( qFMathEx_Equal( x, 0.0f ) ) {
 80079f6:	f04f 0100 	mov.w	r1, #0
 80079fa:	6a38      	ldr	r0, [r7, #32]
 80079fc:	f000 fe83 	bl	8008706 <qFMathEx_Equal>
 8007a00:	4603      	mov	r3, r0
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d00d      	beq.n	8007a22 <qFIS_TSigMF+0x82>
        if ( a >= 0.0f ) {
 8007a06:	f04f 0100 	mov.w	r1, #0
 8007a0a:	6978      	ldr	r0, [r7, #20]
 8007a0c:	f7f9 fb24 	bl	8001058 <__aeabi_fcmpge>
 8007a10:	4603      	mov	r3, r0
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d002      	beq.n	8007a1c <qFIS_TSigMF+0x7c>
            y = min;
 8007a16:	69fb      	ldr	r3, [r7, #28]
 8007a18:	627b      	str	r3, [r7, #36]	; 0x24
 8007a1a:	e01d      	b.n	8007a58 <qFIS_TSigMF+0xb8>
        }
        else {
            y = max;
 8007a1c:	69bb      	ldr	r3, [r7, #24]
 8007a1e:	627b      	str	r3, [r7, #36]	; 0x24
 8007a20:	e01a      	b.n	8007a58 <qFIS_TSigMF+0xb8>
        }
    }
    else {
        /*cstat -MISRAC2012-Dir-4.11_a*/
        y = b - ( QLIB_LOG( ( 1.0f/x ) - 1.0f )/a );
 8007a22:	6a39      	ldr	r1, [r7, #32]
 8007a24:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8007a28:	f7f9 fa18 	bl	8000e5c <__aeabi_fdiv>
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8007a32:	4618      	mov	r0, r3
 8007a34:	f7f9 f854 	bl	8000ae0 <__aeabi_fsub>
 8007a38:	4603      	mov	r3, r0
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	f7fe fe80 	bl	8006740 <qFFMath_Log>
 8007a40:	4603      	mov	r3, r0
 8007a42:	6979      	ldr	r1, [r7, #20]
 8007a44:	4618      	mov	r0, r3
 8007a46:	f7f9 fa09 	bl	8000e5c <__aeabi_fdiv>
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	4619      	mov	r1, r3
 8007a4e:	6938      	ldr	r0, [r7, #16]
 8007a50:	f7f9 f846 	bl	8000ae0 <__aeabi_fsub>
 8007a54:	4603      	mov	r3, r0
 8007a56:	627b      	str	r3, [r7, #36]	; 0x24
        /*cstat +MISRAC2012-Dir-4.11_a*/
    }

    return y;
 8007a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	3728      	adds	r7, #40	; 0x28
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd80      	pop	{r7, pc}

08007a62 <qFIS_DSigMF>:
/*============================================================================*/
static float qFIS_DSigMF( const qFIS_IO_Base_t * const in,
                          const float *p,
                          const size_t n )
{
 8007a62:	b590      	push	{r4, r7, lr}
 8007a64:	b085      	sub	sp, #20
 8007a66:	af00      	add	r7, sp, #0
 8007a68:	60f8      	str	r0, [r7, #12]
 8007a6a:	60b9      	str	r1, [r7, #8]
 8007a6c:	607a      	str	r2, [r7, #4]
    return QLIB_ABS( qFIS_SigMF( in , p, n ) - qFIS_SigMF( in , &p[ 2 ], n ) );
 8007a6e:	687a      	ldr	r2, [r7, #4]
 8007a70:	68b9      	ldr	r1, [r7, #8]
 8007a72:	68f8      	ldr	r0, [r7, #12]
 8007a74:	f7ff ff64 	bl	8007940 <qFIS_SigMF>
 8007a78:	4604      	mov	r4, r0
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	3308      	adds	r3, #8
 8007a7e:	687a      	ldr	r2, [r7, #4]
 8007a80:	4619      	mov	r1, r3
 8007a82:	68f8      	ldr	r0, [r7, #12]
 8007a84:	f7ff ff5c 	bl	8007940 <qFIS_SigMF>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	4619      	mov	r1, r3
 8007a8c:	4620      	mov	r0, r4
 8007a8e:	f7f9 f827 	bl	8000ae0 <__aeabi_fsub>
 8007a92:	4603      	mov	r3, r0
 8007a94:	4618      	mov	r0, r3
 8007a96:	f7fe fcb5 	bl	8006404 <qFFMath_Abs>
 8007a9a:	4603      	mov	r3, r0
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	3714      	adds	r7, #20
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd90      	pop	{r4, r7, pc}

08007aa4 <qFIS_PSigMF>:
/*============================================================================*/
static float qFIS_PSigMF( const qFIS_IO_Base_t * const in,
                          const float *p,
                          const size_t n )
{
 8007aa4:	b590      	push	{r4, r7, lr}
 8007aa6:	b085      	sub	sp, #20
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	60f8      	str	r0, [r7, #12]
 8007aac:	60b9      	str	r1, [r7, #8]
 8007aae:	607a      	str	r2, [r7, #4]
    return QLIB_ABS( qFIS_SigMF( in , p, n )*qFIS_SigMF( in , &p[ 2 ], n ) );
 8007ab0:	687a      	ldr	r2, [r7, #4]
 8007ab2:	68b9      	ldr	r1, [r7, #8]
 8007ab4:	68f8      	ldr	r0, [r7, #12]
 8007ab6:	f7ff ff43 	bl	8007940 <qFIS_SigMF>
 8007aba:	4604      	mov	r4, r0
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	3308      	adds	r3, #8
 8007ac0:	687a      	ldr	r2, [r7, #4]
 8007ac2:	4619      	mov	r1, r3
 8007ac4:	68f8      	ldr	r0, [r7, #12]
 8007ac6:	f7ff ff3b 	bl	8007940 <qFIS_SigMF>
 8007aca:	4603      	mov	r3, r0
 8007acc:	4619      	mov	r1, r3
 8007ace:	4620      	mov	r0, r4
 8007ad0:	f7f9 f910 	bl	8000cf4 <__aeabi_fmul>
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	f7fe fc94 	bl	8006404 <qFFMath_Abs>
 8007adc:	4603      	mov	r3, r0
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	3714      	adds	r7, #20
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd90      	pop	{r4, r7, pc}

08007ae6 <qFIS_SMF>:
/*============================================================================*/
static float qFIS_SMF( const qFIS_IO_Base_t * const in,
                       const float *p,
                       const size_t n )
{
 8007ae6:	b590      	push	{r4, r7, lr}
 8007ae8:	b08b      	sub	sp, #44	; 0x2c
 8007aea:	af00      	add	r7, sp, #0
 8007aec:	60f8      	str	r0, [r7, #12]
 8007aee:	60b9      	str	r1, [r7, #8]
 8007af0:	607a      	str	r2, [r7, #4]
    float a, b, tmp, y;
    float x = in[ 0 ].value;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	689b      	ldr	r3, [r3, #8]
 8007af6:	623b      	str	r3, [r7, #32]
    (void)n;

    a = p[ 0 ];
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	61fb      	str	r3, [r7, #28]
    b = p[ 1 ];
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	685b      	ldr	r3, [r3, #4]
 8007b02:	61bb      	str	r3, [r7, #24]
    if ( x <= a ) {
 8007b04:	69f9      	ldr	r1, [r7, #28]
 8007b06:	6a38      	ldr	r0, [r7, #32]
 8007b08:	f7f9 fa9c 	bl	8001044 <__aeabi_fcmple>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d003      	beq.n	8007b1a <qFIS_SMF+0x34>
        y =  0.0f;
 8007b12:	f04f 0300 	mov.w	r3, #0
 8007b16:	627b      	str	r3, [r7, #36]	; 0x24
 8007b18:	e081      	b.n	8007c1e <qFIS_SMF+0x138>
    }
    else if ( x >= b ) {
 8007b1a:	69b9      	ldr	r1, [r7, #24]
 8007b1c:	6a38      	ldr	r0, [r7, #32]
 8007b1e:	f7f9 fa9b 	bl	8001058 <__aeabi_fcmpge>
 8007b22:	4603      	mov	r3, r0
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d003      	beq.n	8007b30 <qFIS_SMF+0x4a>
        y = 1.0f;
 8007b28:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8007b2c:	627b      	str	r3, [r7, #36]	; 0x24
 8007b2e:	e076      	b.n	8007c1e <qFIS_SMF+0x138>
    }
    else if ( ( x >= a ) && ( x <= ( ( a + b )*0.5f ) ) ) {
 8007b30:	69f9      	ldr	r1, [r7, #28]
 8007b32:	6a38      	ldr	r0, [r7, #32]
 8007b34:	f7f9 fa90 	bl	8001058 <__aeabi_fcmpge>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d02f      	beq.n	8007b9e <qFIS_SMF+0xb8>
 8007b3e:	69b9      	ldr	r1, [r7, #24]
 8007b40:	69f8      	ldr	r0, [r7, #28]
 8007b42:	f7f8 ffcf 	bl	8000ae4 <__addsf3>
 8007b46:	4603      	mov	r3, r0
 8007b48:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	f7f9 f8d1 	bl	8000cf4 <__aeabi_fmul>
 8007b52:	4603      	mov	r3, r0
 8007b54:	4619      	mov	r1, r3
 8007b56:	6a38      	ldr	r0, [r7, #32]
 8007b58:	f7f9 fa74 	bl	8001044 <__aeabi_fcmple>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d01d      	beq.n	8007b9e <qFIS_SMF+0xb8>
        tmp = ( x - a )/( b - a );
 8007b62:	69f9      	ldr	r1, [r7, #28]
 8007b64:	6a38      	ldr	r0, [r7, #32]
 8007b66:	f7f8 ffbb 	bl	8000ae0 <__aeabi_fsub>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	461c      	mov	r4, r3
 8007b6e:	69f9      	ldr	r1, [r7, #28]
 8007b70:	69b8      	ldr	r0, [r7, #24]
 8007b72:	f7f8 ffb5 	bl	8000ae0 <__aeabi_fsub>
 8007b76:	4603      	mov	r3, r0
 8007b78:	4619      	mov	r1, r3
 8007b7a:	4620      	mov	r0, r4
 8007b7c:	f7f9 f96e 	bl	8000e5c <__aeabi_fdiv>
 8007b80:	4603      	mov	r3, r0
 8007b82:	617b      	str	r3, [r7, #20]
        y = 2.0f*tmp*tmp;
 8007b84:	697b      	ldr	r3, [r7, #20]
 8007b86:	4619      	mov	r1, r3
 8007b88:	4618      	mov	r0, r3
 8007b8a:	f7f8 ffab 	bl	8000ae4 <__addsf3>
 8007b8e:	4603      	mov	r3, r0
 8007b90:	4619      	mov	r1, r3
 8007b92:	6978      	ldr	r0, [r7, #20]
 8007b94:	f7f9 f8ae 	bl	8000cf4 <__aeabi_fmul>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	627b      	str	r3, [r7, #36]	; 0x24
 8007b9c:	e03f      	b.n	8007c1e <qFIS_SMF+0x138>
    }
    else if ( ( x <= b ) && ( x >= ( ( a + b )*0.5f ) ) ) {
 8007b9e:	69b9      	ldr	r1, [r7, #24]
 8007ba0:	6a38      	ldr	r0, [r7, #32]
 8007ba2:	f7f9 fa4f 	bl	8001044 <__aeabi_fcmple>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d035      	beq.n	8007c18 <qFIS_SMF+0x132>
 8007bac:	69b9      	ldr	r1, [r7, #24]
 8007bae:	69f8      	ldr	r0, [r7, #28]
 8007bb0:	f7f8 ff98 	bl	8000ae4 <__addsf3>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f7f9 f89a 	bl	8000cf4 <__aeabi_fmul>
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	4619      	mov	r1, r3
 8007bc4:	6a38      	ldr	r0, [r7, #32]
 8007bc6:	f7f9 fa47 	bl	8001058 <__aeabi_fcmpge>
 8007bca:	4603      	mov	r3, r0
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d023      	beq.n	8007c18 <qFIS_SMF+0x132>
        tmp = ( x - b )/( b - a );
 8007bd0:	69b9      	ldr	r1, [r7, #24]
 8007bd2:	6a38      	ldr	r0, [r7, #32]
 8007bd4:	f7f8 ff84 	bl	8000ae0 <__aeabi_fsub>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	461c      	mov	r4, r3
 8007bdc:	69f9      	ldr	r1, [r7, #28]
 8007bde:	69b8      	ldr	r0, [r7, #24]
 8007be0:	f7f8 ff7e 	bl	8000ae0 <__aeabi_fsub>
 8007be4:	4603      	mov	r3, r0
 8007be6:	4619      	mov	r1, r3
 8007be8:	4620      	mov	r0, r4
 8007bea:	f7f9 f937 	bl	8000e5c <__aeabi_fdiv>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	617b      	str	r3, [r7, #20]
        y = ( 1.0f - ( 2.0f*tmp*tmp ) );
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	4619      	mov	r1, r3
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f7f8 ff74 	bl	8000ae4 <__addsf3>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	6979      	ldr	r1, [r7, #20]
 8007c00:	4618      	mov	r0, r3
 8007c02:	f7f9 f877 	bl	8000cf4 <__aeabi_fmul>
 8007c06:	4603      	mov	r3, r0
 8007c08:	4619      	mov	r1, r3
 8007c0a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8007c0e:	f7f8 ff67 	bl	8000ae0 <__aeabi_fsub>
 8007c12:	4603      	mov	r3, r0
 8007c14:	627b      	str	r3, [r7, #36]	; 0x24
 8007c16:	e002      	b.n	8007c1e <qFIS_SMF+0x138>
    }
    else {
        y = 0.0f;
 8007c18:	f04f 0300 	mov.w	r3, #0
 8007c1c:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return y;
 8007c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007c20:	4618      	mov	r0, r3
 8007c22:	372c      	adds	r7, #44	; 0x2c
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd90      	pop	{r4, r7, pc}

08007c28 <qFIS_TSMF>:
/*============================================================================*/
static float qFIS_TSMF( const qFIS_IO_Base_t * const in,
                        const float *p,
                        const size_t n )
{
 8007c28:	b590      	push	{r4, r7, lr}
 8007c2a:	b091      	sub	sp, #68	; 0x44
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	60f8      	str	r0, [r7, #12]
 8007c30:	60b9      	str	r1, [r7, #8]
 8007c32:	607a      	str	r2, [r7, #4]
    float diff, a, b, ta, tb, ma, mb;
    float x = in[ 0 ].value;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	689b      	ldr	r3, [r3, #8]
 8007c38:	63fb      	str	r3, [r7, #60]	; 0x3c
    (void)n;
    qFIS_IO_Base_t tmp;

    a = p[ 0 ]; /*start*/
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	63bb      	str	r3, [r7, #56]	; 0x38
    b = p[ 1 ]; /*end*/
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	685b      	ldr	r3, [r3, #4]
 8007c44:	637b      	str	r3, [r7, #52]	; 0x34
    diff = b - a;
 8007c46:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007c48:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007c4a:	f7f8 ff49 	bl	8000ae0 <__aeabi_fsub>
 8007c4e:	4603      	mov	r3, r0
 8007c50:	633b      	str	r3, [r7, #48]	; 0x30
    diff = 0.5f*diff*diff;
 8007c52:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8007c56:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007c58:	f7f9 f84c 	bl	8000cf4 <__aeabi_fmul>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	4619      	mov	r1, r3
 8007c60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007c62:	f7f9 f847 	bl	8000cf4 <__aeabi_fmul>
 8007c66:	4603      	mov	r3, r0
 8007c68:	633b      	str	r3, [r7, #48]	; 0x30
    /*cstat -MISRAC2012-Dir-4.11_a -MISRAC2012-Dir-4.11_b*/
    ta = a + QLIB_SQRT( x*diff );
 8007c6a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007c6c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007c6e:	f7f9 f841 	bl	8000cf4 <__aeabi_fmul>
 8007c72:	4603      	mov	r3, r0
 8007c74:	4618      	mov	r0, r3
 8007c76:	f7fe fbda 	bl	800642e <qFFMath_Sqrt>
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	4619      	mov	r1, r3
 8007c7e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007c80:	f7f8 ff30 	bl	8000ae4 <__addsf3>
 8007c84:	4603      	mov	r3, r0
 8007c86:	62fb      	str	r3, [r7, #44]	; 0x2c
    tmp.value = ta;
 8007c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c8a:	61fb      	str	r3, [r7, #28]
    ma = qFIS_SMF( &tmp, p, n );
 8007c8c:	f107 0314 	add.w	r3, r7, #20
 8007c90:	687a      	ldr	r2, [r7, #4]
 8007c92:	68b9      	ldr	r1, [r7, #8]
 8007c94:	4618      	mov	r0, r3
 8007c96:	f7ff ff26 	bl	8007ae6 <qFIS_SMF>
 8007c9a:	62b8      	str	r0, [r7, #40]	; 0x28
    tb = b + QLIB_SQRT( -( x - 1.0f )*diff );
 8007c9c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8007ca0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007ca2:	f7f8 ff1d 	bl	8000ae0 <__aeabi_fsub>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8007cac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007cae:	4618      	mov	r0, r3
 8007cb0:	f7f9 f820 	bl	8000cf4 <__aeabi_fmul>
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	f7fe fbb9 	bl	800642e <qFFMath_Sqrt>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	4619      	mov	r1, r3
 8007cc0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007cc2:	f7f8 ff0f 	bl	8000ae4 <__addsf3>
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	627b      	str	r3, [r7, #36]	; 0x24
    tmp.value = tb;
 8007cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ccc:	61fb      	str	r3, [r7, #28]
    mb = qFIS_SMF( &tmp, p, n );
 8007cce:	f107 0314 	add.w	r3, r7, #20
 8007cd2:	687a      	ldr	r2, [r7, #4]
 8007cd4:	68b9      	ldr	r1, [r7, #8]
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f7ff ff05 	bl	8007ae6 <qFIS_SMF>
 8007cdc:	6238      	str	r0, [r7, #32]
    /*cstat +MISRAC2012-Dir-4.11_a +MISRAC2012-Dir-4.11_b*/
    return  ( QLIB_ABS( x - ma ) < QLIB_ABS( x - mb ) ) ? ta : tb;
 8007cde:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007ce0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007ce2:	f7f8 fefd 	bl	8000ae0 <__aeabi_fsub>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	4618      	mov	r0, r3
 8007cea:	f7fe fb8b 	bl	8006404 <qFFMath_Abs>
 8007cee:	4604      	mov	r4, r0
 8007cf0:	6a39      	ldr	r1, [r7, #32]
 8007cf2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007cf4:	f7f8 fef4 	bl	8000ae0 <__aeabi_fsub>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f7fe fb82 	bl	8006404 <qFFMath_Abs>
 8007d00:	4603      	mov	r3, r0
 8007d02:	4619      	mov	r1, r3
 8007d04:	4620      	mov	r0, r4
 8007d06:	f7f9 f993 	bl	8001030 <__aeabi_fcmplt>
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d001      	beq.n	8007d14 <qFIS_TSMF+0xec>
 8007d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d12:	e000      	b.n	8007d16 <qFIS_TSMF+0xee>
 8007d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007d16:	4618      	mov	r0, r3
 8007d18:	3744      	adds	r7, #68	; 0x44
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd90      	pop	{r4, r7, pc}

08007d1e <qFIS_ZMF>:
/*============================================================================*/
static float qFIS_ZMF( const qFIS_IO_Base_t * const in,
                       const float *p,
                       const size_t n )
{
 8007d1e:	b590      	push	{r4, r7, lr}
 8007d20:	b08b      	sub	sp, #44	; 0x2c
 8007d22:	af00      	add	r7, sp, #0
 8007d24:	60f8      	str	r0, [r7, #12]
 8007d26:	60b9      	str	r1, [r7, #8]
 8007d28:	607a      	str	r2, [r7, #4]
    float a, b, tmp, y;
    float x = in[ 0 ].value;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	689b      	ldr	r3, [r3, #8]
 8007d2e:	623b      	str	r3, [r7, #32]
    (void)n;

    a = p[ 0 ];
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	61fb      	str	r3, [r7, #28]
    b = p[ 1 ];
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	685b      	ldr	r3, [r3, #4]
 8007d3a:	61bb      	str	r3, [r7, #24]
    if ( x <= a ) {
 8007d3c:	69f9      	ldr	r1, [r7, #28]
 8007d3e:	6a38      	ldr	r0, [r7, #32]
 8007d40:	f7f9 f980 	bl	8001044 <__aeabi_fcmple>
 8007d44:	4603      	mov	r3, r0
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d003      	beq.n	8007d52 <qFIS_ZMF+0x34>
        y = 1.0f;
 8007d4a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8007d4e:	627b      	str	r3, [r7, #36]	; 0x24
 8007d50:	e081      	b.n	8007e56 <qFIS_ZMF+0x138>
    }
    else if ( x >= b ) {
 8007d52:	69b9      	ldr	r1, [r7, #24]
 8007d54:	6a38      	ldr	r0, [r7, #32]
 8007d56:	f7f9 f97f 	bl	8001058 <__aeabi_fcmpge>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d003      	beq.n	8007d68 <qFIS_ZMF+0x4a>
        y = 0.0f;
 8007d60:	f04f 0300 	mov.w	r3, #0
 8007d64:	627b      	str	r3, [r7, #36]	; 0x24
 8007d66:	e076      	b.n	8007e56 <qFIS_ZMF+0x138>
    }
    else if ( ( x >= a ) && ( x <= ( ( a + b )*0.5f ) ) ) {
 8007d68:	69f9      	ldr	r1, [r7, #28]
 8007d6a:	6a38      	ldr	r0, [r7, #32]
 8007d6c:	f7f9 f974 	bl	8001058 <__aeabi_fcmpge>
 8007d70:	4603      	mov	r3, r0
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d035      	beq.n	8007de2 <qFIS_ZMF+0xc4>
 8007d76:	69b9      	ldr	r1, [r7, #24]
 8007d78:	69f8      	ldr	r0, [r7, #28]
 8007d7a:	f7f8 feb3 	bl	8000ae4 <__addsf3>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8007d84:	4618      	mov	r0, r3
 8007d86:	f7f8 ffb5 	bl	8000cf4 <__aeabi_fmul>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	4619      	mov	r1, r3
 8007d8e:	6a38      	ldr	r0, [r7, #32]
 8007d90:	f7f9 f958 	bl	8001044 <__aeabi_fcmple>
 8007d94:	4603      	mov	r3, r0
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d023      	beq.n	8007de2 <qFIS_ZMF+0xc4>
        tmp = ( x - a )/( b - a );
 8007d9a:	69f9      	ldr	r1, [r7, #28]
 8007d9c:	6a38      	ldr	r0, [r7, #32]
 8007d9e:	f7f8 fe9f 	bl	8000ae0 <__aeabi_fsub>
 8007da2:	4603      	mov	r3, r0
 8007da4:	461c      	mov	r4, r3
 8007da6:	69f9      	ldr	r1, [r7, #28]
 8007da8:	69b8      	ldr	r0, [r7, #24]
 8007daa:	f7f8 fe99 	bl	8000ae0 <__aeabi_fsub>
 8007dae:	4603      	mov	r3, r0
 8007db0:	4619      	mov	r1, r3
 8007db2:	4620      	mov	r0, r4
 8007db4:	f7f9 f852 	bl	8000e5c <__aeabi_fdiv>
 8007db8:	4603      	mov	r3, r0
 8007dba:	617b      	str	r3, [r7, #20]
        y = 1.0f - ( 2.0f*tmp*tmp );
 8007dbc:	697b      	ldr	r3, [r7, #20]
 8007dbe:	4619      	mov	r1, r3
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	f7f8 fe8f 	bl	8000ae4 <__addsf3>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	6979      	ldr	r1, [r7, #20]
 8007dca:	4618      	mov	r0, r3
 8007dcc:	f7f8 ff92 	bl	8000cf4 <__aeabi_fmul>
 8007dd0:	4603      	mov	r3, r0
 8007dd2:	4619      	mov	r1, r3
 8007dd4:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8007dd8:	f7f8 fe82 	bl	8000ae0 <__aeabi_fsub>
 8007ddc:	4603      	mov	r3, r0
 8007dde:	627b      	str	r3, [r7, #36]	; 0x24
 8007de0:	e039      	b.n	8007e56 <qFIS_ZMF+0x138>
    }
    else if ( ( x <= b ) && ( x >= ( ( a + b )*0.5f ) ) ) {
 8007de2:	69b9      	ldr	r1, [r7, #24]
 8007de4:	6a38      	ldr	r0, [r7, #32]
 8007de6:	f7f9 f92d 	bl	8001044 <__aeabi_fcmple>
 8007dea:	4603      	mov	r3, r0
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d02f      	beq.n	8007e50 <qFIS_ZMF+0x132>
 8007df0:	69b9      	ldr	r1, [r7, #24]
 8007df2:	69f8      	ldr	r0, [r7, #28]
 8007df4:	f7f8 fe76 	bl	8000ae4 <__addsf3>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8007dfe:	4618      	mov	r0, r3
 8007e00:	f7f8 ff78 	bl	8000cf4 <__aeabi_fmul>
 8007e04:	4603      	mov	r3, r0
 8007e06:	4619      	mov	r1, r3
 8007e08:	6a38      	ldr	r0, [r7, #32]
 8007e0a:	f7f9 f925 	bl	8001058 <__aeabi_fcmpge>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d01d      	beq.n	8007e50 <qFIS_ZMF+0x132>
        tmp = ( x - b )/( b - a );
 8007e14:	69b9      	ldr	r1, [r7, #24]
 8007e16:	6a38      	ldr	r0, [r7, #32]
 8007e18:	f7f8 fe62 	bl	8000ae0 <__aeabi_fsub>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	461c      	mov	r4, r3
 8007e20:	69f9      	ldr	r1, [r7, #28]
 8007e22:	69b8      	ldr	r0, [r7, #24]
 8007e24:	f7f8 fe5c 	bl	8000ae0 <__aeabi_fsub>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	4619      	mov	r1, r3
 8007e2c:	4620      	mov	r0, r4
 8007e2e:	f7f9 f815 	bl	8000e5c <__aeabi_fdiv>
 8007e32:	4603      	mov	r3, r0
 8007e34:	617b      	str	r3, [r7, #20]
        y = 2.0f*tmp*tmp;
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	4619      	mov	r1, r3
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	f7f8 fe52 	bl	8000ae4 <__addsf3>
 8007e40:	4603      	mov	r3, r0
 8007e42:	4619      	mov	r1, r3
 8007e44:	6978      	ldr	r0, [r7, #20]
 8007e46:	f7f8 ff55 	bl	8000cf4 <__aeabi_fmul>
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	627b      	str	r3, [r7, #36]	; 0x24
 8007e4e:	e002      	b.n	8007e56 <qFIS_ZMF+0x138>
    }
    else {
        y = 0.0f;
 8007e50:	f04f 0300 	mov.w	r3, #0
 8007e54:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return y;
 8007e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007e58:	4618      	mov	r0, r3
 8007e5a:	372c      	adds	r7, #44	; 0x2c
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bd90      	pop	{r4, r7, pc}

08007e60 <qFIS_LinSMF>:
/*============================================================================*/
static float qFIS_LinSMF( const qFIS_IO_Base_t * const in,
                          const float *p,
                          const size_t n )
{
 8007e60:	b590      	push	{r4, r7, lr}
 8007e62:	b089      	sub	sp, #36	; 0x24
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	60f8      	str	r0, [r7, #12]
 8007e68:	60b9      	str	r1, [r7, #8]
 8007e6a:	607a      	str	r2, [r7, #4]
    float a, b, y;
    float x = in[ 0 ].value;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	689b      	ldr	r3, [r3, #8]
 8007e70:	61bb      	str	r3, [r7, #24]
    (void)n;

    a = p[ 0 ];
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	617b      	str	r3, [r7, #20]
    b = p[ 1 ];
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	685b      	ldr	r3, [r3, #4]
 8007e7c:	613b      	str	r3, [r7, #16]
    if ( a < b ) {
 8007e7e:	6939      	ldr	r1, [r7, #16]
 8007e80:	6978      	ldr	r0, [r7, #20]
 8007e82:	f7f9 f8d5 	bl	8001030 <__aeabi_fcmplt>
 8007e86:	4603      	mov	r3, r0
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d027      	beq.n	8007edc <qFIS_LinSMF+0x7c>
        if ( x < a ) {
 8007e8c:	6979      	ldr	r1, [r7, #20]
 8007e8e:	69b8      	ldr	r0, [r7, #24]
 8007e90:	f7f9 f8ce 	bl	8001030 <__aeabi_fcmplt>
 8007e94:	4603      	mov	r3, r0
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d003      	beq.n	8007ea2 <qFIS_LinSMF+0x42>
            y = 0.0f;
 8007e9a:	f04f 0300 	mov.w	r3, #0
 8007e9e:	61fb      	str	r3, [r7, #28]
 8007ea0:	e034      	b.n	8007f0c <qFIS_LinSMF+0xac>
        }
        else if ( x > b ) {
 8007ea2:	6939      	ldr	r1, [r7, #16]
 8007ea4:	69b8      	ldr	r0, [r7, #24]
 8007ea6:	f7f9 f8e1 	bl	800106c <__aeabi_fcmpgt>
 8007eaa:	4603      	mov	r3, r0
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d003      	beq.n	8007eb8 <qFIS_LinSMF+0x58>
            y = 1.0f;
 8007eb0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8007eb4:	61fb      	str	r3, [r7, #28]
 8007eb6:	e029      	b.n	8007f0c <qFIS_LinSMF+0xac>
        }
        else {
            y = ( x - a )/( b - a );
 8007eb8:	6979      	ldr	r1, [r7, #20]
 8007eba:	69b8      	ldr	r0, [r7, #24]
 8007ebc:	f7f8 fe10 	bl	8000ae0 <__aeabi_fsub>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	461c      	mov	r4, r3
 8007ec4:	6979      	ldr	r1, [r7, #20]
 8007ec6:	6938      	ldr	r0, [r7, #16]
 8007ec8:	f7f8 fe0a 	bl	8000ae0 <__aeabi_fsub>
 8007ecc:	4603      	mov	r3, r0
 8007ece:	4619      	mov	r1, r3
 8007ed0:	4620      	mov	r0, r4
 8007ed2:	f7f8 ffc3 	bl	8000e5c <__aeabi_fdiv>
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	61fb      	str	r3, [r7, #28]
 8007eda:	e017      	b.n	8007f0c <qFIS_LinSMF+0xac>
        }
    }
    else if ( qFMathEx_Equal( a, b ) ) {
 8007edc:	6939      	ldr	r1, [r7, #16]
 8007ede:	6978      	ldr	r0, [r7, #20]
 8007ee0:	f000 fc11 	bl	8008706 <qFMathEx_Equal>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d00d      	beq.n	8007f06 <qFIS_LinSMF+0xa6>
        y = ( x < a ) ? 0.0f : 1.0f;
 8007eea:	6979      	ldr	r1, [r7, #20]
 8007eec:	69b8      	ldr	r0, [r7, #24]
 8007eee:	f7f9 f89f 	bl	8001030 <__aeabi_fcmplt>
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d002      	beq.n	8007efe <qFIS_LinSMF+0x9e>
 8007ef8:	f04f 0300 	mov.w	r3, #0
 8007efc:	e001      	b.n	8007f02 <qFIS_LinSMF+0xa2>
 8007efe:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8007f02:	61fb      	str	r3, [r7, #28]
 8007f04:	e002      	b.n	8007f0c <qFIS_LinSMF+0xac>
    }
    else {
        y = 0.0f;
 8007f06:	f04f 0300 	mov.w	r3, #0
 8007f0a:	61fb      	str	r3, [r7, #28]
    }

    return y;
 8007f0c:	69fb      	ldr	r3, [r7, #28]
}
 8007f0e:	4618      	mov	r0, r3
 8007f10:	3724      	adds	r7, #36	; 0x24
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bd90      	pop	{r4, r7, pc}

08007f16 <qFIS_LinZMF>:
/*============================================================================*/
static float qFIS_LinZMF( const qFIS_IO_Base_t * const in,
                          const float *p,
                          const size_t n )
{
 8007f16:	b590      	push	{r4, r7, lr}
 8007f18:	b089      	sub	sp, #36	; 0x24
 8007f1a:	af00      	add	r7, sp, #0
 8007f1c:	60f8      	str	r0, [r7, #12]
 8007f1e:	60b9      	str	r1, [r7, #8]
 8007f20:	607a      	str	r2, [r7, #4]
    float a, b, y;
    float x = in[ 0 ].value;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	689b      	ldr	r3, [r3, #8]
 8007f26:	61bb      	str	r3, [r7, #24]
    (void)n;

    a = p[ 0 ];
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	617b      	str	r3, [r7, #20]
    b = p[ 1 ];
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	685b      	ldr	r3, [r3, #4]
 8007f32:	613b      	str	r3, [r7, #16]
    if ( a < b ) {
 8007f34:	6939      	ldr	r1, [r7, #16]
 8007f36:	6978      	ldr	r0, [r7, #20]
 8007f38:	f7f9 f87a 	bl	8001030 <__aeabi_fcmplt>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d027      	beq.n	8007f92 <qFIS_LinZMF+0x7c>
        if ( x < a ) {
 8007f42:	6979      	ldr	r1, [r7, #20]
 8007f44:	69b8      	ldr	r0, [r7, #24]
 8007f46:	f7f9 f873 	bl	8001030 <__aeabi_fcmplt>
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d003      	beq.n	8007f58 <qFIS_LinZMF+0x42>
            y = 1.0f;
 8007f50:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8007f54:	61fb      	str	r3, [r7, #28]
 8007f56:	e034      	b.n	8007fc2 <qFIS_LinZMF+0xac>
        }
        else if ( x > b ) {
 8007f58:	6939      	ldr	r1, [r7, #16]
 8007f5a:	69b8      	ldr	r0, [r7, #24]
 8007f5c:	f7f9 f886 	bl	800106c <__aeabi_fcmpgt>
 8007f60:	4603      	mov	r3, r0
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d003      	beq.n	8007f6e <qFIS_LinZMF+0x58>
            y = 0.0f;
 8007f66:	f04f 0300 	mov.w	r3, #0
 8007f6a:	61fb      	str	r3, [r7, #28]
 8007f6c:	e029      	b.n	8007fc2 <qFIS_LinZMF+0xac>
        }
        else {
            y = ( a - x )/( a - b );
 8007f6e:	69b9      	ldr	r1, [r7, #24]
 8007f70:	6978      	ldr	r0, [r7, #20]
 8007f72:	f7f8 fdb5 	bl	8000ae0 <__aeabi_fsub>
 8007f76:	4603      	mov	r3, r0
 8007f78:	461c      	mov	r4, r3
 8007f7a:	6939      	ldr	r1, [r7, #16]
 8007f7c:	6978      	ldr	r0, [r7, #20]
 8007f7e:	f7f8 fdaf 	bl	8000ae0 <__aeabi_fsub>
 8007f82:	4603      	mov	r3, r0
 8007f84:	4619      	mov	r1, r3
 8007f86:	4620      	mov	r0, r4
 8007f88:	f7f8 ff68 	bl	8000e5c <__aeabi_fdiv>
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	61fb      	str	r3, [r7, #28]
 8007f90:	e017      	b.n	8007fc2 <qFIS_LinZMF+0xac>
        }
    }
    else if ( qFMathEx_Equal( a, b ) ) {
 8007f92:	6939      	ldr	r1, [r7, #16]
 8007f94:	6978      	ldr	r0, [r7, #20]
 8007f96:	f000 fbb6 	bl	8008706 <qFMathEx_Equal>
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d00d      	beq.n	8007fbc <qFIS_LinZMF+0xa6>
        y = ( x < a ) ? 1.0f : 0.0f;
 8007fa0:	6979      	ldr	r1, [r7, #20]
 8007fa2:	69b8      	ldr	r0, [r7, #24]
 8007fa4:	f7f9 f844 	bl	8001030 <__aeabi_fcmplt>
 8007fa8:	4603      	mov	r3, r0
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d002      	beq.n	8007fb4 <qFIS_LinZMF+0x9e>
 8007fae:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8007fb2:	e001      	b.n	8007fb8 <qFIS_LinZMF+0xa2>
 8007fb4:	f04f 0300 	mov.w	r3, #0
 8007fb8:	61fb      	str	r3, [r7, #28]
 8007fba:	e002      	b.n	8007fc2 <qFIS_LinZMF+0xac>
    }
    else {
        y = 0.0f;
 8007fbc:	f04f 0300 	mov.w	r3, #0
 8007fc0:	61fb      	str	r3, [r7, #28]
    }

    return y;
 8007fc2:	69fb      	ldr	r3, [r7, #28]
}
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	3724      	adds	r7, #36	; 0x24
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bd90      	pop	{r4, r7, pc}

08007fcc <qFIS_TZMF>:
/*============================================================================*/
static float qFIS_TZMF( const qFIS_IO_Base_t * const in,
                        const float *p,
                        const size_t n )
{
 8007fcc:	b590      	push	{r4, r7, lr}
 8007fce:	b091      	sub	sp, #68	; 0x44
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	60f8      	str	r0, [r7, #12]
 8007fd4:	60b9      	str	r1, [r7, #8]
 8007fd6:	607a      	str	r2, [r7, #4]
    float diff, a, b, ta, tb, ma, mb;
    float x = in[ 0 ].value;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	689b      	ldr	r3, [r3, #8]
 8007fdc:	63fb      	str	r3, [r7, #60]	; 0x3c
    (void)n;
    qFIS_IO_Base_t tmp;

    a = p[ 0 ]; /*start*/
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	63bb      	str	r3, [r7, #56]	; 0x38
    b = p[ 1 ]; /*end*/
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	685b      	ldr	r3, [r3, #4]
 8007fe8:	637b      	str	r3, [r7, #52]	; 0x34
    diff = b - a;
 8007fea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007fec:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007fee:	f7f8 fd77 	bl	8000ae0 <__aeabi_fsub>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	633b      	str	r3, [r7, #48]	; 0x30
    diff = 0.5f*diff*diff;
 8007ff6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8007ffa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007ffc:	f7f8 fe7a 	bl	8000cf4 <__aeabi_fmul>
 8008000:	4603      	mov	r3, r0
 8008002:	4619      	mov	r1, r3
 8008004:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008006:	f7f8 fe75 	bl	8000cf4 <__aeabi_fmul>
 800800a:	4603      	mov	r3, r0
 800800c:	633b      	str	r3, [r7, #48]	; 0x30
    /*cstat -MISRAC2012-Dir-4.11_a -MISRAC2012-Dir-4.11_b*/
    ta = a + QLIB_SQRT( -( x - 1.0f )*diff );
 800800e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8008012:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008014:	f7f8 fd64 	bl	8000ae0 <__aeabi_fsub>
 8008018:	4603      	mov	r3, r0
 800801a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800801e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008020:	4618      	mov	r0, r3
 8008022:	f7f8 fe67 	bl	8000cf4 <__aeabi_fmul>
 8008026:	4603      	mov	r3, r0
 8008028:	4618      	mov	r0, r3
 800802a:	f7fe fa00 	bl	800642e <qFFMath_Sqrt>
 800802e:	4603      	mov	r3, r0
 8008030:	4619      	mov	r1, r3
 8008032:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008034:	f7f8 fd56 	bl	8000ae4 <__addsf3>
 8008038:	4603      	mov	r3, r0
 800803a:	62fb      	str	r3, [r7, #44]	; 0x2c
    tmp.value = ta;
 800803c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800803e:	61fb      	str	r3, [r7, #28]
    ma = qFIS_SMF( &tmp, p, n );
 8008040:	f107 0314 	add.w	r3, r7, #20
 8008044:	687a      	ldr	r2, [r7, #4]
 8008046:	68b9      	ldr	r1, [r7, #8]
 8008048:	4618      	mov	r0, r3
 800804a:	f7ff fd4c 	bl	8007ae6 <qFIS_SMF>
 800804e:	62b8      	str	r0, [r7, #40]	; 0x28
    tb = b + QLIB_SQRT( x*diff );
 8008050:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008052:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008054:	f7f8 fe4e 	bl	8000cf4 <__aeabi_fmul>
 8008058:	4603      	mov	r3, r0
 800805a:	4618      	mov	r0, r3
 800805c:	f7fe f9e7 	bl	800642e <qFFMath_Sqrt>
 8008060:	4603      	mov	r3, r0
 8008062:	4619      	mov	r1, r3
 8008064:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008066:	f7f8 fd3d 	bl	8000ae4 <__addsf3>
 800806a:	4603      	mov	r3, r0
 800806c:	627b      	str	r3, [r7, #36]	; 0x24
    tmp.value = tb;
 800806e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008070:	61fb      	str	r3, [r7, #28]
    mb = qFIS_SMF( &tmp, p, n );
 8008072:	f107 0314 	add.w	r3, r7, #20
 8008076:	687a      	ldr	r2, [r7, #4]
 8008078:	68b9      	ldr	r1, [r7, #8]
 800807a:	4618      	mov	r0, r3
 800807c:	f7ff fd33 	bl	8007ae6 <qFIS_SMF>
 8008080:	6238      	str	r0, [r7, #32]
    /*cstat +MISRAC2012-Dir-4.11_a +MISRAC2012-Dir-4.11_b*/
    return  ( QLIB_ABS( x - ma ) < QLIB_ABS( x - mb ) ) ? ta : tb;
 8008082:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008084:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008086:	f7f8 fd2b 	bl	8000ae0 <__aeabi_fsub>
 800808a:	4603      	mov	r3, r0
 800808c:	4618      	mov	r0, r3
 800808e:	f7fe f9b9 	bl	8006404 <qFFMath_Abs>
 8008092:	4604      	mov	r4, r0
 8008094:	6a39      	ldr	r1, [r7, #32]
 8008096:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008098:	f7f8 fd22 	bl	8000ae0 <__aeabi_fsub>
 800809c:	4603      	mov	r3, r0
 800809e:	4618      	mov	r0, r3
 80080a0:	f7fe f9b0 	bl	8006404 <qFFMath_Abs>
 80080a4:	4603      	mov	r3, r0
 80080a6:	4619      	mov	r1, r3
 80080a8:	4620      	mov	r0, r4
 80080aa:	f7f8 ffc1 	bl	8001030 <__aeabi_fcmplt>
 80080ae:	4603      	mov	r3, r0
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d001      	beq.n	80080b8 <qFIS_TZMF+0xec>
 80080b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080b6:	e000      	b.n	80080ba <qFIS_TZMF+0xee>
 80080b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	3744      	adds	r7, #68	; 0x44
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd90      	pop	{r4, r7, pc}

080080c2 <qFIS_PiMF>:
/*============================================================================*/
static float qFIS_PiMF( const qFIS_IO_Base_t * const in,
                        const float *p,
                        const size_t n )
{
 80080c2:	b590      	push	{r4, r7, lr}
 80080c4:	b085      	sub	sp, #20
 80080c6:	af00      	add	r7, sp, #0
 80080c8:	60f8      	str	r0, [r7, #12]
 80080ca:	60b9      	str	r1, [r7, #8]
 80080cc:	607a      	str	r2, [r7, #4]
    return QLIB_ABS( qFIS_SMF( in , p, n )*qFIS_ZMF( in , &p[ 2 ], n ) );
 80080ce:	687a      	ldr	r2, [r7, #4]
 80080d0:	68b9      	ldr	r1, [r7, #8]
 80080d2:	68f8      	ldr	r0, [r7, #12]
 80080d4:	f7ff fd07 	bl	8007ae6 <qFIS_SMF>
 80080d8:	4604      	mov	r4, r0
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	3308      	adds	r3, #8
 80080de:	687a      	ldr	r2, [r7, #4]
 80080e0:	4619      	mov	r1, r3
 80080e2:	68f8      	ldr	r0, [r7, #12]
 80080e4:	f7ff fe1b 	bl	8007d1e <qFIS_ZMF>
 80080e8:	4603      	mov	r3, r0
 80080ea:	4619      	mov	r1, r3
 80080ec:	4620      	mov	r0, r4
 80080ee:	f7f8 fe01 	bl	8000cf4 <__aeabi_fmul>
 80080f2:	4603      	mov	r3, r0
 80080f4:	4618      	mov	r0, r3
 80080f6:	f7fe f985 	bl	8006404 <qFFMath_Abs>
 80080fa:	4603      	mov	r3, r0
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	3714      	adds	r7, #20
 8008100:	46bd      	mov	sp, r7
 8008102:	bd90      	pop	{r4, r7, pc}

08008104 <qFIS_SingletonMF>:
/*============================================================================*/
static float qFIS_SingletonMF( const qFIS_IO_Base_t * const in,
                               const float *p,
                               const size_t n )
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b086      	sub	sp, #24
 8008108:	af00      	add	r7, sp, #0
 800810a:	60f8      	str	r0, [r7, #12]
 800810c:	60b9      	str	r1, [r7, #8]
 800810e:	607a      	str	r2, [r7, #4]
    float x = in[ 0 ].value;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	689b      	ldr	r3, [r3, #8]
 8008114:	617b      	str	r3, [r7, #20]
    (void)n;

    return ( qFMathEx_Equal( x, p[ 0 ] ) ) ? 1.0f : 0.0f;
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	4619      	mov	r1, r3
 800811c:	6978      	ldr	r0, [r7, #20]
 800811e:	f000 faf2 	bl	8008706 <qFMathEx_Equal>
 8008122:	4603      	mov	r3, r0
 8008124:	2b00      	cmp	r3, #0
 8008126:	d002      	beq.n	800812e <qFIS_SingletonMF+0x2a>
 8008128:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800812c:	e001      	b.n	8008132 <qFIS_SingletonMF+0x2e>
 800812e:	f04f 0300 	mov.w	r3, #0
}
 8008132:	4618      	mov	r0, r3
 8008134:	3718      	adds	r7, #24
 8008136:	46bd      	mov	sp, r7
 8008138:	bd80      	pop	{r7, pc}

0800813a <qFIS_ConcaveMF>:
/*============================================================================*/
static float qFIS_ConcaveMF( const qFIS_IO_Base_t * const in,
                             const float *p,
                             const size_t n )
{
 800813a:	b590      	push	{r4, r7, lr}
 800813c:	b089      	sub	sp, #36	; 0x24
 800813e:	af00      	add	r7, sp, #0
 8008140:	60f8      	str	r0, [r7, #12]
 8008142:	60b9      	str	r1, [r7, #8]
 8008144:	607a      	str	r2, [r7, #4]
    float x = in[ 0 ].value;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	689b      	ldr	r3, [r3, #8]
 800814a:	61bb      	str	r3, [r7, #24]
    float i, e, y;
    (void)n;

    i = p[ 0 ];
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	617b      	str	r3, [r7, #20]
    e = p[ 1 ];
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	685b      	ldr	r3, [r3, #4]
 8008156:	613b      	str	r3, [r7, #16]
    if ( ( i <= e ) && ( x < e ) ) {
 8008158:	6939      	ldr	r1, [r7, #16]
 800815a:	6978      	ldr	r0, [r7, #20]
 800815c:	f7f8 ff72 	bl	8001044 <__aeabi_fcmple>
 8008160:	4603      	mov	r3, r0
 8008162:	2b00      	cmp	r3, #0
 8008164:	d023      	beq.n	80081ae <qFIS_ConcaveMF+0x74>
 8008166:	6939      	ldr	r1, [r7, #16]
 8008168:	69b8      	ldr	r0, [r7, #24]
 800816a:	f7f8 ff61 	bl	8001030 <__aeabi_fcmplt>
 800816e:	4603      	mov	r3, r0
 8008170:	2b00      	cmp	r3, #0
 8008172:	d01c      	beq.n	80081ae <qFIS_ConcaveMF+0x74>
        y = ( e - i )/( ( 2.0f*e ) - i -x );
 8008174:	6979      	ldr	r1, [r7, #20]
 8008176:	6938      	ldr	r0, [r7, #16]
 8008178:	f7f8 fcb2 	bl	8000ae0 <__aeabi_fsub>
 800817c:	4603      	mov	r3, r0
 800817e:	461c      	mov	r4, r3
 8008180:	693b      	ldr	r3, [r7, #16]
 8008182:	4619      	mov	r1, r3
 8008184:	4618      	mov	r0, r3
 8008186:	f7f8 fcad 	bl	8000ae4 <__addsf3>
 800818a:	4603      	mov	r3, r0
 800818c:	6979      	ldr	r1, [r7, #20]
 800818e:	4618      	mov	r0, r3
 8008190:	f7f8 fca6 	bl	8000ae0 <__aeabi_fsub>
 8008194:	4603      	mov	r3, r0
 8008196:	69b9      	ldr	r1, [r7, #24]
 8008198:	4618      	mov	r0, r3
 800819a:	f7f8 fca1 	bl	8000ae0 <__aeabi_fsub>
 800819e:	4603      	mov	r3, r0
 80081a0:	4619      	mov	r1, r3
 80081a2:	4620      	mov	r0, r4
 80081a4:	f7f8 fe5a 	bl	8000e5c <__aeabi_fdiv>
 80081a8:	4603      	mov	r3, r0
 80081aa:	61fb      	str	r3, [r7, #28]
 80081ac:	e02d      	b.n	800820a <qFIS_ConcaveMF+0xd0>
    }
    else if ( ( i > e ) && ( x > e ) ) {
 80081ae:	6939      	ldr	r1, [r7, #16]
 80081b0:	6978      	ldr	r0, [r7, #20]
 80081b2:	f7f8 ff5b 	bl	800106c <__aeabi_fcmpgt>
 80081b6:	4603      	mov	r3, r0
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d023      	beq.n	8008204 <qFIS_ConcaveMF+0xca>
 80081bc:	6939      	ldr	r1, [r7, #16]
 80081be:	69b8      	ldr	r0, [r7, #24]
 80081c0:	f7f8 ff54 	bl	800106c <__aeabi_fcmpgt>
 80081c4:	4603      	mov	r3, r0
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d01c      	beq.n	8008204 <qFIS_ConcaveMF+0xca>
        y = ( i - e )/( -( 2.0f*e ) + i +x );
 80081ca:	6939      	ldr	r1, [r7, #16]
 80081cc:	6978      	ldr	r0, [r7, #20]
 80081ce:	f7f8 fc87 	bl	8000ae0 <__aeabi_fsub>
 80081d2:	4603      	mov	r3, r0
 80081d4:	461c      	mov	r4, r3
 80081d6:	693b      	ldr	r3, [r7, #16]
 80081d8:	4619      	mov	r1, r3
 80081da:	4618      	mov	r0, r3
 80081dc:	f7f8 fc82 	bl	8000ae4 <__addsf3>
 80081e0:	4603      	mov	r3, r0
 80081e2:	4619      	mov	r1, r3
 80081e4:	6978      	ldr	r0, [r7, #20]
 80081e6:	f7f8 fc7b 	bl	8000ae0 <__aeabi_fsub>
 80081ea:	4603      	mov	r3, r0
 80081ec:	69b9      	ldr	r1, [r7, #24]
 80081ee:	4618      	mov	r0, r3
 80081f0:	f7f8 fc78 	bl	8000ae4 <__addsf3>
 80081f4:	4603      	mov	r3, r0
 80081f6:	4619      	mov	r1, r3
 80081f8:	4620      	mov	r0, r4
 80081fa:	f7f8 fe2f 	bl	8000e5c <__aeabi_fdiv>
 80081fe:	4603      	mov	r3, r0
 8008200:	61fb      	str	r3, [r7, #28]
 8008202:	e002      	b.n	800820a <qFIS_ConcaveMF+0xd0>
    }
    else {
        y = 1.0f;
 8008204:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8008208:	61fb      	str	r3, [r7, #28]
    }

    return y;
 800820a:	69fb      	ldr	r3, [r7, #28]
}
 800820c:	4618      	mov	r0, r3
 800820e:	3724      	adds	r7, #36	; 0x24
 8008210:	46bd      	mov	sp, r7
 8008212:	bd90      	pop	{r4, r7, pc}

08008214 <qFIS_TConcaveMF>:
/*============================================================================*/
static float qFIS_TConcaveMF( const qFIS_IO_Base_t * const in,
                              const float *p,
                              const size_t n )
{
 8008214:	b590      	push	{r4, r7, lr}
 8008216:	b087      	sub	sp, #28
 8008218:	af00      	add	r7, sp, #0
 800821a:	60f8      	str	r0, [r7, #12]
 800821c:	60b9      	str	r1, [r7, #8]
 800821e:	607a      	str	r2, [r7, #4]
    float i, e;

    i = p[ 0 ];
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	617b      	str	r3, [r7, #20]
    e = p[ 1 ];
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	685b      	ldr	r3, [r3, #4]
 800822a:	613b      	str	r3, [r7, #16]

    return ( ( i - e )/qFIS_ConcaveMF( in, p, n ) ) + ( 2.0f*e ) - i;
 800822c:	6939      	ldr	r1, [r7, #16]
 800822e:	6978      	ldr	r0, [r7, #20]
 8008230:	f7f8 fc56 	bl	8000ae0 <__aeabi_fsub>
 8008234:	4603      	mov	r3, r0
 8008236:	461c      	mov	r4, r3
 8008238:	687a      	ldr	r2, [r7, #4]
 800823a:	68b9      	ldr	r1, [r7, #8]
 800823c:	68f8      	ldr	r0, [r7, #12]
 800823e:	f7ff ff7c 	bl	800813a <qFIS_ConcaveMF>
 8008242:	4603      	mov	r3, r0
 8008244:	4619      	mov	r1, r3
 8008246:	4620      	mov	r0, r4
 8008248:	f7f8 fe08 	bl	8000e5c <__aeabi_fdiv>
 800824c:	4603      	mov	r3, r0
 800824e:	461c      	mov	r4, r3
 8008250:	693b      	ldr	r3, [r7, #16]
 8008252:	4619      	mov	r1, r3
 8008254:	4618      	mov	r0, r3
 8008256:	f7f8 fc45 	bl	8000ae4 <__addsf3>
 800825a:	4603      	mov	r3, r0
 800825c:	4619      	mov	r1, r3
 800825e:	4620      	mov	r0, r4
 8008260:	f7f8 fc40 	bl	8000ae4 <__addsf3>
 8008264:	4603      	mov	r3, r0
 8008266:	6979      	ldr	r1, [r7, #20]
 8008268:	4618      	mov	r0, r3
 800826a:	f7f8 fc39 	bl	8000ae0 <__aeabi_fsub>
 800826e:	4603      	mov	r3, r0
}
 8008270:	4618      	mov	r0, r3
 8008272:	371c      	adds	r7, #28
 8008274:	46bd      	mov	sp, r7
 8008276:	bd90      	pop	{r4, r7, pc}

08008278 <qFIS_SpikeMF>:
/*============================================================================*/
static float qFIS_SpikeMF( const qFIS_IO_Base_t * const in,
                           const float *p,
                           const size_t n )
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b088      	sub	sp, #32
 800827c:	af00      	add	r7, sp, #0
 800827e:	60f8      	str	r0, [r7, #12]
 8008280:	60b9      	str	r1, [r7, #8]
 8008282:	607a      	str	r2, [r7, #4]
    float x = in[ 0 ].value;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	689b      	ldr	r3, [r3, #8]
 8008288:	61fb      	str	r3, [r7, #28]
    float w, c;
    (void)n;

    w = p[ 0 ];
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	61bb      	str	r3, [r7, #24]
    c = p[ 1 ];
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	685b      	ldr	r3, [r3, #4]
 8008294:	617b      	str	r3, [r7, #20]

    return QLIB_EXP( -QLIB_ABS( 10.0f*( x - c )/w ) );
 8008296:	6979      	ldr	r1, [r7, #20]
 8008298:	69f8      	ldr	r0, [r7, #28]
 800829a:	f7f8 fc21 	bl	8000ae0 <__aeabi_fsub>
 800829e:	4603      	mov	r3, r0
 80082a0:	490b      	ldr	r1, [pc, #44]	; (80082d0 <qFIS_SpikeMF+0x58>)
 80082a2:	4618      	mov	r0, r3
 80082a4:	f7f8 fd26 	bl	8000cf4 <__aeabi_fmul>
 80082a8:	4603      	mov	r3, r0
 80082aa:	69b9      	ldr	r1, [r7, #24]
 80082ac:	4618      	mov	r0, r3
 80082ae:	f7f8 fdd5 	bl	8000e5c <__aeabi_fdiv>
 80082b2:	4603      	mov	r3, r0
 80082b4:	4618      	mov	r0, r3
 80082b6:	f7fe f8a5 	bl	8006404 <qFFMath_Abs>
 80082ba:	4603      	mov	r3, r0
 80082bc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80082c0:	4618      	mov	r0, r3
 80082c2:	f7fe fa29 	bl	8006718 <qFFMath_Exp>
 80082c6:	4603      	mov	r3, r0
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	3720      	adds	r7, #32
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}
 80082d0:	41200000 	.word	0x41200000

080082d4 <qFIS_TLinSMF>:
/*============================================================================*/
static float qFIS_TLinSMF( const qFIS_IO_Base_t * const in,
                           const float *p,
                           const size_t n )
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b088      	sub	sp, #32
 80082d8:	af00      	add	r7, sp, #0
 80082da:	60f8      	str	r0, [r7, #12]
 80082dc:	60b9      	str	r1, [r7, #8]
 80082de:	607a      	str	r2, [r7, #4]
    float x = in[ 0 ].value;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	689b      	ldr	r3, [r3, #8]
 80082e4:	61fb      	str	r3, [r7, #28]
    float a, b;
    (void)n;

    a = p[ 0 ];
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	61bb      	str	r3, [r7, #24]
    b = p[ 1 ];
 80082ec:	68bb      	ldr	r3, [r7, #8]
 80082ee:	685b      	ldr	r3, [r3, #4]
 80082f0:	617b      	str	r3, [r7, #20]

    return ( ( b - a )*x ) + a;
 80082f2:	69b9      	ldr	r1, [r7, #24]
 80082f4:	6978      	ldr	r0, [r7, #20]
 80082f6:	f7f8 fbf3 	bl	8000ae0 <__aeabi_fsub>
 80082fa:	4603      	mov	r3, r0
 80082fc:	69f9      	ldr	r1, [r7, #28]
 80082fe:	4618      	mov	r0, r3
 8008300:	f7f8 fcf8 	bl	8000cf4 <__aeabi_fmul>
 8008304:	4603      	mov	r3, r0
 8008306:	69b9      	ldr	r1, [r7, #24]
 8008308:	4618      	mov	r0, r3
 800830a:	f7f8 fbeb 	bl	8000ae4 <__addsf3>
 800830e:	4603      	mov	r3, r0
}
 8008310:	4618      	mov	r0, r3
 8008312:	3720      	adds	r7, #32
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}

08008318 <qFIS_TLinZMF>:
/*============================================================================*/
static float qFIS_TLinZMF( const qFIS_IO_Base_t * const in,
                           const float *p,
                           const size_t n )
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b088      	sub	sp, #32
 800831c:	af00      	add	r7, sp, #0
 800831e:	60f8      	str	r0, [r7, #12]
 8008320:	60b9      	str	r1, [r7, #8]
 8008322:	607a      	str	r2, [r7, #4]
    float x = in[ 0 ].value;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	689b      	ldr	r3, [r3, #8]
 8008328:	61fb      	str	r3, [r7, #28]
    float a, b;
    (void)n;

    a = p[ 0 ];
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	61bb      	str	r3, [r7, #24]
    b = p[ 1 ];
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	685b      	ldr	r3, [r3, #4]
 8008334:	617b      	str	r3, [r7, #20]

    return + a - ( ( a - b )*x );
 8008336:	6979      	ldr	r1, [r7, #20]
 8008338:	69b8      	ldr	r0, [r7, #24]
 800833a:	f7f8 fbd1 	bl	8000ae0 <__aeabi_fsub>
 800833e:	4603      	mov	r3, r0
 8008340:	69f9      	ldr	r1, [r7, #28]
 8008342:	4618      	mov	r0, r3
 8008344:	f7f8 fcd6 	bl	8000cf4 <__aeabi_fmul>
 8008348:	4603      	mov	r3, r0
 800834a:	4619      	mov	r1, r3
 800834c:	69b8      	ldr	r0, [r7, #24]
 800834e:	f7f8 fbc7 	bl	8000ae0 <__aeabi_fsub>
 8008352:	4603      	mov	r3, r0
}
 8008354:	4618      	mov	r0, r3
 8008356:	3720      	adds	r7, #32
 8008358:	46bd      	mov	sp, r7
 800835a:	bd80      	pop	{r7, pc}

0800835c <qFIS_RectangleMF>:
/*============================================================================*/
static float qFIS_RectangleMF( const qFIS_IO_Base_t * const in,
                               const float *p,
                               const size_t n )
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b088      	sub	sp, #32
 8008360:	af00      	add	r7, sp, #0
 8008362:	60f8      	str	r0, [r7, #12]
 8008364:	60b9      	str	r1, [r7, #8]
 8008366:	607a      	str	r2, [r7, #4]
    float x = in[ 0 ].value;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	689b      	ldr	r3, [r3, #8]
 800836c:	61fb      	str	r3, [r7, #28]
    float s, e;
    (void)n;

    s = p[ 0 ];
 800836e:	68bb      	ldr	r3, [r7, #8]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	61bb      	str	r3, [r7, #24]
    e = p[ 1 ];
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	685b      	ldr	r3, [r3, #4]
 8008378:	617b      	str	r3, [r7, #20]

    return ( ( x >= s ) && ( x <= e ) ) ? 1.0f : 0.0f;
 800837a:	69b9      	ldr	r1, [r7, #24]
 800837c:	69f8      	ldr	r0, [r7, #28]
 800837e:	f7f8 fe6b 	bl	8001058 <__aeabi_fcmpge>
 8008382:	4603      	mov	r3, r0
 8008384:	2b00      	cmp	r3, #0
 8008386:	d009      	beq.n	800839c <qFIS_RectangleMF+0x40>
 8008388:	6979      	ldr	r1, [r7, #20]
 800838a:	69f8      	ldr	r0, [r7, #28]
 800838c:	f7f8 fe5a 	bl	8001044 <__aeabi_fcmple>
 8008390:	4603      	mov	r3, r0
 8008392:	2b00      	cmp	r3, #0
 8008394:	d002      	beq.n	800839c <qFIS_RectangleMF+0x40>
 8008396:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800839a:	e001      	b.n	80083a0 <qFIS_RectangleMF+0x44>
 800839c:	f04f 0300 	mov.w	r3, #0
}
 80083a0:	4618      	mov	r0, r3
 80083a2:	3720      	adds	r7, #32
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd80      	pop	{r7, pc}

080083a8 <qFIS_CosineMF>:
/*============================================================================*/
static float qFIS_CosineMF( const qFIS_IO_Base_t * const in,
                            const float *p,
                            const size_t n )
{
 80083a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80083ac:	b08a      	sub	sp, #40	; 0x28
 80083ae:	af00      	add	r7, sp, #0
 80083b0:	60f8      	str	r0, [r7, #12]
 80083b2:	60b9      	str	r1, [r7, #8]
 80083b4:	607a      	str	r2, [r7, #4]
    float x = in[ 0 ].value;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	689b      	ldr	r3, [r3, #8]
 80083ba:	623b      	str	r3, [r7, #32]
    float c, w, y;
    const float pi = 3.14159265358979323846f;
 80083bc:	4b35      	ldr	r3, [pc, #212]	; (8008494 <qFIS_CosineMF+0xec>)
 80083be:	61fb      	str	r3, [r7, #28]
    (void)n;

    c = p[ 0 ];
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	61bb      	str	r3, [r7, #24]
    w = p[ 1 ];
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	685b      	ldr	r3, [r3, #4]
 80083ca:	617b      	str	r3, [r7, #20]
    if ( ( x < ( c - ( 0.5*w ) ) ) || ( x > ( c + ( 0.5f*w ) ) ) ) {
 80083cc:	6a38      	ldr	r0, [r7, #32]
 80083ce:	f7f8 f82b 	bl	8000428 <__aeabi_f2d>
 80083d2:	4604      	mov	r4, r0
 80083d4:	460d      	mov	r5, r1
 80083d6:	69b8      	ldr	r0, [r7, #24]
 80083d8:	f7f8 f826 	bl	8000428 <__aeabi_f2d>
 80083dc:	4680      	mov	r8, r0
 80083de:	4689      	mov	r9, r1
 80083e0:	6978      	ldr	r0, [r7, #20]
 80083e2:	f7f8 f821 	bl	8000428 <__aeabi_f2d>
 80083e6:	f04f 0200 	mov.w	r2, #0
 80083ea:	4b2b      	ldr	r3, [pc, #172]	; (8008498 <qFIS_CosineMF+0xf0>)
 80083ec:	f7f8 f874 	bl	80004d8 <__aeabi_dmul>
 80083f0:	4602      	mov	r2, r0
 80083f2:	460b      	mov	r3, r1
 80083f4:	4640      	mov	r0, r8
 80083f6:	4649      	mov	r1, r9
 80083f8:	f7f7 feb6 	bl	8000168 <__aeabi_dsub>
 80083fc:	4602      	mov	r2, r0
 80083fe:	460b      	mov	r3, r1
 8008400:	4620      	mov	r0, r4
 8008402:	4629      	mov	r1, r5
 8008404:	f7f8 fada 	bl	80009bc <__aeabi_dcmplt>
 8008408:	4603      	mov	r3, r0
 800840a:	2b00      	cmp	r3, #0
 800840c:	d111      	bne.n	8008432 <qFIS_CosineMF+0x8a>
 800840e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8008412:	6978      	ldr	r0, [r7, #20]
 8008414:	f7f8 fc6e 	bl	8000cf4 <__aeabi_fmul>
 8008418:	4603      	mov	r3, r0
 800841a:	69b9      	ldr	r1, [r7, #24]
 800841c:	4618      	mov	r0, r3
 800841e:	f7f8 fb61 	bl	8000ae4 <__addsf3>
 8008422:	4603      	mov	r3, r0
 8008424:	4619      	mov	r1, r3
 8008426:	6a38      	ldr	r0, [r7, #32]
 8008428:	f7f8 fe20 	bl	800106c <__aeabi_fcmpgt>
 800842c:	4603      	mov	r3, r0
 800842e:	2b00      	cmp	r3, #0
 8008430:	d003      	beq.n	800843a <qFIS_CosineMF+0x92>
        y = 0.0f;
 8008432:	f04f 0300 	mov.w	r3, #0
 8008436:	627b      	str	r3, [r7, #36]	; 0x24
 8008438:	e026      	b.n	8008488 <qFIS_CosineMF+0xe0>
    }
    else {
        y = 0.5f*( 1.0f + QLIB_COS( 2.0f/w*pi*( x - c) ) );
 800843a:	6979      	ldr	r1, [r7, #20]
 800843c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8008440:	f7f8 fd0c 	bl	8000e5c <__aeabi_fdiv>
 8008444:	4603      	mov	r3, r0
 8008446:	69f9      	ldr	r1, [r7, #28]
 8008448:	4618      	mov	r0, r3
 800844a:	f7f8 fc53 	bl	8000cf4 <__aeabi_fmul>
 800844e:	4603      	mov	r3, r0
 8008450:	461c      	mov	r4, r3
 8008452:	69b9      	ldr	r1, [r7, #24]
 8008454:	6a38      	ldr	r0, [r7, #32]
 8008456:	f7f8 fb43 	bl	8000ae0 <__aeabi_fsub>
 800845a:	4603      	mov	r3, r0
 800845c:	4619      	mov	r1, r3
 800845e:	4620      	mov	r0, r4
 8008460:	f7f8 fc48 	bl	8000cf4 <__aeabi_fmul>
 8008464:	4603      	mov	r3, r0
 8008466:	4618      	mov	r0, r3
 8008468:	f7fe f872 	bl	8006550 <qFFMath_Cos>
 800846c:	4603      	mov	r3, r0
 800846e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8008472:	4618      	mov	r0, r3
 8008474:	f7f8 fb36 	bl	8000ae4 <__addsf3>
 8008478:	4603      	mov	r3, r0
 800847a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800847e:	4618      	mov	r0, r3
 8008480:	f7f8 fc38 	bl	8000cf4 <__aeabi_fmul>
 8008484:	4603      	mov	r3, r0
 8008486:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return y;
 8008488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800848a:	4618      	mov	r0, r3
 800848c:	3728      	adds	r7, #40	; 0x28
 800848e:	46bd      	mov	sp, r7
 8008490:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008494:	40490fdb 	.word	0x40490fdb
 8008498:	3fe00000 	.word	0x3fe00000

0800849c <qFIS_ConstantMF>:
/*============================================================================*/
static float qFIS_ConstantMF( const qFIS_IO_Base_t * const in,
                              const float *p,
                              const size_t n )
{
 800849c:	b480      	push	{r7}
 800849e:	b085      	sub	sp, #20
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	60f8      	str	r0, [r7, #12]
 80084a4:	60b9      	str	r1, [r7, #8]
 80084a6:	607a      	str	r2, [r7, #4]
    (void)in;
    (void)n;
    return p[ 0 ];
 80084a8:	68bb      	ldr	r3, [r7, #8]
 80084aa:	681b      	ldr	r3, [r3, #0]
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	3714      	adds	r7, #20
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bc80      	pop	{r7}
 80084b4:	4770      	bx	lr

080084b6 <qFIS_LinearMF>:
/*============================================================================*/
static float qFIS_LinearMF( const qFIS_IO_Base_t * const in,
                            const float *p,
                            const size_t n )
{
 80084b6:	b580      	push	{r7, lr}
 80084b8:	b086      	sub	sp, #24
 80084ba:	af00      	add	r7, sp, #0
 80084bc:	60f8      	str	r0, [r7, #12]
 80084be:	60b9      	str	r1, [r7, #8]
 80084c0:	607a      	str	r2, [r7, #4]
    float px = 0.0f;
 80084c2:	f04f 0300 	mov.w	r3, #0
 80084c6:	617b      	str	r3, [r7, #20]
    size_t i;

    for ( i = 0u ; i < n ; ++i ) {
 80084c8:	2300      	movs	r3, #0
 80084ca:	613b      	str	r3, [r7, #16]
 80084cc:	e01a      	b.n	8008504 <qFIS_LinearMF+0x4e>
        px += in[ i ].value*p[ i ];
 80084ce:	693a      	ldr	r2, [r7, #16]
 80084d0:	4613      	mov	r3, r2
 80084d2:	005b      	lsls	r3, r3, #1
 80084d4:	4413      	add	r3, r2
 80084d6:	009b      	lsls	r3, r3, #2
 80084d8:	461a      	mov	r2, r3
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	4413      	add	r3, r2
 80084de:	6898      	ldr	r0, [r3, #8]
 80084e0:	693b      	ldr	r3, [r7, #16]
 80084e2:	009b      	lsls	r3, r3, #2
 80084e4:	68ba      	ldr	r2, [r7, #8]
 80084e6:	4413      	add	r3, r2
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	4619      	mov	r1, r3
 80084ec:	f7f8 fc02 	bl	8000cf4 <__aeabi_fmul>
 80084f0:	4603      	mov	r3, r0
 80084f2:	4619      	mov	r1, r3
 80084f4:	6978      	ldr	r0, [r7, #20]
 80084f6:	f7f8 faf5 	bl	8000ae4 <__addsf3>
 80084fa:	4603      	mov	r3, r0
 80084fc:	617b      	str	r3, [r7, #20]
    for ( i = 0u ; i < n ; ++i ) {
 80084fe:	693b      	ldr	r3, [r7, #16]
 8008500:	3301      	adds	r3, #1
 8008502:	613b      	str	r3, [r7, #16]
 8008504:	693a      	ldr	r2, [r7, #16]
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	429a      	cmp	r2, r3
 800850a:	d3e0      	bcc.n	80084ce <qFIS_LinearMF+0x18>
    }
    px += p[ i ];
 800850c:	693b      	ldr	r3, [r7, #16]
 800850e:	009b      	lsls	r3, r3, #2
 8008510:	68ba      	ldr	r2, [r7, #8]
 8008512:	4413      	add	r3, r2
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	4619      	mov	r1, r3
 8008518:	6978      	ldr	r0, [r7, #20]
 800851a:	f7f8 fae3 	bl	8000ae4 <__addsf3>
 800851e:	4603      	mov	r3, r0
 8008520:	617b      	str	r3, [r7, #20]

    return px;
 8008522:	697b      	ldr	r3, [r7, #20]
}
 8008524:	4618      	mov	r0, r3
 8008526:	3718      	adds	r7, #24
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}

0800852c <qFIS_Min>:
/*============================================================================*/
static float qFIS_Min( const float a,
                       const float b )
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b082      	sub	sp, #8
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
 8008534:	6039      	str	r1, [r7, #0]
    return qFIS_Bound( ( a < b ) ? a : b, 0.0f, 1.0f );
 8008536:	6839      	ldr	r1, [r7, #0]
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	f7f8 fd79 	bl	8001030 <__aeabi_fcmplt>
 800853e:	4603      	mov	r3, r0
 8008540:	2b00      	cmp	r3, #0
 8008542:	d001      	beq.n	8008548 <qFIS_Min+0x1c>
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	e000      	b.n	800854a <qFIS_Min+0x1e>
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800854e:	f04f 0100 	mov.w	r1, #0
 8008552:	4618      	mov	r0, r3
 8008554:	f000 f86d 	bl	8008632 <qFIS_Bound>
 8008558:	4603      	mov	r3, r0
}
 800855a:	4618      	mov	r0, r3
 800855c:	3708      	adds	r7, #8
 800855e:	46bd      	mov	sp, r7
 8008560:	bd80      	pop	{r7, pc}

08008562 <qFIS_Max>:
/*============================================================================*/
static float qFIS_Max( const float a,
                       const float b )
{
 8008562:	b580      	push	{r7, lr}
 8008564:	b082      	sub	sp, #8
 8008566:	af00      	add	r7, sp, #0
 8008568:	6078      	str	r0, [r7, #4]
 800856a:	6039      	str	r1, [r7, #0]
    return qFIS_Bound( ( a > b ) ? a : b, 0.0f, 1.0f );
 800856c:	6839      	ldr	r1, [r7, #0]
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f7f8 fd7c 	bl	800106c <__aeabi_fcmpgt>
 8008574:	4603      	mov	r3, r0
 8008576:	2b00      	cmp	r3, #0
 8008578:	d001      	beq.n	800857e <qFIS_Max+0x1c>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	e000      	b.n	8008580 <qFIS_Max+0x1e>
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8008584:	f04f 0100 	mov.w	r1, #0
 8008588:	4618      	mov	r0, r3
 800858a:	f000 f852 	bl	8008632 <qFIS_Bound>
 800858e:	4603      	mov	r3, r0
}
 8008590:	4618      	mov	r0, r3
 8008592:	3708      	adds	r7, #8
 8008594:	46bd      	mov	sp, r7
 8008596:	bd80      	pop	{r7, pc}

08008598 <qFIS_Prod>:
/*============================================================================*/
static float qFIS_Prod( const float a,
                        const float b )
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b082      	sub	sp, #8
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
 80085a0:	6039      	str	r1, [r7, #0]
    return qFIS_Bound( a*b, 0.0f, 1.0f );
 80085a2:	6839      	ldr	r1, [r7, #0]
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f7f8 fba5 	bl	8000cf4 <__aeabi_fmul>
 80085aa:	4603      	mov	r3, r0
 80085ac:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80085b0:	f04f 0100 	mov.w	r1, #0
 80085b4:	4618      	mov	r0, r3
 80085b6:	f000 f83c 	bl	8008632 <qFIS_Bound>
 80085ba:	4603      	mov	r3, r0
}
 80085bc:	4618      	mov	r0, r3
 80085be:	3708      	adds	r7, #8
 80085c0:	46bd      	mov	sp, r7
 80085c2:	bd80      	pop	{r7, pc}

080085c4 <qFIS_ProbOR>:
/*============================================================================*/
static float qFIS_ProbOR( const float a,
                          const float b )
{
 80085c4:	b590      	push	{r4, r7, lr}
 80085c6:	b083      	sub	sp, #12
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
 80085cc:	6039      	str	r1, [r7, #0]
    return qFIS_Bound( a + b - ( a*b ), 0.0f, 1.0f );
 80085ce:	6839      	ldr	r1, [r7, #0]
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f7f8 fa87 	bl	8000ae4 <__addsf3>
 80085d6:	4603      	mov	r3, r0
 80085d8:	461c      	mov	r4, r3
 80085da:	6839      	ldr	r1, [r7, #0]
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	f7f8 fb89 	bl	8000cf4 <__aeabi_fmul>
 80085e2:	4603      	mov	r3, r0
 80085e4:	4619      	mov	r1, r3
 80085e6:	4620      	mov	r0, r4
 80085e8:	f7f8 fa7a 	bl	8000ae0 <__aeabi_fsub>
 80085ec:	4603      	mov	r3, r0
 80085ee:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80085f2:	f04f 0100 	mov.w	r1, #0
 80085f6:	4618      	mov	r0, r3
 80085f8:	f000 f81b 	bl	8008632 <qFIS_Bound>
 80085fc:	4603      	mov	r3, r0
}
 80085fe:	4618      	mov	r0, r3
 8008600:	370c      	adds	r7, #12
 8008602:	46bd      	mov	sp, r7
 8008604:	bd90      	pop	{r4, r7, pc}

08008606 <qFIS_Sum>:
/*============================================================================*/
static float qFIS_Sum( const float a,
                       const float b )
{
 8008606:	b580      	push	{r7, lr}
 8008608:	b082      	sub	sp, #8
 800860a:	af00      	add	r7, sp, #0
 800860c:	6078      	str	r0, [r7, #4]
 800860e:	6039      	str	r1, [r7, #0]
    return qFIS_Bound( a + b, 0.0f, 1.0f );
 8008610:	6839      	ldr	r1, [r7, #0]
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f7f8 fa66 	bl	8000ae4 <__addsf3>
 8008618:	4603      	mov	r3, r0
 800861a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800861e:	f04f 0100 	mov.w	r1, #0
 8008622:	4618      	mov	r0, r3
 8008624:	f000 f805 	bl	8008632 <qFIS_Bound>
 8008628:	4603      	mov	r3, r0
}
 800862a:	4618      	mov	r0, r3
 800862c:	3708      	adds	r7, #8
 800862e:	46bd      	mov	sp, r7
 8008630:	bd80      	pop	{r7, pc}

08008632 <qFIS_Bound>:
/*============================================================================*/
static float qFIS_Bound( float y,
                         const float yMin,
                         const float yMax )
{
 8008632:	b580      	push	{r7, lr}
 8008634:	b084      	sub	sp, #16
 8008636:	af00      	add	r7, sp, #0
 8008638:	60f8      	str	r0, [r7, #12]
 800863a:	60b9      	str	r1, [r7, #8]
 800863c:	607a      	str	r2, [r7, #4]
    (void)qFMathEx_InRangeCoerce( &y, yMin, yMax );
 800863e:	f107 030c 	add.w	r3, r7, #12
 8008642:	687a      	ldr	r2, [r7, #4]
 8008644:	68b9      	ldr	r1, [r7, #8]
 8008646:	4618      	mov	r0, r3
 8008648:	f000 f805 	bl	8008656 <qFMathEx_InRangeCoerce>

    return y;
 800864c:	68fb      	ldr	r3, [r7, #12]
}
 800864e:	4618      	mov	r0, r3
 8008650:	3710      	adds	r7, #16
 8008652:	46bd      	mov	sp, r7
 8008654:	bd80      	pop	{r7, pc}

08008656 <qFMathEx_InRangeCoerce>:
}
/*============================================================================*/
bool qFMathEx_InRangeCoerce( float * const x,
                             const float lowerL,
                             const float upperL )
{
 8008656:	b580      	push	{r7, lr}
 8008658:	b086      	sub	sp, #24
 800865a:	af00      	add	r7, sp, #0
 800865c:	60f8      	str	r0, [r7, #12]
 800865e:	60b9      	str	r1, [r7, #8]
 8008660:	607a      	str	r2, [r7, #4]
    bool retVal = false;
 8008662:	2300      	movs	r3, #0
 8008664:	75fb      	strb	r3, [r7, #23]

    if ( 1 == (int)QLIB_ISNAN( x[ 0 ] ) ) {
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	4618      	mov	r0, r3
 800866c:	f7fd feb9 	bl	80063e2 <qFFMath_IsNaN>
 8008670:	4603      	mov	r3, r0
 8008672:	2b00      	cmp	r3, #0
 8008674:	d003      	beq.n	800867e <qFMathEx_InRangeCoerce+0x28>
        x[ 0 ] = lowerL;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	68ba      	ldr	r2, [r7, #8]
 800867a:	601a      	str	r2, [r3, #0]
 800867c:	e01b      	b.n	80086b6 <qFMathEx_InRangeCoerce+0x60>
    }
    else {
        if ( x[ 0 ] < lowerL ) {
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	4619      	mov	r1, r3
 8008684:	68b8      	ldr	r0, [r7, #8]
 8008686:	f7f8 fcf1 	bl	800106c <__aeabi_fcmpgt>
 800868a:	4603      	mov	r3, r0
 800868c:	2b00      	cmp	r3, #0
 800868e:	d003      	beq.n	8008698 <qFMathEx_InRangeCoerce+0x42>
            x[ 0 ] = lowerL;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	68ba      	ldr	r2, [r7, #8]
 8008694:	601a      	str	r2, [r3, #0]
 8008696:	e00e      	b.n	80086b6 <qFMathEx_InRangeCoerce+0x60>
        }
        else if ( x[ 0 ] > upperL ) {
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	4619      	mov	r1, r3
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f7f8 fcc6 	bl	8001030 <__aeabi_fcmplt>
 80086a4:	4603      	mov	r3, r0
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d003      	beq.n	80086b2 <qFMathEx_InRangeCoerce+0x5c>
            x[ 0 ] = upperL;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	687a      	ldr	r2, [r7, #4]
 80086ae:	601a      	str	r2, [r3, #0]
 80086b0:	e001      	b.n	80086b6 <qFMathEx_InRangeCoerce+0x60>
        }
        else {
            retVal = true;
 80086b2:	2301      	movs	r3, #1
 80086b4:	75fb      	strb	r3, [r7, #23]
        }
    }

    return retVal;
 80086b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80086b8:	4618      	mov	r0, r3
 80086ba:	3718      	adds	r7, #24
 80086bc:	46bd      	mov	sp, r7
 80086be:	bd80      	pop	{r7, pc}

080086c0 <qFMathEx_AlmostEqual>:
/*============================================================================*/
bool qFMathEx_AlmostEqual( const float a,
                           const float b,
                           const float tol )
{
 80086c0:	b5b0      	push	{r4, r5, r7, lr}
 80086c2:	b084      	sub	sp, #16
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	60f8      	str	r0, [r7, #12]
 80086c8:	60b9      	str	r1, [r7, #8]
 80086ca:	607a      	str	r2, [r7, #4]
    return ( QLIB_ABS( a - b ) <= QLIB_ABS( tol ) );
 80086cc:	68b9      	ldr	r1, [r7, #8]
 80086ce:	68f8      	ldr	r0, [r7, #12]
 80086d0:	f7f8 fa06 	bl	8000ae0 <__aeabi_fsub>
 80086d4:	4603      	mov	r3, r0
 80086d6:	4618      	mov	r0, r3
 80086d8:	f7fd fe94 	bl	8006404 <qFFMath_Abs>
 80086dc:	4605      	mov	r5, r0
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f7fd fe90 	bl	8006404 <qFFMath_Abs>
 80086e4:	4602      	mov	r2, r0
 80086e6:	2301      	movs	r3, #1
 80086e8:	461c      	mov	r4, r3
 80086ea:	4611      	mov	r1, r2
 80086ec:	4628      	mov	r0, r5
 80086ee:	f7f8 fca9 	bl	8001044 <__aeabi_fcmple>
 80086f2:	4603      	mov	r3, r0
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d101      	bne.n	80086fc <qFMathEx_AlmostEqual+0x3c>
 80086f8:	2300      	movs	r3, #0
 80086fa:	461c      	mov	r4, r3
 80086fc:	b2e3      	uxtb	r3, r4
}
 80086fe:	4618      	mov	r0, r3
 8008700:	3710      	adds	r7, #16
 8008702:	46bd      	mov	sp, r7
 8008704:	bdb0      	pop	{r4, r5, r7, pc}

08008706 <qFMathEx_Equal>:
/*============================================================================*/
bool qFMathEx_Equal( const float a,
                     const float b )
{
 8008706:	b580      	push	{r7, lr}
 8008708:	b082      	sub	sp, #8
 800870a:	af00      	add	r7, sp, #0
 800870c:	6078      	str	r0, [r7, #4]
 800870e:	6039      	str	r1, [r7, #0]
    return qFMathEx_AlmostEqual( a, b, FLT_MIN );
 8008710:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8008714:	6839      	ldr	r1, [r7, #0]
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	f7ff ffd2 	bl	80086c0 <qFMathEx_AlmostEqual>
 800871c:	4603      	mov	r3, r0
}
 800871e:	4618      	mov	r0, r3
 8008720:	3708      	adds	r7, #8
 8008722:	46bd      	mov	sp, r7
 8008724:	bd80      	pop	{r7, pc}
	...

08008728 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008728:	b480      	push	{r7}
 800872a:	b085      	sub	sp, #20
 800872c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800872e:	4b15      	ldr	r3, [pc, #84]	; (8008784 <HAL_MspInit+0x5c>)
 8008730:	699b      	ldr	r3, [r3, #24]
 8008732:	4a14      	ldr	r2, [pc, #80]	; (8008784 <HAL_MspInit+0x5c>)
 8008734:	f043 0301 	orr.w	r3, r3, #1
 8008738:	6193      	str	r3, [r2, #24]
 800873a:	4b12      	ldr	r3, [pc, #72]	; (8008784 <HAL_MspInit+0x5c>)
 800873c:	699b      	ldr	r3, [r3, #24]
 800873e:	f003 0301 	and.w	r3, r3, #1
 8008742:	60bb      	str	r3, [r7, #8]
 8008744:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008746:	4b0f      	ldr	r3, [pc, #60]	; (8008784 <HAL_MspInit+0x5c>)
 8008748:	69db      	ldr	r3, [r3, #28]
 800874a:	4a0e      	ldr	r2, [pc, #56]	; (8008784 <HAL_MspInit+0x5c>)
 800874c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008750:	61d3      	str	r3, [r2, #28]
 8008752:	4b0c      	ldr	r3, [pc, #48]	; (8008784 <HAL_MspInit+0x5c>)
 8008754:	69db      	ldr	r3, [r3, #28]
 8008756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800875a:	607b      	str	r3, [r7, #4]
 800875c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800875e:	4b0a      	ldr	r3, [pc, #40]	; (8008788 <HAL_MspInit+0x60>)
 8008760:	685b      	ldr	r3, [r3, #4]
 8008762:	60fb      	str	r3, [r7, #12]
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800876a:	60fb      	str	r3, [r7, #12]
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008772:	60fb      	str	r3, [r7, #12]
 8008774:	4a04      	ldr	r2, [pc, #16]	; (8008788 <HAL_MspInit+0x60>)
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800877a:	bf00      	nop
 800877c:	3714      	adds	r7, #20
 800877e:	46bd      	mov	sp, r7
 8008780:	bc80      	pop	{r7}
 8008782:	4770      	bx	lr
 8008784:	40021000 	.word	0x40021000
 8008788:	40010000 	.word	0x40010000

0800878c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b08a      	sub	sp, #40	; 0x28
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008794:	f107 0314 	add.w	r3, r7, #20
 8008798:	2200      	movs	r2, #0
 800879a:	601a      	str	r2, [r3, #0]
 800879c:	605a      	str	r2, [r3, #4]
 800879e:	609a      	str	r2, [r3, #8]
 80087a0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	4a1d      	ldr	r2, [pc, #116]	; (800881c <HAL_I2C_MspInit+0x90>)
 80087a8:	4293      	cmp	r3, r2
 80087aa:	d132      	bne.n	8008812 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80087ac:	4b1c      	ldr	r3, [pc, #112]	; (8008820 <HAL_I2C_MspInit+0x94>)
 80087ae:	699b      	ldr	r3, [r3, #24]
 80087b0:	4a1b      	ldr	r2, [pc, #108]	; (8008820 <HAL_I2C_MspInit+0x94>)
 80087b2:	f043 0308 	orr.w	r3, r3, #8
 80087b6:	6193      	str	r3, [r2, #24]
 80087b8:	4b19      	ldr	r3, [pc, #100]	; (8008820 <HAL_I2C_MspInit+0x94>)
 80087ba:	699b      	ldr	r3, [r3, #24]
 80087bc:	f003 0308 	and.w	r3, r3, #8
 80087c0:	613b      	str	r3, [r7, #16]
 80087c2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80087c4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80087c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80087ca:	2312      	movs	r3, #18
 80087cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80087ce:	2303      	movs	r3, #3
 80087d0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80087d2:	f107 0314 	add.w	r3, r7, #20
 80087d6:	4619      	mov	r1, r3
 80087d8:	4812      	ldr	r0, [pc, #72]	; (8008824 <HAL_I2C_MspInit+0x98>)
 80087da:	f7f9 f86b 	bl	80018b4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80087de:	4b12      	ldr	r3, [pc, #72]	; (8008828 <HAL_I2C_MspInit+0x9c>)
 80087e0:	685b      	ldr	r3, [r3, #4]
 80087e2:	627b      	str	r3, [r7, #36]	; 0x24
 80087e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80087ea:	627b      	str	r3, [r7, #36]	; 0x24
 80087ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ee:	f043 0302 	orr.w	r3, r3, #2
 80087f2:	627b      	str	r3, [r7, #36]	; 0x24
 80087f4:	4a0c      	ldr	r2, [pc, #48]	; (8008828 <HAL_I2C_MspInit+0x9c>)
 80087f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087f8:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80087fa:	4b09      	ldr	r3, [pc, #36]	; (8008820 <HAL_I2C_MspInit+0x94>)
 80087fc:	69db      	ldr	r3, [r3, #28]
 80087fe:	4a08      	ldr	r2, [pc, #32]	; (8008820 <HAL_I2C_MspInit+0x94>)
 8008800:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008804:	61d3      	str	r3, [r2, #28]
 8008806:	4b06      	ldr	r3, [pc, #24]	; (8008820 <HAL_I2C_MspInit+0x94>)
 8008808:	69db      	ldr	r3, [r3, #28]
 800880a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800880e:	60fb      	str	r3, [r7, #12]
 8008810:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8008812:	bf00      	nop
 8008814:	3728      	adds	r7, #40	; 0x28
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}
 800881a:	bf00      	nop
 800881c:	40005400 	.word	0x40005400
 8008820:	40021000 	.word	0x40021000
 8008824:	40010c00 	.word	0x40010c00
 8008828:	40010000 	.word	0x40010000

0800882c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b084      	sub	sp, #16
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	4a16      	ldr	r2, [pc, #88]	; (8008894 <HAL_TIM_Base_MspInit+0x68>)
 800883a:	4293      	cmp	r3, r2
 800883c:	d114      	bne.n	8008868 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800883e:	4b16      	ldr	r3, [pc, #88]	; (8008898 <HAL_TIM_Base_MspInit+0x6c>)
 8008840:	699b      	ldr	r3, [r3, #24]
 8008842:	4a15      	ldr	r2, [pc, #84]	; (8008898 <HAL_TIM_Base_MspInit+0x6c>)
 8008844:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008848:	6193      	str	r3, [r2, #24]
 800884a:	4b13      	ldr	r3, [pc, #76]	; (8008898 <HAL_TIM_Base_MspInit+0x6c>)
 800884c:	699b      	ldr	r3, [r3, #24]
 800884e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008852:	60fb      	str	r3, [r7, #12]
 8008854:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8008856:	2200      	movs	r2, #0
 8008858:	2100      	movs	r1, #0
 800885a:	2019      	movs	r0, #25
 800885c:	f7f8 fd8f 	bl	800137e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8008860:	2019      	movs	r0, #25
 8008862:	f7f8 fda8 	bl	80013b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8008866:	e010      	b.n	800888a <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008870:	d10b      	bne.n	800888a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8008872:	4b09      	ldr	r3, [pc, #36]	; (8008898 <HAL_TIM_Base_MspInit+0x6c>)
 8008874:	69db      	ldr	r3, [r3, #28]
 8008876:	4a08      	ldr	r2, [pc, #32]	; (8008898 <HAL_TIM_Base_MspInit+0x6c>)
 8008878:	f043 0301 	orr.w	r3, r3, #1
 800887c:	61d3      	str	r3, [r2, #28]
 800887e:	4b06      	ldr	r3, [pc, #24]	; (8008898 <HAL_TIM_Base_MspInit+0x6c>)
 8008880:	69db      	ldr	r3, [r3, #28]
 8008882:	f003 0301 	and.w	r3, r3, #1
 8008886:	60bb      	str	r3, [r7, #8]
 8008888:	68bb      	ldr	r3, [r7, #8]
}
 800888a:	bf00      	nop
 800888c:	3710      	adds	r7, #16
 800888e:	46bd      	mov	sp, r7
 8008890:	bd80      	pop	{r7, pc}
 8008892:	bf00      	nop
 8008894:	40012c00 	.word	0x40012c00
 8008898:	40021000 	.word	0x40021000

0800889c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b08a      	sub	sp, #40	; 0x28
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80088a4:	f107 0318 	add.w	r3, r7, #24
 80088a8:	2200      	movs	r2, #0
 80088aa:	601a      	str	r2, [r3, #0]
 80088ac:	605a      	str	r2, [r3, #4]
 80088ae:	609a      	str	r2, [r3, #8]
 80088b0:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	4a2a      	ldr	r2, [pc, #168]	; (8008960 <HAL_TIM_Encoder_MspInit+0xc4>)
 80088b8:	4293      	cmp	r3, r2
 80088ba:	d124      	bne.n	8008906 <HAL_TIM_Encoder_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80088bc:	4b29      	ldr	r3, [pc, #164]	; (8008964 <HAL_TIM_Encoder_MspInit+0xc8>)
 80088be:	69db      	ldr	r3, [r3, #28]
 80088c0:	4a28      	ldr	r2, [pc, #160]	; (8008964 <HAL_TIM_Encoder_MspInit+0xc8>)
 80088c2:	f043 0302 	orr.w	r3, r3, #2
 80088c6:	61d3      	str	r3, [r2, #28]
 80088c8:	4b26      	ldr	r3, [pc, #152]	; (8008964 <HAL_TIM_Encoder_MspInit+0xc8>)
 80088ca:	69db      	ldr	r3, [r3, #28]
 80088cc:	f003 0302 	and.w	r3, r3, #2
 80088d0:	617b      	str	r3, [r7, #20]
 80088d2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80088d4:	4b23      	ldr	r3, [pc, #140]	; (8008964 <HAL_TIM_Encoder_MspInit+0xc8>)
 80088d6:	699b      	ldr	r3, [r3, #24]
 80088d8:	4a22      	ldr	r2, [pc, #136]	; (8008964 <HAL_TIM_Encoder_MspInit+0xc8>)
 80088da:	f043 0304 	orr.w	r3, r3, #4
 80088de:	6193      	str	r3, [r2, #24]
 80088e0:	4b20      	ldr	r3, [pc, #128]	; (8008964 <HAL_TIM_Encoder_MspInit+0xc8>)
 80088e2:	699b      	ldr	r3, [r3, #24]
 80088e4:	f003 0304 	and.w	r3, r3, #4
 80088e8:	613b      	str	r3, [r7, #16]
 80088ea:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80088ec:	23c0      	movs	r3, #192	; 0xc0
 80088ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80088f0:	2300      	movs	r3, #0
 80088f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088f4:	2300      	movs	r3, #0
 80088f6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80088f8:	f107 0318 	add.w	r3, r7, #24
 80088fc:	4619      	mov	r1, r3
 80088fe:	481a      	ldr	r0, [pc, #104]	; (8008968 <HAL_TIM_Encoder_MspInit+0xcc>)
 8008900:	f7f8 ffd8 	bl	80018b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8008904:	e028      	b.n	8008958 <HAL_TIM_Encoder_MspInit+0xbc>
  else if(htim_encoder->Instance==TIM4)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	4a18      	ldr	r2, [pc, #96]	; (800896c <HAL_TIM_Encoder_MspInit+0xd0>)
 800890c:	4293      	cmp	r3, r2
 800890e:	d123      	bne.n	8008958 <HAL_TIM_Encoder_MspInit+0xbc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8008910:	4b14      	ldr	r3, [pc, #80]	; (8008964 <HAL_TIM_Encoder_MspInit+0xc8>)
 8008912:	69db      	ldr	r3, [r3, #28]
 8008914:	4a13      	ldr	r2, [pc, #76]	; (8008964 <HAL_TIM_Encoder_MspInit+0xc8>)
 8008916:	f043 0304 	orr.w	r3, r3, #4
 800891a:	61d3      	str	r3, [r2, #28]
 800891c:	4b11      	ldr	r3, [pc, #68]	; (8008964 <HAL_TIM_Encoder_MspInit+0xc8>)
 800891e:	69db      	ldr	r3, [r3, #28]
 8008920:	f003 0304 	and.w	r3, r3, #4
 8008924:	60fb      	str	r3, [r7, #12]
 8008926:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008928:	4b0e      	ldr	r3, [pc, #56]	; (8008964 <HAL_TIM_Encoder_MspInit+0xc8>)
 800892a:	699b      	ldr	r3, [r3, #24]
 800892c:	4a0d      	ldr	r2, [pc, #52]	; (8008964 <HAL_TIM_Encoder_MspInit+0xc8>)
 800892e:	f043 0308 	orr.w	r3, r3, #8
 8008932:	6193      	str	r3, [r2, #24]
 8008934:	4b0b      	ldr	r3, [pc, #44]	; (8008964 <HAL_TIM_Encoder_MspInit+0xc8>)
 8008936:	699b      	ldr	r3, [r3, #24]
 8008938:	f003 0308 	and.w	r3, r3, #8
 800893c:	60bb      	str	r3, [r7, #8]
 800893e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8008940:	23c0      	movs	r3, #192	; 0xc0
 8008942:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008944:	2300      	movs	r3, #0
 8008946:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008948:	2300      	movs	r3, #0
 800894a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800894c:	f107 0318 	add.w	r3, r7, #24
 8008950:	4619      	mov	r1, r3
 8008952:	4807      	ldr	r0, [pc, #28]	; (8008970 <HAL_TIM_Encoder_MspInit+0xd4>)
 8008954:	f7f8 ffae 	bl	80018b4 <HAL_GPIO_Init>
}
 8008958:	bf00      	nop
 800895a:	3728      	adds	r7, #40	; 0x28
 800895c:	46bd      	mov	sp, r7
 800895e:	bd80      	pop	{r7, pc}
 8008960:	40000400 	.word	0x40000400
 8008964:	40021000 	.word	0x40021000
 8008968:	40010800 	.word	0x40010800
 800896c:	40000800 	.word	0x40000800
 8008970:	40010c00 	.word	0x40010c00

08008974 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b088      	sub	sp, #32
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800897c:	f107 0310 	add.w	r3, r7, #16
 8008980:	2200      	movs	r2, #0
 8008982:	601a      	str	r2, [r3, #0]
 8008984:	605a      	str	r2, [r3, #4]
 8008986:	609a      	str	r2, [r3, #8]
 8008988:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008992:	d117      	bne.n	80089c4 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008994:	4b0d      	ldr	r3, [pc, #52]	; (80089cc <HAL_TIM_MspPostInit+0x58>)
 8008996:	699b      	ldr	r3, [r3, #24]
 8008998:	4a0c      	ldr	r2, [pc, #48]	; (80089cc <HAL_TIM_MspPostInit+0x58>)
 800899a:	f043 0304 	orr.w	r3, r3, #4
 800899e:	6193      	str	r3, [r2, #24]
 80089a0:	4b0a      	ldr	r3, [pc, #40]	; (80089cc <HAL_TIM_MspPostInit+0x58>)
 80089a2:	699b      	ldr	r3, [r3, #24]
 80089a4:	f003 0304 	and.w	r3, r3, #4
 80089a8:	60fb      	str	r3, [r7, #12]
 80089aa:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80089ac:	2303      	movs	r3, #3
 80089ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80089b0:	2302      	movs	r3, #2
 80089b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80089b4:	2302      	movs	r3, #2
 80089b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80089b8:	f107 0310 	add.w	r3, r7, #16
 80089bc:	4619      	mov	r1, r3
 80089be:	4804      	ldr	r0, [pc, #16]	; (80089d0 <HAL_TIM_MspPostInit+0x5c>)
 80089c0:	f7f8 ff78 	bl	80018b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80089c4:	bf00      	nop
 80089c6:	3720      	adds	r7, #32
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bd80      	pop	{r7, pc}
 80089cc:	40021000 	.word	0x40021000
 80089d0:	40010800 	.word	0x40010800

080089d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b088      	sub	sp, #32
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80089dc:	f107 0310 	add.w	r3, r7, #16
 80089e0:	2200      	movs	r2, #0
 80089e2:	601a      	str	r2, [r3, #0]
 80089e4:	605a      	str	r2, [r3, #4]
 80089e6:	609a      	str	r2, [r3, #8]
 80089e8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	4a33      	ldr	r2, [pc, #204]	; (8008abc <HAL_UART_MspInit+0xe8>)
 80089f0:	4293      	cmp	r3, r2
 80089f2:	d15f      	bne.n	8008ab4 <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80089f4:	4b32      	ldr	r3, [pc, #200]	; (8008ac0 <HAL_UART_MspInit+0xec>)
 80089f6:	699b      	ldr	r3, [r3, #24]
 80089f8:	4a31      	ldr	r2, [pc, #196]	; (8008ac0 <HAL_UART_MspInit+0xec>)
 80089fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80089fe:	6193      	str	r3, [r2, #24]
 8008a00:	4b2f      	ldr	r3, [pc, #188]	; (8008ac0 <HAL_UART_MspInit+0xec>)
 8008a02:	699b      	ldr	r3, [r3, #24]
 8008a04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a08:	60fb      	str	r3, [r7, #12]
 8008a0a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008a0c:	4b2c      	ldr	r3, [pc, #176]	; (8008ac0 <HAL_UART_MspInit+0xec>)
 8008a0e:	699b      	ldr	r3, [r3, #24]
 8008a10:	4a2b      	ldr	r2, [pc, #172]	; (8008ac0 <HAL_UART_MspInit+0xec>)
 8008a12:	f043 0304 	orr.w	r3, r3, #4
 8008a16:	6193      	str	r3, [r2, #24]
 8008a18:	4b29      	ldr	r3, [pc, #164]	; (8008ac0 <HAL_UART_MspInit+0xec>)
 8008a1a:	699b      	ldr	r3, [r3, #24]
 8008a1c:	f003 0304 	and.w	r3, r3, #4
 8008a20:	60bb      	str	r3, [r7, #8]
 8008a22:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8008a24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a28:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a2a:	2302      	movs	r3, #2
 8008a2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008a2e:	2303      	movs	r3, #3
 8008a30:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008a32:	f107 0310 	add.w	r3, r7, #16
 8008a36:	4619      	mov	r1, r3
 8008a38:	4822      	ldr	r0, [pc, #136]	; (8008ac4 <HAL_UART_MspInit+0xf0>)
 8008a3a:	f7f8 ff3b 	bl	80018b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8008a3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008a44:	2300      	movs	r3, #0
 8008a46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a48:	2300      	movs	r3, #0
 8008a4a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008a4c:	f107 0310 	add.w	r3, r7, #16
 8008a50:	4619      	mov	r1, r3
 8008a52:	481c      	ldr	r0, [pc, #112]	; (8008ac4 <HAL_UART_MspInit+0xf0>)
 8008a54:	f7f8 ff2e 	bl	80018b4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8008a58:	4b1b      	ldr	r3, [pc, #108]	; (8008ac8 <HAL_UART_MspInit+0xf4>)
 8008a5a:	4a1c      	ldr	r2, [pc, #112]	; (8008acc <HAL_UART_MspInit+0xf8>)
 8008a5c:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008a5e:	4b1a      	ldr	r3, [pc, #104]	; (8008ac8 <HAL_UART_MspInit+0xf4>)
 8008a60:	2210      	movs	r2, #16
 8008a62:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008a64:	4b18      	ldr	r3, [pc, #96]	; (8008ac8 <HAL_UART_MspInit+0xf4>)
 8008a66:	2200      	movs	r2, #0
 8008a68:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008a6a:	4b17      	ldr	r3, [pc, #92]	; (8008ac8 <HAL_UART_MspInit+0xf4>)
 8008a6c:	2280      	movs	r2, #128	; 0x80
 8008a6e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008a70:	4b15      	ldr	r3, [pc, #84]	; (8008ac8 <HAL_UART_MspInit+0xf4>)
 8008a72:	2200      	movs	r2, #0
 8008a74:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008a76:	4b14      	ldr	r3, [pc, #80]	; (8008ac8 <HAL_UART_MspInit+0xf4>)
 8008a78:	2200      	movs	r2, #0
 8008a7a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8008a7c:	4b12      	ldr	r3, [pc, #72]	; (8008ac8 <HAL_UART_MspInit+0xf4>)
 8008a7e:	2200      	movs	r2, #0
 8008a80:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8008a82:	4b11      	ldr	r3, [pc, #68]	; (8008ac8 <HAL_UART_MspInit+0xf4>)
 8008a84:	2200      	movs	r2, #0
 8008a86:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8008a88:	480f      	ldr	r0, [pc, #60]	; (8008ac8 <HAL_UART_MspInit+0xf4>)
 8008a8a:	f7f8 fcaf 	bl	80013ec <HAL_DMA_Init>
 8008a8e:	4603      	mov	r3, r0
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d001      	beq.n	8008a98 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8008a94:	f7fd f918 	bl	8005cc8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	4a0b      	ldr	r2, [pc, #44]	; (8008ac8 <HAL_UART_MspInit+0xf4>)
 8008a9c:	631a      	str	r2, [r3, #48]	; 0x30
 8008a9e:	4a0a      	ldr	r2, [pc, #40]	; (8008ac8 <HAL_UART_MspInit+0xf4>)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	2100      	movs	r1, #0
 8008aa8:	2025      	movs	r0, #37	; 0x25
 8008aaa:	f7f8 fc68 	bl	800137e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8008aae:	2025      	movs	r0, #37	; 0x25
 8008ab0:	f7f8 fc81 	bl	80013b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8008ab4:	bf00      	nop
 8008ab6:	3720      	adds	r7, #32
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd80      	pop	{r7, pc}
 8008abc:	40013800 	.word	0x40013800
 8008ac0:	40021000 	.word	0x40021000
 8008ac4:	40010800 	.word	0x40010800
 8008ac8:	20000614 	.word	0x20000614
 8008acc:	40020044 	.word	0x40020044

08008ad0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008ad0:	b480      	push	{r7}
 8008ad2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8008ad4:	bf00      	nop
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bc80      	pop	{r7}
 8008ada:	4770      	bx	lr

08008adc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008adc:	b480      	push	{r7}
 8008ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008ae0:	e7fe      	b.n	8008ae0 <HardFault_Handler+0x4>

08008ae2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008ae2:	b480      	push	{r7}
 8008ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008ae6:	e7fe      	b.n	8008ae6 <MemManage_Handler+0x4>

08008ae8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008ae8:	b480      	push	{r7}
 8008aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008aec:	e7fe      	b.n	8008aec <BusFault_Handler+0x4>

08008aee <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008aee:	b480      	push	{r7}
 8008af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008af2:	e7fe      	b.n	8008af2 <UsageFault_Handler+0x4>

08008af4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008af4:	b480      	push	{r7}
 8008af6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008af8:	bf00      	nop
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bc80      	pop	{r7}
 8008afe:	4770      	bx	lr

08008b00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008b00:	b480      	push	{r7}
 8008b02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008b04:	bf00      	nop
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bc80      	pop	{r7}
 8008b0a:	4770      	bx	lr

08008b0c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008b0c:	b480      	push	{r7}
 8008b0e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008b10:	bf00      	nop
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bc80      	pop	{r7}
 8008b16:	4770      	bx	lr

08008b18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008b1c:	f7f8 fb3c 	bl	8001198 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008b20:	bf00      	nop
 8008b22:	bd80      	pop	{r7, pc}

08008b24 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8008b28:	4802      	ldr	r0, [pc, #8]	; (8008b34 <DMA1_Channel4_IRQHandler+0x10>)
 8008b2a:	f7f8 fd8f 	bl	800164c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8008b2e:	bf00      	nop
 8008b30:	bd80      	pop	{r7, pc}
 8008b32:	bf00      	nop
 8008b34:	20000614 	.word	0x20000614

08008b38 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8008b3c:	4802      	ldr	r0, [pc, #8]	; (8008b48 <TIM1_UP_IRQHandler+0x10>)
 8008b3e:	f7fa ff3a 	bl	80039b6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8008b42:	bf00      	nop
 8008b44:	bd80      	pop	{r7, pc}
 8008b46:	bf00      	nop
 8008b48:	200006d4 	.word	0x200006d4

08008b4c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8008b50:	4802      	ldr	r0, [pc, #8]	; (8008b5c <USART1_IRQHandler+0x10>)
 8008b52:	f7fb fdf5 	bl	8004740 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8008b56:	bf00      	nop
 8008b58:	bd80      	pop	{r7, pc}
 8008b5a:	bf00      	nop
 8008b5c:	20000658 	.word	0x20000658

08008b60 <_sbrk>:
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b084      	sub	sp, #16
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
 8008b68:	4b11      	ldr	r3, [pc, #68]	; (8008bb0 <_sbrk+0x50>)
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d102      	bne.n	8008b76 <_sbrk+0x16>
 8008b70:	4b0f      	ldr	r3, [pc, #60]	; (8008bb0 <_sbrk+0x50>)
 8008b72:	4a10      	ldr	r2, [pc, #64]	; (8008bb4 <_sbrk+0x54>)
 8008b74:	601a      	str	r2, [r3, #0]
 8008b76:	4b0e      	ldr	r3, [pc, #56]	; (8008bb0 <_sbrk+0x50>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	60fb      	str	r3, [r7, #12]
 8008b7c:	4b0c      	ldr	r3, [pc, #48]	; (8008bb0 <_sbrk+0x50>)
 8008b7e:	681a      	ldr	r2, [r3, #0]
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	4413      	add	r3, r2
 8008b84:	466a      	mov	r2, sp
 8008b86:	4293      	cmp	r3, r2
 8008b88:	d907      	bls.n	8008b9a <_sbrk+0x3a>
 8008b8a:	f000 f873 	bl	8008c74 <__errno>
 8008b8e:	4602      	mov	r2, r0
 8008b90:	230c      	movs	r3, #12
 8008b92:	6013      	str	r3, [r2, #0]
 8008b94:	f04f 33ff 	mov.w	r3, #4294967295
 8008b98:	e006      	b.n	8008ba8 <_sbrk+0x48>
 8008b9a:	4b05      	ldr	r3, [pc, #20]	; (8008bb0 <_sbrk+0x50>)
 8008b9c:	681a      	ldr	r2, [r3, #0]
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	4413      	add	r3, r2
 8008ba2:	4a03      	ldr	r2, [pc, #12]	; (8008bb0 <_sbrk+0x50>)
 8008ba4:	6013      	str	r3, [r2, #0]
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	4618      	mov	r0, r3
 8008baa:	3710      	adds	r7, #16
 8008bac:	46bd      	mov	sp, r7
 8008bae:	bd80      	pop	{r7, pc}
 8008bb0:	20000510 	.word	0x20000510
 8008bb4:	20000788 	.word	0x20000788

08008bb8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008bb8:	b480      	push	{r7}
 8008bba:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8008bbc:	4b15      	ldr	r3, [pc, #84]	; (8008c14 <SystemInit+0x5c>)
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	4a14      	ldr	r2, [pc, #80]	; (8008c14 <SystemInit+0x5c>)
 8008bc2:	f043 0301 	orr.w	r3, r3, #1
 8008bc6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8008bc8:	4b12      	ldr	r3, [pc, #72]	; (8008c14 <SystemInit+0x5c>)
 8008bca:	685a      	ldr	r2, [r3, #4]
 8008bcc:	4911      	ldr	r1, [pc, #68]	; (8008c14 <SystemInit+0x5c>)
 8008bce:	4b12      	ldr	r3, [pc, #72]	; (8008c18 <SystemInit+0x60>)
 8008bd0:	4013      	ands	r3, r2
 8008bd2:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8008bd4:	4b0f      	ldr	r3, [pc, #60]	; (8008c14 <SystemInit+0x5c>)
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	4a0e      	ldr	r2, [pc, #56]	; (8008c14 <SystemInit+0x5c>)
 8008bda:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8008bde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008be2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8008be4:	4b0b      	ldr	r3, [pc, #44]	; (8008c14 <SystemInit+0x5c>)
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	4a0a      	ldr	r2, [pc, #40]	; (8008c14 <SystemInit+0x5c>)
 8008bea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008bee:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8008bf0:	4b08      	ldr	r3, [pc, #32]	; (8008c14 <SystemInit+0x5c>)
 8008bf2:	685b      	ldr	r3, [r3, #4]
 8008bf4:	4a07      	ldr	r2, [pc, #28]	; (8008c14 <SystemInit+0x5c>)
 8008bf6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8008bfa:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8008bfc:	4b05      	ldr	r3, [pc, #20]	; (8008c14 <SystemInit+0x5c>)
 8008bfe:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8008c02:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8008c04:	4b05      	ldr	r3, [pc, #20]	; (8008c1c <SystemInit+0x64>)
 8008c06:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008c0a:	609a      	str	r2, [r3, #8]
#endif 
}
 8008c0c:	bf00      	nop
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bc80      	pop	{r7}
 8008c12:	4770      	bx	lr
 8008c14:	40021000 	.word	0x40021000
 8008c18:	f8ff0000 	.word	0xf8ff0000
 8008c1c:	e000ed00 	.word	0xe000ed00

08008c20 <Reset_Handler>:
 8008c20:	2100      	movs	r1, #0
 8008c22:	e003      	b.n	8008c2c <LoopCopyDataInit>

08008c24 <CopyDataInit>:
 8008c24:	4b0b      	ldr	r3, [pc, #44]	; (8008c54 <LoopFillZerobss+0x14>)
 8008c26:	585b      	ldr	r3, [r3, r1]
 8008c28:	5043      	str	r3, [r0, r1]
 8008c2a:	3104      	adds	r1, #4

08008c2c <LoopCopyDataInit>:
 8008c2c:	480a      	ldr	r0, [pc, #40]	; (8008c58 <LoopFillZerobss+0x18>)
 8008c2e:	4b0b      	ldr	r3, [pc, #44]	; (8008c5c <LoopFillZerobss+0x1c>)
 8008c30:	1842      	adds	r2, r0, r1
 8008c32:	429a      	cmp	r2, r3
 8008c34:	d3f6      	bcc.n	8008c24 <CopyDataInit>
 8008c36:	4a0a      	ldr	r2, [pc, #40]	; (8008c60 <LoopFillZerobss+0x20>)
 8008c38:	e002      	b.n	8008c40 <LoopFillZerobss>

08008c3a <FillZerobss>:
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	f842 3b04 	str.w	r3, [r2], #4

08008c40 <LoopFillZerobss>:
 8008c40:	4b08      	ldr	r3, [pc, #32]	; (8008c64 <LoopFillZerobss+0x24>)
 8008c42:	429a      	cmp	r2, r3
 8008c44:	d3f9      	bcc.n	8008c3a <FillZerobss>
 8008c46:	f7ff ffb7 	bl	8008bb8 <SystemInit>
 8008c4a:	f000 f819 	bl	8008c80 <__libc_init_array>
 8008c4e:	f7fc fa53 	bl	80050f8 <main>
 8008c52:	4770      	bx	lr
 8008c54:	0800a328 	.word	0x0800a328
 8008c58:	20000000 	.word	0x20000000
 8008c5c:	20000238 	.word	0x20000238
 8008c60:	20000238 	.word	0x20000238
 8008c64:	20000784 	.word	0x20000784

08008c68 <ADC1_2_IRQHandler>:
 8008c68:	e7fe      	b.n	8008c68 <ADC1_2_IRQHandler>

08008c6a <atoi>:
 8008c6a:	220a      	movs	r2, #10
 8008c6c:	2100      	movs	r1, #0
 8008c6e:	f000 b93d 	b.w	8008eec <strtol>
	...

08008c74 <__errno>:
 8008c74:	4b01      	ldr	r3, [pc, #4]	; (8008c7c <__errno+0x8>)
 8008c76:	6818      	ldr	r0, [r3, #0]
 8008c78:	4770      	bx	lr
 8008c7a:	bf00      	nop
 8008c7c:	20000064 	.word	0x20000064

08008c80 <__libc_init_array>:
 8008c80:	b570      	push	{r4, r5, r6, lr}
 8008c82:	2500      	movs	r5, #0
 8008c84:	4e0c      	ldr	r6, [pc, #48]	; (8008cb8 <__libc_init_array+0x38>)
 8008c86:	4c0d      	ldr	r4, [pc, #52]	; (8008cbc <__libc_init_array+0x3c>)
 8008c88:	1ba4      	subs	r4, r4, r6
 8008c8a:	10a4      	asrs	r4, r4, #2
 8008c8c:	42a5      	cmp	r5, r4
 8008c8e:	d109      	bne.n	8008ca4 <__libc_init_array+0x24>
 8008c90:	f001 f8d2 	bl	8009e38 <_init>
 8008c94:	2500      	movs	r5, #0
 8008c96:	4e0a      	ldr	r6, [pc, #40]	; (8008cc0 <__libc_init_array+0x40>)
 8008c98:	4c0a      	ldr	r4, [pc, #40]	; (8008cc4 <__libc_init_array+0x44>)
 8008c9a:	1ba4      	subs	r4, r4, r6
 8008c9c:	10a4      	asrs	r4, r4, #2
 8008c9e:	42a5      	cmp	r5, r4
 8008ca0:	d105      	bne.n	8008cae <__libc_init_array+0x2e>
 8008ca2:	bd70      	pop	{r4, r5, r6, pc}
 8008ca4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008ca8:	4798      	blx	r3
 8008caa:	3501      	adds	r5, #1
 8008cac:	e7ee      	b.n	8008c8c <__libc_init_array+0xc>
 8008cae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008cb2:	4798      	blx	r3
 8008cb4:	3501      	adds	r5, #1
 8008cb6:	e7f2      	b.n	8008c9e <__libc_init_array+0x1e>
 8008cb8:	0800a320 	.word	0x0800a320
 8008cbc:	0800a320 	.word	0x0800a320
 8008cc0:	0800a320 	.word	0x0800a320
 8008cc4:	0800a324 	.word	0x0800a324

08008cc8 <memset>:
 8008cc8:	4603      	mov	r3, r0
 8008cca:	4402      	add	r2, r0
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	d100      	bne.n	8008cd2 <memset+0xa>
 8008cd0:	4770      	bx	lr
 8008cd2:	f803 1b01 	strb.w	r1, [r3], #1
 8008cd6:	e7f9      	b.n	8008ccc <memset+0x4>

08008cd8 <siprintf>:
 8008cd8:	b40e      	push	{r1, r2, r3}
 8008cda:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008cde:	b500      	push	{lr}
 8008ce0:	b09c      	sub	sp, #112	; 0x70
 8008ce2:	ab1d      	add	r3, sp, #116	; 0x74
 8008ce4:	9002      	str	r0, [sp, #8]
 8008ce6:	9006      	str	r0, [sp, #24]
 8008ce8:	9107      	str	r1, [sp, #28]
 8008cea:	9104      	str	r1, [sp, #16]
 8008cec:	4808      	ldr	r0, [pc, #32]	; (8008d10 <siprintf+0x38>)
 8008cee:	4909      	ldr	r1, [pc, #36]	; (8008d14 <siprintf+0x3c>)
 8008cf0:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cf4:	9105      	str	r1, [sp, #20]
 8008cf6:	6800      	ldr	r0, [r0, #0]
 8008cf8:	a902      	add	r1, sp, #8
 8008cfa:	9301      	str	r3, [sp, #4]
 8008cfc:	f000 fa2a 	bl	8009154 <_svfiprintf_r>
 8008d00:	2200      	movs	r2, #0
 8008d02:	9b02      	ldr	r3, [sp, #8]
 8008d04:	701a      	strb	r2, [r3, #0]
 8008d06:	b01c      	add	sp, #112	; 0x70
 8008d08:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d0c:	b003      	add	sp, #12
 8008d0e:	4770      	bx	lr
 8008d10:	20000064 	.word	0x20000064
 8008d14:	ffff0208 	.word	0xffff0208

08008d18 <strstr>:
 8008d18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d1a:	7803      	ldrb	r3, [r0, #0]
 8008d1c:	b17b      	cbz	r3, 8008d3e <strstr+0x26>
 8008d1e:	4604      	mov	r4, r0
 8008d20:	7823      	ldrb	r3, [r4, #0]
 8008d22:	4620      	mov	r0, r4
 8008d24:	1c66      	adds	r6, r4, #1
 8008d26:	b17b      	cbz	r3, 8008d48 <strstr+0x30>
 8008d28:	1e4a      	subs	r2, r1, #1
 8008d2a:	1e63      	subs	r3, r4, #1
 8008d2c:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8008d30:	b14d      	cbz	r5, 8008d46 <strstr+0x2e>
 8008d32:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8008d36:	4634      	mov	r4, r6
 8008d38:	42af      	cmp	r7, r5
 8008d3a:	d0f7      	beq.n	8008d2c <strstr+0x14>
 8008d3c:	e7f0      	b.n	8008d20 <strstr+0x8>
 8008d3e:	780b      	ldrb	r3, [r1, #0]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	bf18      	it	ne
 8008d44:	2000      	movne	r0, #0
 8008d46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d48:	4618      	mov	r0, r3
 8008d4a:	e7fc      	b.n	8008d46 <strstr+0x2e>

08008d4c <strtok>:
 8008d4c:	4b13      	ldr	r3, [pc, #76]	; (8008d9c <strtok+0x50>)
 8008d4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d52:	681d      	ldr	r5, [r3, #0]
 8008d54:	4606      	mov	r6, r0
 8008d56:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8008d58:	460f      	mov	r7, r1
 8008d5a:	b9b4      	cbnz	r4, 8008d8a <strtok+0x3e>
 8008d5c:	2050      	movs	r0, #80	; 0x50
 8008d5e:	f000 f8df 	bl	8008f20 <malloc>
 8008d62:	65a8      	str	r0, [r5, #88]	; 0x58
 8008d64:	e9c0 4400 	strd	r4, r4, [r0]
 8008d68:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8008d6c:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8008d70:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8008d74:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8008d78:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8008d7c:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8008d80:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8008d84:	6184      	str	r4, [r0, #24]
 8008d86:	7704      	strb	r4, [r0, #28]
 8008d88:	6244      	str	r4, [r0, #36]	; 0x24
 8008d8a:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8008d8c:	4639      	mov	r1, r7
 8008d8e:	4630      	mov	r0, r6
 8008d90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d94:	2301      	movs	r3, #1
 8008d96:	f000 b803 	b.w	8008da0 <__strtok_r>
 8008d9a:	bf00      	nop
 8008d9c:	20000064 	.word	0x20000064

08008da0 <__strtok_r>:
 8008da0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008da2:	b918      	cbnz	r0, 8008dac <__strtok_r+0xc>
 8008da4:	6810      	ldr	r0, [r2, #0]
 8008da6:	b908      	cbnz	r0, 8008dac <__strtok_r+0xc>
 8008da8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008daa:	4620      	mov	r0, r4
 8008dac:	4604      	mov	r4, r0
 8008dae:	460f      	mov	r7, r1
 8008db0:	f814 5b01 	ldrb.w	r5, [r4], #1
 8008db4:	f817 6b01 	ldrb.w	r6, [r7], #1
 8008db8:	b91e      	cbnz	r6, 8008dc2 <__strtok_r+0x22>
 8008dba:	b96d      	cbnz	r5, 8008dd8 <__strtok_r+0x38>
 8008dbc:	6015      	str	r5, [r2, #0]
 8008dbe:	4628      	mov	r0, r5
 8008dc0:	e7f2      	b.n	8008da8 <__strtok_r+0x8>
 8008dc2:	42b5      	cmp	r5, r6
 8008dc4:	d1f6      	bne.n	8008db4 <__strtok_r+0x14>
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d1ef      	bne.n	8008daa <__strtok_r+0xa>
 8008dca:	6014      	str	r4, [r2, #0]
 8008dcc:	7003      	strb	r3, [r0, #0]
 8008dce:	e7eb      	b.n	8008da8 <__strtok_r+0x8>
 8008dd0:	462b      	mov	r3, r5
 8008dd2:	e00d      	b.n	8008df0 <__strtok_r+0x50>
 8008dd4:	b926      	cbnz	r6, 8008de0 <__strtok_r+0x40>
 8008dd6:	461c      	mov	r4, r3
 8008dd8:	4623      	mov	r3, r4
 8008dda:	460f      	mov	r7, r1
 8008ddc:	f813 5b01 	ldrb.w	r5, [r3], #1
 8008de0:	f817 6b01 	ldrb.w	r6, [r7], #1
 8008de4:	42b5      	cmp	r5, r6
 8008de6:	d1f5      	bne.n	8008dd4 <__strtok_r+0x34>
 8008de8:	2d00      	cmp	r5, #0
 8008dea:	d0f1      	beq.n	8008dd0 <__strtok_r+0x30>
 8008dec:	2100      	movs	r1, #0
 8008dee:	7021      	strb	r1, [r4, #0]
 8008df0:	6013      	str	r3, [r2, #0]
 8008df2:	e7d9      	b.n	8008da8 <__strtok_r+0x8>

08008df4 <_strtol_l.isra.0>:
 8008df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008df8:	4680      	mov	r8, r0
 8008dfa:	4689      	mov	r9, r1
 8008dfc:	4692      	mov	sl, r2
 8008dfe:	461e      	mov	r6, r3
 8008e00:	460f      	mov	r7, r1
 8008e02:	463d      	mov	r5, r7
 8008e04:	9808      	ldr	r0, [sp, #32]
 8008e06:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008e0a:	f000 f885 	bl	8008f18 <__locale_ctype_ptr_l>
 8008e0e:	4420      	add	r0, r4
 8008e10:	7843      	ldrb	r3, [r0, #1]
 8008e12:	f013 0308 	ands.w	r3, r3, #8
 8008e16:	d132      	bne.n	8008e7e <_strtol_l.isra.0+0x8a>
 8008e18:	2c2d      	cmp	r4, #45	; 0x2d
 8008e1a:	d132      	bne.n	8008e82 <_strtol_l.isra.0+0x8e>
 8008e1c:	2201      	movs	r2, #1
 8008e1e:	787c      	ldrb	r4, [r7, #1]
 8008e20:	1cbd      	adds	r5, r7, #2
 8008e22:	2e00      	cmp	r6, #0
 8008e24:	d05d      	beq.n	8008ee2 <_strtol_l.isra.0+0xee>
 8008e26:	2e10      	cmp	r6, #16
 8008e28:	d109      	bne.n	8008e3e <_strtol_l.isra.0+0x4a>
 8008e2a:	2c30      	cmp	r4, #48	; 0x30
 8008e2c:	d107      	bne.n	8008e3e <_strtol_l.isra.0+0x4a>
 8008e2e:	782b      	ldrb	r3, [r5, #0]
 8008e30:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008e34:	2b58      	cmp	r3, #88	; 0x58
 8008e36:	d14f      	bne.n	8008ed8 <_strtol_l.isra.0+0xe4>
 8008e38:	2610      	movs	r6, #16
 8008e3a:	786c      	ldrb	r4, [r5, #1]
 8008e3c:	3502      	adds	r5, #2
 8008e3e:	2a00      	cmp	r2, #0
 8008e40:	bf14      	ite	ne
 8008e42:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8008e46:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8008e4a:	2700      	movs	r7, #0
 8008e4c:	fbb1 fcf6 	udiv	ip, r1, r6
 8008e50:	4638      	mov	r0, r7
 8008e52:	fb06 1e1c 	mls	lr, r6, ip, r1
 8008e56:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8008e5a:	2b09      	cmp	r3, #9
 8008e5c:	d817      	bhi.n	8008e8e <_strtol_l.isra.0+0x9a>
 8008e5e:	461c      	mov	r4, r3
 8008e60:	42a6      	cmp	r6, r4
 8008e62:	dd23      	ble.n	8008eac <_strtol_l.isra.0+0xb8>
 8008e64:	1c7b      	adds	r3, r7, #1
 8008e66:	d007      	beq.n	8008e78 <_strtol_l.isra.0+0x84>
 8008e68:	4584      	cmp	ip, r0
 8008e6a:	d31c      	bcc.n	8008ea6 <_strtol_l.isra.0+0xb2>
 8008e6c:	d101      	bne.n	8008e72 <_strtol_l.isra.0+0x7e>
 8008e6e:	45a6      	cmp	lr, r4
 8008e70:	db19      	blt.n	8008ea6 <_strtol_l.isra.0+0xb2>
 8008e72:	2701      	movs	r7, #1
 8008e74:	fb00 4006 	mla	r0, r0, r6, r4
 8008e78:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008e7c:	e7eb      	b.n	8008e56 <_strtol_l.isra.0+0x62>
 8008e7e:	462f      	mov	r7, r5
 8008e80:	e7bf      	b.n	8008e02 <_strtol_l.isra.0+0xe>
 8008e82:	2c2b      	cmp	r4, #43	; 0x2b
 8008e84:	bf04      	itt	eq
 8008e86:	1cbd      	addeq	r5, r7, #2
 8008e88:	787c      	ldrbeq	r4, [r7, #1]
 8008e8a:	461a      	mov	r2, r3
 8008e8c:	e7c9      	b.n	8008e22 <_strtol_l.isra.0+0x2e>
 8008e8e:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8008e92:	2b19      	cmp	r3, #25
 8008e94:	d801      	bhi.n	8008e9a <_strtol_l.isra.0+0xa6>
 8008e96:	3c37      	subs	r4, #55	; 0x37
 8008e98:	e7e2      	b.n	8008e60 <_strtol_l.isra.0+0x6c>
 8008e9a:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8008e9e:	2b19      	cmp	r3, #25
 8008ea0:	d804      	bhi.n	8008eac <_strtol_l.isra.0+0xb8>
 8008ea2:	3c57      	subs	r4, #87	; 0x57
 8008ea4:	e7dc      	b.n	8008e60 <_strtol_l.isra.0+0x6c>
 8008ea6:	f04f 37ff 	mov.w	r7, #4294967295
 8008eaa:	e7e5      	b.n	8008e78 <_strtol_l.isra.0+0x84>
 8008eac:	1c7b      	adds	r3, r7, #1
 8008eae:	d108      	bne.n	8008ec2 <_strtol_l.isra.0+0xce>
 8008eb0:	2322      	movs	r3, #34	; 0x22
 8008eb2:	4608      	mov	r0, r1
 8008eb4:	f8c8 3000 	str.w	r3, [r8]
 8008eb8:	f1ba 0f00 	cmp.w	sl, #0
 8008ebc:	d107      	bne.n	8008ece <_strtol_l.isra.0+0xda>
 8008ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ec2:	b102      	cbz	r2, 8008ec6 <_strtol_l.isra.0+0xd2>
 8008ec4:	4240      	negs	r0, r0
 8008ec6:	f1ba 0f00 	cmp.w	sl, #0
 8008eca:	d0f8      	beq.n	8008ebe <_strtol_l.isra.0+0xca>
 8008ecc:	b10f      	cbz	r7, 8008ed2 <_strtol_l.isra.0+0xde>
 8008ece:	f105 39ff 	add.w	r9, r5, #4294967295
 8008ed2:	f8ca 9000 	str.w	r9, [sl]
 8008ed6:	e7f2      	b.n	8008ebe <_strtol_l.isra.0+0xca>
 8008ed8:	2430      	movs	r4, #48	; 0x30
 8008eda:	2e00      	cmp	r6, #0
 8008edc:	d1af      	bne.n	8008e3e <_strtol_l.isra.0+0x4a>
 8008ede:	2608      	movs	r6, #8
 8008ee0:	e7ad      	b.n	8008e3e <_strtol_l.isra.0+0x4a>
 8008ee2:	2c30      	cmp	r4, #48	; 0x30
 8008ee4:	d0a3      	beq.n	8008e2e <_strtol_l.isra.0+0x3a>
 8008ee6:	260a      	movs	r6, #10
 8008ee8:	e7a9      	b.n	8008e3e <_strtol_l.isra.0+0x4a>
	...

08008eec <strtol>:
 8008eec:	4b08      	ldr	r3, [pc, #32]	; (8008f10 <strtol+0x24>)
 8008eee:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008ef0:	681c      	ldr	r4, [r3, #0]
 8008ef2:	4d08      	ldr	r5, [pc, #32]	; (8008f14 <strtol+0x28>)
 8008ef4:	6a23      	ldr	r3, [r4, #32]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	bf08      	it	eq
 8008efa:	462b      	moveq	r3, r5
 8008efc:	9300      	str	r3, [sp, #0]
 8008efe:	4613      	mov	r3, r2
 8008f00:	460a      	mov	r2, r1
 8008f02:	4601      	mov	r1, r0
 8008f04:	4620      	mov	r0, r4
 8008f06:	f7ff ff75 	bl	8008df4 <_strtol_l.isra.0>
 8008f0a:	b003      	add	sp, #12
 8008f0c:	bd30      	pop	{r4, r5, pc}
 8008f0e:	bf00      	nop
 8008f10:	20000064 	.word	0x20000064
 8008f14:	200000c8 	.word	0x200000c8

08008f18 <__locale_ctype_ptr_l>:
 8008f18:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8008f1c:	4770      	bx	lr
	...

08008f20 <malloc>:
 8008f20:	4b02      	ldr	r3, [pc, #8]	; (8008f2c <malloc+0xc>)
 8008f22:	4601      	mov	r1, r0
 8008f24:	6818      	ldr	r0, [r3, #0]
 8008f26:	f000 b861 	b.w	8008fec <_malloc_r>
 8008f2a:	bf00      	nop
 8008f2c:	20000064 	.word	0x20000064

08008f30 <__ascii_mbtowc>:
 8008f30:	b082      	sub	sp, #8
 8008f32:	b901      	cbnz	r1, 8008f36 <__ascii_mbtowc+0x6>
 8008f34:	a901      	add	r1, sp, #4
 8008f36:	b142      	cbz	r2, 8008f4a <__ascii_mbtowc+0x1a>
 8008f38:	b14b      	cbz	r3, 8008f4e <__ascii_mbtowc+0x1e>
 8008f3a:	7813      	ldrb	r3, [r2, #0]
 8008f3c:	600b      	str	r3, [r1, #0]
 8008f3e:	7812      	ldrb	r2, [r2, #0]
 8008f40:	1c10      	adds	r0, r2, #0
 8008f42:	bf18      	it	ne
 8008f44:	2001      	movne	r0, #1
 8008f46:	b002      	add	sp, #8
 8008f48:	4770      	bx	lr
 8008f4a:	4610      	mov	r0, r2
 8008f4c:	e7fb      	b.n	8008f46 <__ascii_mbtowc+0x16>
 8008f4e:	f06f 0001 	mvn.w	r0, #1
 8008f52:	e7f8      	b.n	8008f46 <__ascii_mbtowc+0x16>

08008f54 <_free_r>:
 8008f54:	b538      	push	{r3, r4, r5, lr}
 8008f56:	4605      	mov	r5, r0
 8008f58:	2900      	cmp	r1, #0
 8008f5a:	d043      	beq.n	8008fe4 <_free_r+0x90>
 8008f5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f60:	1f0c      	subs	r4, r1, #4
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	bfb8      	it	lt
 8008f66:	18e4      	addlt	r4, r4, r3
 8008f68:	f000 fbc3 	bl	80096f2 <__malloc_lock>
 8008f6c:	4a1e      	ldr	r2, [pc, #120]	; (8008fe8 <_free_r+0x94>)
 8008f6e:	6813      	ldr	r3, [r2, #0]
 8008f70:	4610      	mov	r0, r2
 8008f72:	b933      	cbnz	r3, 8008f82 <_free_r+0x2e>
 8008f74:	6063      	str	r3, [r4, #4]
 8008f76:	6014      	str	r4, [r2, #0]
 8008f78:	4628      	mov	r0, r5
 8008f7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f7e:	f000 bbb9 	b.w	80096f4 <__malloc_unlock>
 8008f82:	42a3      	cmp	r3, r4
 8008f84:	d90b      	bls.n	8008f9e <_free_r+0x4a>
 8008f86:	6821      	ldr	r1, [r4, #0]
 8008f88:	1862      	adds	r2, r4, r1
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	bf01      	itttt	eq
 8008f8e:	681a      	ldreq	r2, [r3, #0]
 8008f90:	685b      	ldreq	r3, [r3, #4]
 8008f92:	1852      	addeq	r2, r2, r1
 8008f94:	6022      	streq	r2, [r4, #0]
 8008f96:	6063      	str	r3, [r4, #4]
 8008f98:	6004      	str	r4, [r0, #0]
 8008f9a:	e7ed      	b.n	8008f78 <_free_r+0x24>
 8008f9c:	4613      	mov	r3, r2
 8008f9e:	685a      	ldr	r2, [r3, #4]
 8008fa0:	b10a      	cbz	r2, 8008fa6 <_free_r+0x52>
 8008fa2:	42a2      	cmp	r2, r4
 8008fa4:	d9fa      	bls.n	8008f9c <_free_r+0x48>
 8008fa6:	6819      	ldr	r1, [r3, #0]
 8008fa8:	1858      	adds	r0, r3, r1
 8008faa:	42a0      	cmp	r0, r4
 8008fac:	d10b      	bne.n	8008fc6 <_free_r+0x72>
 8008fae:	6820      	ldr	r0, [r4, #0]
 8008fb0:	4401      	add	r1, r0
 8008fb2:	1858      	adds	r0, r3, r1
 8008fb4:	4282      	cmp	r2, r0
 8008fb6:	6019      	str	r1, [r3, #0]
 8008fb8:	d1de      	bne.n	8008f78 <_free_r+0x24>
 8008fba:	6810      	ldr	r0, [r2, #0]
 8008fbc:	6852      	ldr	r2, [r2, #4]
 8008fbe:	4401      	add	r1, r0
 8008fc0:	6019      	str	r1, [r3, #0]
 8008fc2:	605a      	str	r2, [r3, #4]
 8008fc4:	e7d8      	b.n	8008f78 <_free_r+0x24>
 8008fc6:	d902      	bls.n	8008fce <_free_r+0x7a>
 8008fc8:	230c      	movs	r3, #12
 8008fca:	602b      	str	r3, [r5, #0]
 8008fcc:	e7d4      	b.n	8008f78 <_free_r+0x24>
 8008fce:	6820      	ldr	r0, [r4, #0]
 8008fd0:	1821      	adds	r1, r4, r0
 8008fd2:	428a      	cmp	r2, r1
 8008fd4:	bf01      	itttt	eq
 8008fd6:	6811      	ldreq	r1, [r2, #0]
 8008fd8:	6852      	ldreq	r2, [r2, #4]
 8008fda:	1809      	addeq	r1, r1, r0
 8008fdc:	6021      	streq	r1, [r4, #0]
 8008fde:	6062      	str	r2, [r4, #4]
 8008fe0:	605c      	str	r4, [r3, #4]
 8008fe2:	e7c9      	b.n	8008f78 <_free_r+0x24>
 8008fe4:	bd38      	pop	{r3, r4, r5, pc}
 8008fe6:	bf00      	nop
 8008fe8:	20000514 	.word	0x20000514

08008fec <_malloc_r>:
 8008fec:	b570      	push	{r4, r5, r6, lr}
 8008fee:	1ccd      	adds	r5, r1, #3
 8008ff0:	f025 0503 	bic.w	r5, r5, #3
 8008ff4:	3508      	adds	r5, #8
 8008ff6:	2d0c      	cmp	r5, #12
 8008ff8:	bf38      	it	cc
 8008ffa:	250c      	movcc	r5, #12
 8008ffc:	2d00      	cmp	r5, #0
 8008ffe:	4606      	mov	r6, r0
 8009000:	db01      	blt.n	8009006 <_malloc_r+0x1a>
 8009002:	42a9      	cmp	r1, r5
 8009004:	d903      	bls.n	800900e <_malloc_r+0x22>
 8009006:	230c      	movs	r3, #12
 8009008:	6033      	str	r3, [r6, #0]
 800900a:	2000      	movs	r0, #0
 800900c:	bd70      	pop	{r4, r5, r6, pc}
 800900e:	f000 fb70 	bl	80096f2 <__malloc_lock>
 8009012:	4a21      	ldr	r2, [pc, #132]	; (8009098 <_malloc_r+0xac>)
 8009014:	6814      	ldr	r4, [r2, #0]
 8009016:	4621      	mov	r1, r4
 8009018:	b991      	cbnz	r1, 8009040 <_malloc_r+0x54>
 800901a:	4c20      	ldr	r4, [pc, #128]	; (800909c <_malloc_r+0xb0>)
 800901c:	6823      	ldr	r3, [r4, #0]
 800901e:	b91b      	cbnz	r3, 8009028 <_malloc_r+0x3c>
 8009020:	4630      	mov	r0, r6
 8009022:	f000 fb17 	bl	8009654 <_sbrk_r>
 8009026:	6020      	str	r0, [r4, #0]
 8009028:	4629      	mov	r1, r5
 800902a:	4630      	mov	r0, r6
 800902c:	f000 fb12 	bl	8009654 <_sbrk_r>
 8009030:	1c43      	adds	r3, r0, #1
 8009032:	d124      	bne.n	800907e <_malloc_r+0x92>
 8009034:	230c      	movs	r3, #12
 8009036:	4630      	mov	r0, r6
 8009038:	6033      	str	r3, [r6, #0]
 800903a:	f000 fb5b 	bl	80096f4 <__malloc_unlock>
 800903e:	e7e4      	b.n	800900a <_malloc_r+0x1e>
 8009040:	680b      	ldr	r3, [r1, #0]
 8009042:	1b5b      	subs	r3, r3, r5
 8009044:	d418      	bmi.n	8009078 <_malloc_r+0x8c>
 8009046:	2b0b      	cmp	r3, #11
 8009048:	d90f      	bls.n	800906a <_malloc_r+0x7e>
 800904a:	600b      	str	r3, [r1, #0]
 800904c:	18cc      	adds	r4, r1, r3
 800904e:	50cd      	str	r5, [r1, r3]
 8009050:	4630      	mov	r0, r6
 8009052:	f000 fb4f 	bl	80096f4 <__malloc_unlock>
 8009056:	f104 000b 	add.w	r0, r4, #11
 800905a:	1d23      	adds	r3, r4, #4
 800905c:	f020 0007 	bic.w	r0, r0, #7
 8009060:	1ac3      	subs	r3, r0, r3
 8009062:	d0d3      	beq.n	800900c <_malloc_r+0x20>
 8009064:	425a      	negs	r2, r3
 8009066:	50e2      	str	r2, [r4, r3]
 8009068:	e7d0      	b.n	800900c <_malloc_r+0x20>
 800906a:	684b      	ldr	r3, [r1, #4]
 800906c:	428c      	cmp	r4, r1
 800906e:	bf16      	itet	ne
 8009070:	6063      	strne	r3, [r4, #4]
 8009072:	6013      	streq	r3, [r2, #0]
 8009074:	460c      	movne	r4, r1
 8009076:	e7eb      	b.n	8009050 <_malloc_r+0x64>
 8009078:	460c      	mov	r4, r1
 800907a:	6849      	ldr	r1, [r1, #4]
 800907c:	e7cc      	b.n	8009018 <_malloc_r+0x2c>
 800907e:	1cc4      	adds	r4, r0, #3
 8009080:	f024 0403 	bic.w	r4, r4, #3
 8009084:	42a0      	cmp	r0, r4
 8009086:	d005      	beq.n	8009094 <_malloc_r+0xa8>
 8009088:	1a21      	subs	r1, r4, r0
 800908a:	4630      	mov	r0, r6
 800908c:	f000 fae2 	bl	8009654 <_sbrk_r>
 8009090:	3001      	adds	r0, #1
 8009092:	d0cf      	beq.n	8009034 <_malloc_r+0x48>
 8009094:	6025      	str	r5, [r4, #0]
 8009096:	e7db      	b.n	8009050 <_malloc_r+0x64>
 8009098:	20000514 	.word	0x20000514
 800909c:	20000518 	.word	0x20000518

080090a0 <__ssputs_r>:
 80090a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090a4:	688e      	ldr	r6, [r1, #8]
 80090a6:	4682      	mov	sl, r0
 80090a8:	429e      	cmp	r6, r3
 80090aa:	460c      	mov	r4, r1
 80090ac:	4690      	mov	r8, r2
 80090ae:	4699      	mov	r9, r3
 80090b0:	d837      	bhi.n	8009122 <__ssputs_r+0x82>
 80090b2:	898a      	ldrh	r2, [r1, #12]
 80090b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80090b8:	d031      	beq.n	800911e <__ssputs_r+0x7e>
 80090ba:	2302      	movs	r3, #2
 80090bc:	6825      	ldr	r5, [r4, #0]
 80090be:	6909      	ldr	r1, [r1, #16]
 80090c0:	1a6f      	subs	r7, r5, r1
 80090c2:	6965      	ldr	r5, [r4, #20]
 80090c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80090c8:	fb95 f5f3 	sdiv	r5, r5, r3
 80090cc:	f109 0301 	add.w	r3, r9, #1
 80090d0:	443b      	add	r3, r7
 80090d2:	429d      	cmp	r5, r3
 80090d4:	bf38      	it	cc
 80090d6:	461d      	movcc	r5, r3
 80090d8:	0553      	lsls	r3, r2, #21
 80090da:	d530      	bpl.n	800913e <__ssputs_r+0x9e>
 80090dc:	4629      	mov	r1, r5
 80090de:	f7ff ff85 	bl	8008fec <_malloc_r>
 80090e2:	4606      	mov	r6, r0
 80090e4:	b950      	cbnz	r0, 80090fc <__ssputs_r+0x5c>
 80090e6:	230c      	movs	r3, #12
 80090e8:	f04f 30ff 	mov.w	r0, #4294967295
 80090ec:	f8ca 3000 	str.w	r3, [sl]
 80090f0:	89a3      	ldrh	r3, [r4, #12]
 80090f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090f6:	81a3      	strh	r3, [r4, #12]
 80090f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090fc:	463a      	mov	r2, r7
 80090fe:	6921      	ldr	r1, [r4, #16]
 8009100:	f000 fad3 	bl	80096aa <memcpy>
 8009104:	89a3      	ldrh	r3, [r4, #12]
 8009106:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800910a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800910e:	81a3      	strh	r3, [r4, #12]
 8009110:	6126      	str	r6, [r4, #16]
 8009112:	443e      	add	r6, r7
 8009114:	6026      	str	r6, [r4, #0]
 8009116:	464e      	mov	r6, r9
 8009118:	6165      	str	r5, [r4, #20]
 800911a:	1bed      	subs	r5, r5, r7
 800911c:	60a5      	str	r5, [r4, #8]
 800911e:	454e      	cmp	r6, r9
 8009120:	d900      	bls.n	8009124 <__ssputs_r+0x84>
 8009122:	464e      	mov	r6, r9
 8009124:	4632      	mov	r2, r6
 8009126:	4641      	mov	r1, r8
 8009128:	6820      	ldr	r0, [r4, #0]
 800912a:	f000 fac9 	bl	80096c0 <memmove>
 800912e:	68a3      	ldr	r3, [r4, #8]
 8009130:	2000      	movs	r0, #0
 8009132:	1b9b      	subs	r3, r3, r6
 8009134:	60a3      	str	r3, [r4, #8]
 8009136:	6823      	ldr	r3, [r4, #0]
 8009138:	441e      	add	r6, r3
 800913a:	6026      	str	r6, [r4, #0]
 800913c:	e7dc      	b.n	80090f8 <__ssputs_r+0x58>
 800913e:	462a      	mov	r2, r5
 8009140:	f000 fad9 	bl	80096f6 <_realloc_r>
 8009144:	4606      	mov	r6, r0
 8009146:	2800      	cmp	r0, #0
 8009148:	d1e2      	bne.n	8009110 <__ssputs_r+0x70>
 800914a:	6921      	ldr	r1, [r4, #16]
 800914c:	4650      	mov	r0, sl
 800914e:	f7ff ff01 	bl	8008f54 <_free_r>
 8009152:	e7c8      	b.n	80090e6 <__ssputs_r+0x46>

08009154 <_svfiprintf_r>:
 8009154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009158:	461d      	mov	r5, r3
 800915a:	898b      	ldrh	r3, [r1, #12]
 800915c:	b09d      	sub	sp, #116	; 0x74
 800915e:	061f      	lsls	r7, r3, #24
 8009160:	4680      	mov	r8, r0
 8009162:	460c      	mov	r4, r1
 8009164:	4616      	mov	r6, r2
 8009166:	d50f      	bpl.n	8009188 <_svfiprintf_r+0x34>
 8009168:	690b      	ldr	r3, [r1, #16]
 800916a:	b96b      	cbnz	r3, 8009188 <_svfiprintf_r+0x34>
 800916c:	2140      	movs	r1, #64	; 0x40
 800916e:	f7ff ff3d 	bl	8008fec <_malloc_r>
 8009172:	6020      	str	r0, [r4, #0]
 8009174:	6120      	str	r0, [r4, #16]
 8009176:	b928      	cbnz	r0, 8009184 <_svfiprintf_r+0x30>
 8009178:	230c      	movs	r3, #12
 800917a:	f8c8 3000 	str.w	r3, [r8]
 800917e:	f04f 30ff 	mov.w	r0, #4294967295
 8009182:	e0c8      	b.n	8009316 <_svfiprintf_r+0x1c2>
 8009184:	2340      	movs	r3, #64	; 0x40
 8009186:	6163      	str	r3, [r4, #20]
 8009188:	2300      	movs	r3, #0
 800918a:	9309      	str	r3, [sp, #36]	; 0x24
 800918c:	2320      	movs	r3, #32
 800918e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009192:	2330      	movs	r3, #48	; 0x30
 8009194:	f04f 0b01 	mov.w	fp, #1
 8009198:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800919c:	9503      	str	r5, [sp, #12]
 800919e:	4637      	mov	r7, r6
 80091a0:	463d      	mov	r5, r7
 80091a2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80091a6:	b10b      	cbz	r3, 80091ac <_svfiprintf_r+0x58>
 80091a8:	2b25      	cmp	r3, #37	; 0x25
 80091aa:	d13e      	bne.n	800922a <_svfiprintf_r+0xd6>
 80091ac:	ebb7 0a06 	subs.w	sl, r7, r6
 80091b0:	d00b      	beq.n	80091ca <_svfiprintf_r+0x76>
 80091b2:	4653      	mov	r3, sl
 80091b4:	4632      	mov	r2, r6
 80091b6:	4621      	mov	r1, r4
 80091b8:	4640      	mov	r0, r8
 80091ba:	f7ff ff71 	bl	80090a0 <__ssputs_r>
 80091be:	3001      	adds	r0, #1
 80091c0:	f000 80a4 	beq.w	800930c <_svfiprintf_r+0x1b8>
 80091c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091c6:	4453      	add	r3, sl
 80091c8:	9309      	str	r3, [sp, #36]	; 0x24
 80091ca:	783b      	ldrb	r3, [r7, #0]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	f000 809d 	beq.w	800930c <_svfiprintf_r+0x1b8>
 80091d2:	2300      	movs	r3, #0
 80091d4:	f04f 32ff 	mov.w	r2, #4294967295
 80091d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80091dc:	9304      	str	r3, [sp, #16]
 80091de:	9307      	str	r3, [sp, #28]
 80091e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80091e4:	931a      	str	r3, [sp, #104]	; 0x68
 80091e6:	462f      	mov	r7, r5
 80091e8:	2205      	movs	r2, #5
 80091ea:	f817 1b01 	ldrb.w	r1, [r7], #1
 80091ee:	4850      	ldr	r0, [pc, #320]	; (8009330 <_svfiprintf_r+0x1dc>)
 80091f0:	f000 fa4d 	bl	800968e <memchr>
 80091f4:	9b04      	ldr	r3, [sp, #16]
 80091f6:	b9d0      	cbnz	r0, 800922e <_svfiprintf_r+0xda>
 80091f8:	06d9      	lsls	r1, r3, #27
 80091fa:	bf44      	itt	mi
 80091fc:	2220      	movmi	r2, #32
 80091fe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009202:	071a      	lsls	r2, r3, #28
 8009204:	bf44      	itt	mi
 8009206:	222b      	movmi	r2, #43	; 0x2b
 8009208:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800920c:	782a      	ldrb	r2, [r5, #0]
 800920e:	2a2a      	cmp	r2, #42	; 0x2a
 8009210:	d015      	beq.n	800923e <_svfiprintf_r+0xea>
 8009212:	462f      	mov	r7, r5
 8009214:	2000      	movs	r0, #0
 8009216:	250a      	movs	r5, #10
 8009218:	9a07      	ldr	r2, [sp, #28]
 800921a:	4639      	mov	r1, r7
 800921c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009220:	3b30      	subs	r3, #48	; 0x30
 8009222:	2b09      	cmp	r3, #9
 8009224:	d94d      	bls.n	80092c2 <_svfiprintf_r+0x16e>
 8009226:	b1b8      	cbz	r0, 8009258 <_svfiprintf_r+0x104>
 8009228:	e00f      	b.n	800924a <_svfiprintf_r+0xf6>
 800922a:	462f      	mov	r7, r5
 800922c:	e7b8      	b.n	80091a0 <_svfiprintf_r+0x4c>
 800922e:	4a40      	ldr	r2, [pc, #256]	; (8009330 <_svfiprintf_r+0x1dc>)
 8009230:	463d      	mov	r5, r7
 8009232:	1a80      	subs	r0, r0, r2
 8009234:	fa0b f000 	lsl.w	r0, fp, r0
 8009238:	4318      	orrs	r0, r3
 800923a:	9004      	str	r0, [sp, #16]
 800923c:	e7d3      	b.n	80091e6 <_svfiprintf_r+0x92>
 800923e:	9a03      	ldr	r2, [sp, #12]
 8009240:	1d11      	adds	r1, r2, #4
 8009242:	6812      	ldr	r2, [r2, #0]
 8009244:	9103      	str	r1, [sp, #12]
 8009246:	2a00      	cmp	r2, #0
 8009248:	db01      	blt.n	800924e <_svfiprintf_r+0xfa>
 800924a:	9207      	str	r2, [sp, #28]
 800924c:	e004      	b.n	8009258 <_svfiprintf_r+0x104>
 800924e:	4252      	negs	r2, r2
 8009250:	f043 0302 	orr.w	r3, r3, #2
 8009254:	9207      	str	r2, [sp, #28]
 8009256:	9304      	str	r3, [sp, #16]
 8009258:	783b      	ldrb	r3, [r7, #0]
 800925a:	2b2e      	cmp	r3, #46	; 0x2e
 800925c:	d10c      	bne.n	8009278 <_svfiprintf_r+0x124>
 800925e:	787b      	ldrb	r3, [r7, #1]
 8009260:	2b2a      	cmp	r3, #42	; 0x2a
 8009262:	d133      	bne.n	80092cc <_svfiprintf_r+0x178>
 8009264:	9b03      	ldr	r3, [sp, #12]
 8009266:	3702      	adds	r7, #2
 8009268:	1d1a      	adds	r2, r3, #4
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	9203      	str	r2, [sp, #12]
 800926e:	2b00      	cmp	r3, #0
 8009270:	bfb8      	it	lt
 8009272:	f04f 33ff 	movlt.w	r3, #4294967295
 8009276:	9305      	str	r3, [sp, #20]
 8009278:	4d2e      	ldr	r5, [pc, #184]	; (8009334 <_svfiprintf_r+0x1e0>)
 800927a:	2203      	movs	r2, #3
 800927c:	7839      	ldrb	r1, [r7, #0]
 800927e:	4628      	mov	r0, r5
 8009280:	f000 fa05 	bl	800968e <memchr>
 8009284:	b138      	cbz	r0, 8009296 <_svfiprintf_r+0x142>
 8009286:	2340      	movs	r3, #64	; 0x40
 8009288:	1b40      	subs	r0, r0, r5
 800928a:	fa03 f000 	lsl.w	r0, r3, r0
 800928e:	9b04      	ldr	r3, [sp, #16]
 8009290:	3701      	adds	r7, #1
 8009292:	4303      	orrs	r3, r0
 8009294:	9304      	str	r3, [sp, #16]
 8009296:	7839      	ldrb	r1, [r7, #0]
 8009298:	2206      	movs	r2, #6
 800929a:	4827      	ldr	r0, [pc, #156]	; (8009338 <_svfiprintf_r+0x1e4>)
 800929c:	1c7e      	adds	r6, r7, #1
 800929e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80092a2:	f000 f9f4 	bl	800968e <memchr>
 80092a6:	2800      	cmp	r0, #0
 80092a8:	d038      	beq.n	800931c <_svfiprintf_r+0x1c8>
 80092aa:	4b24      	ldr	r3, [pc, #144]	; (800933c <_svfiprintf_r+0x1e8>)
 80092ac:	bb13      	cbnz	r3, 80092f4 <_svfiprintf_r+0x1a0>
 80092ae:	9b03      	ldr	r3, [sp, #12]
 80092b0:	3307      	adds	r3, #7
 80092b2:	f023 0307 	bic.w	r3, r3, #7
 80092b6:	3308      	adds	r3, #8
 80092b8:	9303      	str	r3, [sp, #12]
 80092ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092bc:	444b      	add	r3, r9
 80092be:	9309      	str	r3, [sp, #36]	; 0x24
 80092c0:	e76d      	b.n	800919e <_svfiprintf_r+0x4a>
 80092c2:	fb05 3202 	mla	r2, r5, r2, r3
 80092c6:	2001      	movs	r0, #1
 80092c8:	460f      	mov	r7, r1
 80092ca:	e7a6      	b.n	800921a <_svfiprintf_r+0xc6>
 80092cc:	2300      	movs	r3, #0
 80092ce:	250a      	movs	r5, #10
 80092d0:	4619      	mov	r1, r3
 80092d2:	3701      	adds	r7, #1
 80092d4:	9305      	str	r3, [sp, #20]
 80092d6:	4638      	mov	r0, r7
 80092d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80092dc:	3a30      	subs	r2, #48	; 0x30
 80092de:	2a09      	cmp	r2, #9
 80092e0:	d903      	bls.n	80092ea <_svfiprintf_r+0x196>
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d0c8      	beq.n	8009278 <_svfiprintf_r+0x124>
 80092e6:	9105      	str	r1, [sp, #20]
 80092e8:	e7c6      	b.n	8009278 <_svfiprintf_r+0x124>
 80092ea:	fb05 2101 	mla	r1, r5, r1, r2
 80092ee:	2301      	movs	r3, #1
 80092f0:	4607      	mov	r7, r0
 80092f2:	e7f0      	b.n	80092d6 <_svfiprintf_r+0x182>
 80092f4:	ab03      	add	r3, sp, #12
 80092f6:	9300      	str	r3, [sp, #0]
 80092f8:	4622      	mov	r2, r4
 80092fa:	4b11      	ldr	r3, [pc, #68]	; (8009340 <_svfiprintf_r+0x1ec>)
 80092fc:	a904      	add	r1, sp, #16
 80092fe:	4640      	mov	r0, r8
 8009300:	f3af 8000 	nop.w
 8009304:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009308:	4681      	mov	r9, r0
 800930a:	d1d6      	bne.n	80092ba <_svfiprintf_r+0x166>
 800930c:	89a3      	ldrh	r3, [r4, #12]
 800930e:	065b      	lsls	r3, r3, #25
 8009310:	f53f af35 	bmi.w	800917e <_svfiprintf_r+0x2a>
 8009314:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009316:	b01d      	add	sp, #116	; 0x74
 8009318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800931c:	ab03      	add	r3, sp, #12
 800931e:	9300      	str	r3, [sp, #0]
 8009320:	4622      	mov	r2, r4
 8009322:	4b07      	ldr	r3, [pc, #28]	; (8009340 <_svfiprintf_r+0x1ec>)
 8009324:	a904      	add	r1, sp, #16
 8009326:	4640      	mov	r0, r8
 8009328:	f000 f882 	bl	8009430 <_printf_i>
 800932c:	e7ea      	b.n	8009304 <_svfiprintf_r+0x1b0>
 800932e:	bf00      	nop
 8009330:	0800a19e 	.word	0x0800a19e
 8009334:	0800a1a4 	.word	0x0800a1a4
 8009338:	0800a1a8 	.word	0x0800a1a8
 800933c:	00000000 	.word	0x00000000
 8009340:	080090a1 	.word	0x080090a1

08009344 <_printf_common>:
 8009344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009348:	4691      	mov	r9, r2
 800934a:	461f      	mov	r7, r3
 800934c:	688a      	ldr	r2, [r1, #8]
 800934e:	690b      	ldr	r3, [r1, #16]
 8009350:	4606      	mov	r6, r0
 8009352:	4293      	cmp	r3, r2
 8009354:	bfb8      	it	lt
 8009356:	4613      	movlt	r3, r2
 8009358:	f8c9 3000 	str.w	r3, [r9]
 800935c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009360:	460c      	mov	r4, r1
 8009362:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009366:	b112      	cbz	r2, 800936e <_printf_common+0x2a>
 8009368:	3301      	adds	r3, #1
 800936a:	f8c9 3000 	str.w	r3, [r9]
 800936e:	6823      	ldr	r3, [r4, #0]
 8009370:	0699      	lsls	r1, r3, #26
 8009372:	bf42      	ittt	mi
 8009374:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009378:	3302      	addmi	r3, #2
 800937a:	f8c9 3000 	strmi.w	r3, [r9]
 800937e:	6825      	ldr	r5, [r4, #0]
 8009380:	f015 0506 	ands.w	r5, r5, #6
 8009384:	d107      	bne.n	8009396 <_printf_common+0x52>
 8009386:	f104 0a19 	add.w	sl, r4, #25
 800938a:	68e3      	ldr	r3, [r4, #12]
 800938c:	f8d9 2000 	ldr.w	r2, [r9]
 8009390:	1a9b      	subs	r3, r3, r2
 8009392:	42ab      	cmp	r3, r5
 8009394:	dc29      	bgt.n	80093ea <_printf_common+0xa6>
 8009396:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800939a:	6822      	ldr	r2, [r4, #0]
 800939c:	3300      	adds	r3, #0
 800939e:	bf18      	it	ne
 80093a0:	2301      	movne	r3, #1
 80093a2:	0692      	lsls	r2, r2, #26
 80093a4:	d42e      	bmi.n	8009404 <_printf_common+0xc0>
 80093a6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80093aa:	4639      	mov	r1, r7
 80093ac:	4630      	mov	r0, r6
 80093ae:	47c0      	blx	r8
 80093b0:	3001      	adds	r0, #1
 80093b2:	d021      	beq.n	80093f8 <_printf_common+0xb4>
 80093b4:	6823      	ldr	r3, [r4, #0]
 80093b6:	68e5      	ldr	r5, [r4, #12]
 80093b8:	f003 0306 	and.w	r3, r3, #6
 80093bc:	2b04      	cmp	r3, #4
 80093be:	bf18      	it	ne
 80093c0:	2500      	movne	r5, #0
 80093c2:	f8d9 2000 	ldr.w	r2, [r9]
 80093c6:	f04f 0900 	mov.w	r9, #0
 80093ca:	bf08      	it	eq
 80093cc:	1aad      	subeq	r5, r5, r2
 80093ce:	68a3      	ldr	r3, [r4, #8]
 80093d0:	6922      	ldr	r2, [r4, #16]
 80093d2:	bf08      	it	eq
 80093d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80093d8:	4293      	cmp	r3, r2
 80093da:	bfc4      	itt	gt
 80093dc:	1a9b      	subgt	r3, r3, r2
 80093de:	18ed      	addgt	r5, r5, r3
 80093e0:	341a      	adds	r4, #26
 80093e2:	454d      	cmp	r5, r9
 80093e4:	d11a      	bne.n	800941c <_printf_common+0xd8>
 80093e6:	2000      	movs	r0, #0
 80093e8:	e008      	b.n	80093fc <_printf_common+0xb8>
 80093ea:	2301      	movs	r3, #1
 80093ec:	4652      	mov	r2, sl
 80093ee:	4639      	mov	r1, r7
 80093f0:	4630      	mov	r0, r6
 80093f2:	47c0      	blx	r8
 80093f4:	3001      	adds	r0, #1
 80093f6:	d103      	bne.n	8009400 <_printf_common+0xbc>
 80093f8:	f04f 30ff 	mov.w	r0, #4294967295
 80093fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009400:	3501      	adds	r5, #1
 8009402:	e7c2      	b.n	800938a <_printf_common+0x46>
 8009404:	2030      	movs	r0, #48	; 0x30
 8009406:	18e1      	adds	r1, r4, r3
 8009408:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800940c:	1c5a      	adds	r2, r3, #1
 800940e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009412:	4422      	add	r2, r4
 8009414:	3302      	adds	r3, #2
 8009416:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800941a:	e7c4      	b.n	80093a6 <_printf_common+0x62>
 800941c:	2301      	movs	r3, #1
 800941e:	4622      	mov	r2, r4
 8009420:	4639      	mov	r1, r7
 8009422:	4630      	mov	r0, r6
 8009424:	47c0      	blx	r8
 8009426:	3001      	adds	r0, #1
 8009428:	d0e6      	beq.n	80093f8 <_printf_common+0xb4>
 800942a:	f109 0901 	add.w	r9, r9, #1
 800942e:	e7d8      	b.n	80093e2 <_printf_common+0x9e>

08009430 <_printf_i>:
 8009430:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009434:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009438:	460c      	mov	r4, r1
 800943a:	7e09      	ldrb	r1, [r1, #24]
 800943c:	b085      	sub	sp, #20
 800943e:	296e      	cmp	r1, #110	; 0x6e
 8009440:	4617      	mov	r7, r2
 8009442:	4606      	mov	r6, r0
 8009444:	4698      	mov	r8, r3
 8009446:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009448:	f000 80b3 	beq.w	80095b2 <_printf_i+0x182>
 800944c:	d822      	bhi.n	8009494 <_printf_i+0x64>
 800944e:	2963      	cmp	r1, #99	; 0x63
 8009450:	d036      	beq.n	80094c0 <_printf_i+0x90>
 8009452:	d80a      	bhi.n	800946a <_printf_i+0x3a>
 8009454:	2900      	cmp	r1, #0
 8009456:	f000 80b9 	beq.w	80095cc <_printf_i+0x19c>
 800945a:	2958      	cmp	r1, #88	; 0x58
 800945c:	f000 8083 	beq.w	8009566 <_printf_i+0x136>
 8009460:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009464:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009468:	e032      	b.n	80094d0 <_printf_i+0xa0>
 800946a:	2964      	cmp	r1, #100	; 0x64
 800946c:	d001      	beq.n	8009472 <_printf_i+0x42>
 800946e:	2969      	cmp	r1, #105	; 0x69
 8009470:	d1f6      	bne.n	8009460 <_printf_i+0x30>
 8009472:	6820      	ldr	r0, [r4, #0]
 8009474:	6813      	ldr	r3, [r2, #0]
 8009476:	0605      	lsls	r5, r0, #24
 8009478:	f103 0104 	add.w	r1, r3, #4
 800947c:	d52a      	bpl.n	80094d4 <_printf_i+0xa4>
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	6011      	str	r1, [r2, #0]
 8009482:	2b00      	cmp	r3, #0
 8009484:	da03      	bge.n	800948e <_printf_i+0x5e>
 8009486:	222d      	movs	r2, #45	; 0x2d
 8009488:	425b      	negs	r3, r3
 800948a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800948e:	486f      	ldr	r0, [pc, #444]	; (800964c <_printf_i+0x21c>)
 8009490:	220a      	movs	r2, #10
 8009492:	e039      	b.n	8009508 <_printf_i+0xd8>
 8009494:	2973      	cmp	r1, #115	; 0x73
 8009496:	f000 809d 	beq.w	80095d4 <_printf_i+0x1a4>
 800949a:	d808      	bhi.n	80094ae <_printf_i+0x7e>
 800949c:	296f      	cmp	r1, #111	; 0x6f
 800949e:	d020      	beq.n	80094e2 <_printf_i+0xb2>
 80094a0:	2970      	cmp	r1, #112	; 0x70
 80094a2:	d1dd      	bne.n	8009460 <_printf_i+0x30>
 80094a4:	6823      	ldr	r3, [r4, #0]
 80094a6:	f043 0320 	orr.w	r3, r3, #32
 80094aa:	6023      	str	r3, [r4, #0]
 80094ac:	e003      	b.n	80094b6 <_printf_i+0x86>
 80094ae:	2975      	cmp	r1, #117	; 0x75
 80094b0:	d017      	beq.n	80094e2 <_printf_i+0xb2>
 80094b2:	2978      	cmp	r1, #120	; 0x78
 80094b4:	d1d4      	bne.n	8009460 <_printf_i+0x30>
 80094b6:	2378      	movs	r3, #120	; 0x78
 80094b8:	4865      	ldr	r0, [pc, #404]	; (8009650 <_printf_i+0x220>)
 80094ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80094be:	e055      	b.n	800956c <_printf_i+0x13c>
 80094c0:	6813      	ldr	r3, [r2, #0]
 80094c2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80094c6:	1d19      	adds	r1, r3, #4
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	6011      	str	r1, [r2, #0]
 80094cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80094d0:	2301      	movs	r3, #1
 80094d2:	e08c      	b.n	80095ee <_printf_i+0x1be>
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80094da:	6011      	str	r1, [r2, #0]
 80094dc:	bf18      	it	ne
 80094de:	b21b      	sxthne	r3, r3
 80094e0:	e7cf      	b.n	8009482 <_printf_i+0x52>
 80094e2:	6813      	ldr	r3, [r2, #0]
 80094e4:	6825      	ldr	r5, [r4, #0]
 80094e6:	1d18      	adds	r0, r3, #4
 80094e8:	6010      	str	r0, [r2, #0]
 80094ea:	0628      	lsls	r0, r5, #24
 80094ec:	d501      	bpl.n	80094f2 <_printf_i+0xc2>
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	e002      	b.n	80094f8 <_printf_i+0xc8>
 80094f2:	0668      	lsls	r0, r5, #25
 80094f4:	d5fb      	bpl.n	80094ee <_printf_i+0xbe>
 80094f6:	881b      	ldrh	r3, [r3, #0]
 80094f8:	296f      	cmp	r1, #111	; 0x6f
 80094fa:	bf14      	ite	ne
 80094fc:	220a      	movne	r2, #10
 80094fe:	2208      	moveq	r2, #8
 8009500:	4852      	ldr	r0, [pc, #328]	; (800964c <_printf_i+0x21c>)
 8009502:	2100      	movs	r1, #0
 8009504:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009508:	6865      	ldr	r5, [r4, #4]
 800950a:	2d00      	cmp	r5, #0
 800950c:	60a5      	str	r5, [r4, #8]
 800950e:	f2c0 8095 	blt.w	800963c <_printf_i+0x20c>
 8009512:	6821      	ldr	r1, [r4, #0]
 8009514:	f021 0104 	bic.w	r1, r1, #4
 8009518:	6021      	str	r1, [r4, #0]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d13d      	bne.n	800959a <_printf_i+0x16a>
 800951e:	2d00      	cmp	r5, #0
 8009520:	f040 808e 	bne.w	8009640 <_printf_i+0x210>
 8009524:	4665      	mov	r5, ip
 8009526:	2a08      	cmp	r2, #8
 8009528:	d10b      	bne.n	8009542 <_printf_i+0x112>
 800952a:	6823      	ldr	r3, [r4, #0]
 800952c:	07db      	lsls	r3, r3, #31
 800952e:	d508      	bpl.n	8009542 <_printf_i+0x112>
 8009530:	6923      	ldr	r3, [r4, #16]
 8009532:	6862      	ldr	r2, [r4, #4]
 8009534:	429a      	cmp	r2, r3
 8009536:	bfde      	ittt	le
 8009538:	2330      	movle	r3, #48	; 0x30
 800953a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800953e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009542:	ebac 0305 	sub.w	r3, ip, r5
 8009546:	6123      	str	r3, [r4, #16]
 8009548:	f8cd 8000 	str.w	r8, [sp]
 800954c:	463b      	mov	r3, r7
 800954e:	aa03      	add	r2, sp, #12
 8009550:	4621      	mov	r1, r4
 8009552:	4630      	mov	r0, r6
 8009554:	f7ff fef6 	bl	8009344 <_printf_common>
 8009558:	3001      	adds	r0, #1
 800955a:	d14d      	bne.n	80095f8 <_printf_i+0x1c8>
 800955c:	f04f 30ff 	mov.w	r0, #4294967295
 8009560:	b005      	add	sp, #20
 8009562:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009566:	4839      	ldr	r0, [pc, #228]	; (800964c <_printf_i+0x21c>)
 8009568:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800956c:	6813      	ldr	r3, [r2, #0]
 800956e:	6821      	ldr	r1, [r4, #0]
 8009570:	1d1d      	adds	r5, r3, #4
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	6015      	str	r5, [r2, #0]
 8009576:	060a      	lsls	r2, r1, #24
 8009578:	d50b      	bpl.n	8009592 <_printf_i+0x162>
 800957a:	07ca      	lsls	r2, r1, #31
 800957c:	bf44      	itt	mi
 800957e:	f041 0120 	orrmi.w	r1, r1, #32
 8009582:	6021      	strmi	r1, [r4, #0]
 8009584:	b91b      	cbnz	r3, 800958e <_printf_i+0x15e>
 8009586:	6822      	ldr	r2, [r4, #0]
 8009588:	f022 0220 	bic.w	r2, r2, #32
 800958c:	6022      	str	r2, [r4, #0]
 800958e:	2210      	movs	r2, #16
 8009590:	e7b7      	b.n	8009502 <_printf_i+0xd2>
 8009592:	064d      	lsls	r5, r1, #25
 8009594:	bf48      	it	mi
 8009596:	b29b      	uxthmi	r3, r3
 8009598:	e7ef      	b.n	800957a <_printf_i+0x14a>
 800959a:	4665      	mov	r5, ip
 800959c:	fbb3 f1f2 	udiv	r1, r3, r2
 80095a0:	fb02 3311 	mls	r3, r2, r1, r3
 80095a4:	5cc3      	ldrb	r3, [r0, r3]
 80095a6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80095aa:	460b      	mov	r3, r1
 80095ac:	2900      	cmp	r1, #0
 80095ae:	d1f5      	bne.n	800959c <_printf_i+0x16c>
 80095b0:	e7b9      	b.n	8009526 <_printf_i+0xf6>
 80095b2:	6813      	ldr	r3, [r2, #0]
 80095b4:	6825      	ldr	r5, [r4, #0]
 80095b6:	1d18      	adds	r0, r3, #4
 80095b8:	6961      	ldr	r1, [r4, #20]
 80095ba:	6010      	str	r0, [r2, #0]
 80095bc:	0628      	lsls	r0, r5, #24
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	d501      	bpl.n	80095c6 <_printf_i+0x196>
 80095c2:	6019      	str	r1, [r3, #0]
 80095c4:	e002      	b.n	80095cc <_printf_i+0x19c>
 80095c6:	066a      	lsls	r2, r5, #25
 80095c8:	d5fb      	bpl.n	80095c2 <_printf_i+0x192>
 80095ca:	8019      	strh	r1, [r3, #0]
 80095cc:	2300      	movs	r3, #0
 80095ce:	4665      	mov	r5, ip
 80095d0:	6123      	str	r3, [r4, #16]
 80095d2:	e7b9      	b.n	8009548 <_printf_i+0x118>
 80095d4:	6813      	ldr	r3, [r2, #0]
 80095d6:	1d19      	adds	r1, r3, #4
 80095d8:	6011      	str	r1, [r2, #0]
 80095da:	681d      	ldr	r5, [r3, #0]
 80095dc:	6862      	ldr	r2, [r4, #4]
 80095de:	2100      	movs	r1, #0
 80095e0:	4628      	mov	r0, r5
 80095e2:	f000 f854 	bl	800968e <memchr>
 80095e6:	b108      	cbz	r0, 80095ec <_printf_i+0x1bc>
 80095e8:	1b40      	subs	r0, r0, r5
 80095ea:	6060      	str	r0, [r4, #4]
 80095ec:	6863      	ldr	r3, [r4, #4]
 80095ee:	6123      	str	r3, [r4, #16]
 80095f0:	2300      	movs	r3, #0
 80095f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80095f6:	e7a7      	b.n	8009548 <_printf_i+0x118>
 80095f8:	6923      	ldr	r3, [r4, #16]
 80095fa:	462a      	mov	r2, r5
 80095fc:	4639      	mov	r1, r7
 80095fe:	4630      	mov	r0, r6
 8009600:	47c0      	blx	r8
 8009602:	3001      	adds	r0, #1
 8009604:	d0aa      	beq.n	800955c <_printf_i+0x12c>
 8009606:	6823      	ldr	r3, [r4, #0]
 8009608:	079b      	lsls	r3, r3, #30
 800960a:	d413      	bmi.n	8009634 <_printf_i+0x204>
 800960c:	68e0      	ldr	r0, [r4, #12]
 800960e:	9b03      	ldr	r3, [sp, #12]
 8009610:	4298      	cmp	r0, r3
 8009612:	bfb8      	it	lt
 8009614:	4618      	movlt	r0, r3
 8009616:	e7a3      	b.n	8009560 <_printf_i+0x130>
 8009618:	2301      	movs	r3, #1
 800961a:	464a      	mov	r2, r9
 800961c:	4639      	mov	r1, r7
 800961e:	4630      	mov	r0, r6
 8009620:	47c0      	blx	r8
 8009622:	3001      	adds	r0, #1
 8009624:	d09a      	beq.n	800955c <_printf_i+0x12c>
 8009626:	3501      	adds	r5, #1
 8009628:	68e3      	ldr	r3, [r4, #12]
 800962a:	9a03      	ldr	r2, [sp, #12]
 800962c:	1a9b      	subs	r3, r3, r2
 800962e:	42ab      	cmp	r3, r5
 8009630:	dcf2      	bgt.n	8009618 <_printf_i+0x1e8>
 8009632:	e7eb      	b.n	800960c <_printf_i+0x1dc>
 8009634:	2500      	movs	r5, #0
 8009636:	f104 0919 	add.w	r9, r4, #25
 800963a:	e7f5      	b.n	8009628 <_printf_i+0x1f8>
 800963c:	2b00      	cmp	r3, #0
 800963e:	d1ac      	bne.n	800959a <_printf_i+0x16a>
 8009640:	7803      	ldrb	r3, [r0, #0]
 8009642:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009646:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800964a:	e76c      	b.n	8009526 <_printf_i+0xf6>
 800964c:	0800a1af 	.word	0x0800a1af
 8009650:	0800a1c0 	.word	0x0800a1c0

08009654 <_sbrk_r>:
 8009654:	b538      	push	{r3, r4, r5, lr}
 8009656:	2300      	movs	r3, #0
 8009658:	4c05      	ldr	r4, [pc, #20]	; (8009670 <_sbrk_r+0x1c>)
 800965a:	4605      	mov	r5, r0
 800965c:	4608      	mov	r0, r1
 800965e:	6023      	str	r3, [r4, #0]
 8009660:	f7ff fa7e 	bl	8008b60 <_sbrk>
 8009664:	1c43      	adds	r3, r0, #1
 8009666:	d102      	bne.n	800966e <_sbrk_r+0x1a>
 8009668:	6823      	ldr	r3, [r4, #0]
 800966a:	b103      	cbz	r3, 800966e <_sbrk_r+0x1a>
 800966c:	602b      	str	r3, [r5, #0]
 800966e:	bd38      	pop	{r3, r4, r5, pc}
 8009670:	20000780 	.word	0x20000780

08009674 <__ascii_wctomb>:
 8009674:	b149      	cbz	r1, 800968a <__ascii_wctomb+0x16>
 8009676:	2aff      	cmp	r2, #255	; 0xff
 8009678:	bf8b      	itete	hi
 800967a:	238a      	movhi	r3, #138	; 0x8a
 800967c:	700a      	strbls	r2, [r1, #0]
 800967e:	6003      	strhi	r3, [r0, #0]
 8009680:	2001      	movls	r0, #1
 8009682:	bf88      	it	hi
 8009684:	f04f 30ff 	movhi.w	r0, #4294967295
 8009688:	4770      	bx	lr
 800968a:	4608      	mov	r0, r1
 800968c:	4770      	bx	lr

0800968e <memchr>:
 800968e:	b510      	push	{r4, lr}
 8009690:	b2c9      	uxtb	r1, r1
 8009692:	4402      	add	r2, r0
 8009694:	4290      	cmp	r0, r2
 8009696:	4603      	mov	r3, r0
 8009698:	d101      	bne.n	800969e <memchr+0x10>
 800969a:	2300      	movs	r3, #0
 800969c:	e003      	b.n	80096a6 <memchr+0x18>
 800969e:	781c      	ldrb	r4, [r3, #0]
 80096a0:	3001      	adds	r0, #1
 80096a2:	428c      	cmp	r4, r1
 80096a4:	d1f6      	bne.n	8009694 <memchr+0x6>
 80096a6:	4618      	mov	r0, r3
 80096a8:	bd10      	pop	{r4, pc}

080096aa <memcpy>:
 80096aa:	b510      	push	{r4, lr}
 80096ac:	1e43      	subs	r3, r0, #1
 80096ae:	440a      	add	r2, r1
 80096b0:	4291      	cmp	r1, r2
 80096b2:	d100      	bne.n	80096b6 <memcpy+0xc>
 80096b4:	bd10      	pop	{r4, pc}
 80096b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80096ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80096be:	e7f7      	b.n	80096b0 <memcpy+0x6>

080096c0 <memmove>:
 80096c0:	4288      	cmp	r0, r1
 80096c2:	b510      	push	{r4, lr}
 80096c4:	eb01 0302 	add.w	r3, r1, r2
 80096c8:	d807      	bhi.n	80096da <memmove+0x1a>
 80096ca:	1e42      	subs	r2, r0, #1
 80096cc:	4299      	cmp	r1, r3
 80096ce:	d00a      	beq.n	80096e6 <memmove+0x26>
 80096d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80096d4:	f802 4f01 	strb.w	r4, [r2, #1]!
 80096d8:	e7f8      	b.n	80096cc <memmove+0xc>
 80096da:	4283      	cmp	r3, r0
 80096dc:	d9f5      	bls.n	80096ca <memmove+0xa>
 80096de:	1881      	adds	r1, r0, r2
 80096e0:	1ad2      	subs	r2, r2, r3
 80096e2:	42d3      	cmn	r3, r2
 80096e4:	d100      	bne.n	80096e8 <memmove+0x28>
 80096e6:	bd10      	pop	{r4, pc}
 80096e8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80096ec:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80096f0:	e7f7      	b.n	80096e2 <memmove+0x22>

080096f2 <__malloc_lock>:
 80096f2:	4770      	bx	lr

080096f4 <__malloc_unlock>:
 80096f4:	4770      	bx	lr

080096f6 <_realloc_r>:
 80096f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096f8:	4607      	mov	r7, r0
 80096fa:	4614      	mov	r4, r2
 80096fc:	460e      	mov	r6, r1
 80096fe:	b921      	cbnz	r1, 800970a <_realloc_r+0x14>
 8009700:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009704:	4611      	mov	r1, r2
 8009706:	f7ff bc71 	b.w	8008fec <_malloc_r>
 800970a:	b922      	cbnz	r2, 8009716 <_realloc_r+0x20>
 800970c:	f7ff fc22 	bl	8008f54 <_free_r>
 8009710:	4625      	mov	r5, r4
 8009712:	4628      	mov	r0, r5
 8009714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009716:	f000 f814 	bl	8009742 <_malloc_usable_size_r>
 800971a:	42a0      	cmp	r0, r4
 800971c:	d20f      	bcs.n	800973e <_realloc_r+0x48>
 800971e:	4621      	mov	r1, r4
 8009720:	4638      	mov	r0, r7
 8009722:	f7ff fc63 	bl	8008fec <_malloc_r>
 8009726:	4605      	mov	r5, r0
 8009728:	2800      	cmp	r0, #0
 800972a:	d0f2      	beq.n	8009712 <_realloc_r+0x1c>
 800972c:	4631      	mov	r1, r6
 800972e:	4622      	mov	r2, r4
 8009730:	f7ff ffbb 	bl	80096aa <memcpy>
 8009734:	4631      	mov	r1, r6
 8009736:	4638      	mov	r0, r7
 8009738:	f7ff fc0c 	bl	8008f54 <_free_r>
 800973c:	e7e9      	b.n	8009712 <_realloc_r+0x1c>
 800973e:	4635      	mov	r5, r6
 8009740:	e7e7      	b.n	8009712 <_realloc_r+0x1c>

08009742 <_malloc_usable_size_r>:
 8009742:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009746:	1f18      	subs	r0, r3, #4
 8009748:	2b00      	cmp	r3, #0
 800974a:	bfbc      	itt	lt
 800974c:	580b      	ldrlt	r3, [r1, r0]
 800974e:	18c0      	addlt	r0, r0, r3
 8009750:	4770      	bx	lr
 8009752:	0000      	movs	r0, r0
 8009754:	0000      	movs	r0, r0
	...

08009758 <atan>:
 8009758:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800975c:	4bb6      	ldr	r3, [pc, #728]	; (8009a38 <atan+0x2e0>)
 800975e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8009762:	429e      	cmp	r6, r3
 8009764:	4604      	mov	r4, r0
 8009766:	460d      	mov	r5, r1
 8009768:	468b      	mov	fp, r1
 800976a:	dd17      	ble.n	800979c <atan+0x44>
 800976c:	4bb3      	ldr	r3, [pc, #716]	; (8009a3c <atan+0x2e4>)
 800976e:	429e      	cmp	r6, r3
 8009770:	dc01      	bgt.n	8009776 <atan+0x1e>
 8009772:	d109      	bne.n	8009788 <atan+0x30>
 8009774:	b140      	cbz	r0, 8009788 <atan+0x30>
 8009776:	4622      	mov	r2, r4
 8009778:	462b      	mov	r3, r5
 800977a:	4620      	mov	r0, r4
 800977c:	4629      	mov	r1, r5
 800977e:	f7f6 fcf5 	bl	800016c <__adddf3>
 8009782:	4604      	mov	r4, r0
 8009784:	460d      	mov	r5, r1
 8009786:	e005      	b.n	8009794 <atan+0x3c>
 8009788:	f1bb 0f00 	cmp.w	fp, #0
 800978c:	4cac      	ldr	r4, [pc, #688]	; (8009a40 <atan+0x2e8>)
 800978e:	f340 8121 	ble.w	80099d4 <atan+0x27c>
 8009792:	4dac      	ldr	r5, [pc, #688]	; (8009a44 <atan+0x2ec>)
 8009794:	4620      	mov	r0, r4
 8009796:	4629      	mov	r1, r5
 8009798:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800979c:	4baa      	ldr	r3, [pc, #680]	; (8009a48 <atan+0x2f0>)
 800979e:	429e      	cmp	r6, r3
 80097a0:	dc11      	bgt.n	80097c6 <atan+0x6e>
 80097a2:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80097a6:	429e      	cmp	r6, r3
 80097a8:	dc0a      	bgt.n	80097c0 <atan+0x68>
 80097aa:	a38b      	add	r3, pc, #556	; (adr r3, 80099d8 <atan+0x280>)
 80097ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097b0:	f7f6 fcdc 	bl	800016c <__adddf3>
 80097b4:	2200      	movs	r2, #0
 80097b6:	4ba5      	ldr	r3, [pc, #660]	; (8009a4c <atan+0x2f4>)
 80097b8:	f7f7 f91e 	bl	80009f8 <__aeabi_dcmpgt>
 80097bc:	2800      	cmp	r0, #0
 80097be:	d1e9      	bne.n	8009794 <atan+0x3c>
 80097c0:	f04f 3aff 	mov.w	sl, #4294967295
 80097c4:	e027      	b.n	8009816 <atan+0xbe>
 80097c6:	f000 f951 	bl	8009a6c <fabs>
 80097ca:	4ba1      	ldr	r3, [pc, #644]	; (8009a50 <atan+0x2f8>)
 80097cc:	4604      	mov	r4, r0
 80097ce:	429e      	cmp	r6, r3
 80097d0:	460d      	mov	r5, r1
 80097d2:	f300 80b8 	bgt.w	8009946 <atan+0x1ee>
 80097d6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80097da:	429e      	cmp	r6, r3
 80097dc:	f300 809c 	bgt.w	8009918 <atan+0x1c0>
 80097e0:	4602      	mov	r2, r0
 80097e2:	460b      	mov	r3, r1
 80097e4:	f7f6 fcc2 	bl	800016c <__adddf3>
 80097e8:	2200      	movs	r2, #0
 80097ea:	4b98      	ldr	r3, [pc, #608]	; (8009a4c <atan+0x2f4>)
 80097ec:	f7f6 fcbc 	bl	8000168 <__aeabi_dsub>
 80097f0:	2200      	movs	r2, #0
 80097f2:	4606      	mov	r6, r0
 80097f4:	460f      	mov	r7, r1
 80097f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80097fa:	4620      	mov	r0, r4
 80097fc:	4629      	mov	r1, r5
 80097fe:	f7f6 fcb5 	bl	800016c <__adddf3>
 8009802:	4602      	mov	r2, r0
 8009804:	460b      	mov	r3, r1
 8009806:	4630      	mov	r0, r6
 8009808:	4639      	mov	r1, r7
 800980a:	f7f6 ff8f 	bl	800072c <__aeabi_ddiv>
 800980e:	f04f 0a00 	mov.w	sl, #0
 8009812:	4604      	mov	r4, r0
 8009814:	460d      	mov	r5, r1
 8009816:	4622      	mov	r2, r4
 8009818:	462b      	mov	r3, r5
 800981a:	4620      	mov	r0, r4
 800981c:	4629      	mov	r1, r5
 800981e:	f7f6 fe5b 	bl	80004d8 <__aeabi_dmul>
 8009822:	4602      	mov	r2, r0
 8009824:	460b      	mov	r3, r1
 8009826:	4680      	mov	r8, r0
 8009828:	4689      	mov	r9, r1
 800982a:	f7f6 fe55 	bl	80004d8 <__aeabi_dmul>
 800982e:	a36c      	add	r3, pc, #432	; (adr r3, 80099e0 <atan+0x288>)
 8009830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009834:	4606      	mov	r6, r0
 8009836:	460f      	mov	r7, r1
 8009838:	f7f6 fe4e 	bl	80004d8 <__aeabi_dmul>
 800983c:	a36a      	add	r3, pc, #424	; (adr r3, 80099e8 <atan+0x290>)
 800983e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009842:	f7f6 fc93 	bl	800016c <__adddf3>
 8009846:	4632      	mov	r2, r6
 8009848:	463b      	mov	r3, r7
 800984a:	f7f6 fe45 	bl	80004d8 <__aeabi_dmul>
 800984e:	a368      	add	r3, pc, #416	; (adr r3, 80099f0 <atan+0x298>)
 8009850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009854:	f7f6 fc8a 	bl	800016c <__adddf3>
 8009858:	4632      	mov	r2, r6
 800985a:	463b      	mov	r3, r7
 800985c:	f7f6 fe3c 	bl	80004d8 <__aeabi_dmul>
 8009860:	a365      	add	r3, pc, #404	; (adr r3, 80099f8 <atan+0x2a0>)
 8009862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009866:	f7f6 fc81 	bl	800016c <__adddf3>
 800986a:	4632      	mov	r2, r6
 800986c:	463b      	mov	r3, r7
 800986e:	f7f6 fe33 	bl	80004d8 <__aeabi_dmul>
 8009872:	a363      	add	r3, pc, #396	; (adr r3, 8009a00 <atan+0x2a8>)
 8009874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009878:	f7f6 fc78 	bl	800016c <__adddf3>
 800987c:	4632      	mov	r2, r6
 800987e:	463b      	mov	r3, r7
 8009880:	f7f6 fe2a 	bl	80004d8 <__aeabi_dmul>
 8009884:	a360      	add	r3, pc, #384	; (adr r3, 8009a08 <atan+0x2b0>)
 8009886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800988a:	f7f6 fc6f 	bl	800016c <__adddf3>
 800988e:	4642      	mov	r2, r8
 8009890:	464b      	mov	r3, r9
 8009892:	f7f6 fe21 	bl	80004d8 <__aeabi_dmul>
 8009896:	a35e      	add	r3, pc, #376	; (adr r3, 8009a10 <atan+0x2b8>)
 8009898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800989c:	4680      	mov	r8, r0
 800989e:	4689      	mov	r9, r1
 80098a0:	4630      	mov	r0, r6
 80098a2:	4639      	mov	r1, r7
 80098a4:	f7f6 fe18 	bl	80004d8 <__aeabi_dmul>
 80098a8:	a35b      	add	r3, pc, #364	; (adr r3, 8009a18 <atan+0x2c0>)
 80098aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ae:	f7f6 fc5b 	bl	8000168 <__aeabi_dsub>
 80098b2:	4632      	mov	r2, r6
 80098b4:	463b      	mov	r3, r7
 80098b6:	f7f6 fe0f 	bl	80004d8 <__aeabi_dmul>
 80098ba:	a359      	add	r3, pc, #356	; (adr r3, 8009a20 <atan+0x2c8>)
 80098bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098c0:	f7f6 fc52 	bl	8000168 <__aeabi_dsub>
 80098c4:	4632      	mov	r2, r6
 80098c6:	463b      	mov	r3, r7
 80098c8:	f7f6 fe06 	bl	80004d8 <__aeabi_dmul>
 80098cc:	a356      	add	r3, pc, #344	; (adr r3, 8009a28 <atan+0x2d0>)
 80098ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098d2:	f7f6 fc49 	bl	8000168 <__aeabi_dsub>
 80098d6:	4632      	mov	r2, r6
 80098d8:	463b      	mov	r3, r7
 80098da:	f7f6 fdfd 	bl	80004d8 <__aeabi_dmul>
 80098de:	a354      	add	r3, pc, #336	; (adr r3, 8009a30 <atan+0x2d8>)
 80098e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098e4:	f7f6 fc40 	bl	8000168 <__aeabi_dsub>
 80098e8:	4632      	mov	r2, r6
 80098ea:	463b      	mov	r3, r7
 80098ec:	f7f6 fdf4 	bl	80004d8 <__aeabi_dmul>
 80098f0:	4602      	mov	r2, r0
 80098f2:	460b      	mov	r3, r1
 80098f4:	4640      	mov	r0, r8
 80098f6:	4649      	mov	r1, r9
 80098f8:	f7f6 fc38 	bl	800016c <__adddf3>
 80098fc:	4622      	mov	r2, r4
 80098fe:	462b      	mov	r3, r5
 8009900:	f7f6 fdea 	bl	80004d8 <__aeabi_dmul>
 8009904:	f1ba 3fff 	cmp.w	sl, #4294967295
 8009908:	4602      	mov	r2, r0
 800990a:	460b      	mov	r3, r1
 800990c:	d144      	bne.n	8009998 <atan+0x240>
 800990e:	4620      	mov	r0, r4
 8009910:	4629      	mov	r1, r5
 8009912:	f7f6 fc29 	bl	8000168 <__aeabi_dsub>
 8009916:	e734      	b.n	8009782 <atan+0x2a>
 8009918:	2200      	movs	r2, #0
 800991a:	4b4c      	ldr	r3, [pc, #304]	; (8009a4c <atan+0x2f4>)
 800991c:	f7f6 fc24 	bl	8000168 <__aeabi_dsub>
 8009920:	2200      	movs	r2, #0
 8009922:	4606      	mov	r6, r0
 8009924:	460f      	mov	r7, r1
 8009926:	4b49      	ldr	r3, [pc, #292]	; (8009a4c <atan+0x2f4>)
 8009928:	4620      	mov	r0, r4
 800992a:	4629      	mov	r1, r5
 800992c:	f7f6 fc1e 	bl	800016c <__adddf3>
 8009930:	4602      	mov	r2, r0
 8009932:	460b      	mov	r3, r1
 8009934:	4630      	mov	r0, r6
 8009936:	4639      	mov	r1, r7
 8009938:	f7f6 fef8 	bl	800072c <__aeabi_ddiv>
 800993c:	f04f 0a01 	mov.w	sl, #1
 8009940:	4604      	mov	r4, r0
 8009942:	460d      	mov	r5, r1
 8009944:	e767      	b.n	8009816 <atan+0xbe>
 8009946:	4b43      	ldr	r3, [pc, #268]	; (8009a54 <atan+0x2fc>)
 8009948:	429e      	cmp	r6, r3
 800994a:	dc1a      	bgt.n	8009982 <atan+0x22a>
 800994c:	2200      	movs	r2, #0
 800994e:	4b42      	ldr	r3, [pc, #264]	; (8009a58 <atan+0x300>)
 8009950:	f7f6 fc0a 	bl	8000168 <__aeabi_dsub>
 8009954:	2200      	movs	r2, #0
 8009956:	4606      	mov	r6, r0
 8009958:	460f      	mov	r7, r1
 800995a:	4b3f      	ldr	r3, [pc, #252]	; (8009a58 <atan+0x300>)
 800995c:	4620      	mov	r0, r4
 800995e:	4629      	mov	r1, r5
 8009960:	f7f6 fdba 	bl	80004d8 <__aeabi_dmul>
 8009964:	2200      	movs	r2, #0
 8009966:	4b39      	ldr	r3, [pc, #228]	; (8009a4c <atan+0x2f4>)
 8009968:	f7f6 fc00 	bl	800016c <__adddf3>
 800996c:	4602      	mov	r2, r0
 800996e:	460b      	mov	r3, r1
 8009970:	4630      	mov	r0, r6
 8009972:	4639      	mov	r1, r7
 8009974:	f7f6 feda 	bl	800072c <__aeabi_ddiv>
 8009978:	f04f 0a02 	mov.w	sl, #2
 800997c:	4604      	mov	r4, r0
 800997e:	460d      	mov	r5, r1
 8009980:	e749      	b.n	8009816 <atan+0xbe>
 8009982:	4602      	mov	r2, r0
 8009984:	460b      	mov	r3, r1
 8009986:	2000      	movs	r0, #0
 8009988:	4934      	ldr	r1, [pc, #208]	; (8009a5c <atan+0x304>)
 800998a:	f7f6 fecf 	bl	800072c <__aeabi_ddiv>
 800998e:	f04f 0a03 	mov.w	sl, #3
 8009992:	4604      	mov	r4, r0
 8009994:	460d      	mov	r5, r1
 8009996:	e73e      	b.n	8009816 <atan+0xbe>
 8009998:	4b31      	ldr	r3, [pc, #196]	; (8009a60 <atan+0x308>)
 800999a:	4e32      	ldr	r6, [pc, #200]	; (8009a64 <atan+0x30c>)
 800999c:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 80099a0:	4456      	add	r6, sl
 80099a2:	449a      	add	sl, r3
 80099a4:	e9da 2300 	ldrd	r2, r3, [sl]
 80099a8:	f7f6 fbde 	bl	8000168 <__aeabi_dsub>
 80099ac:	4622      	mov	r2, r4
 80099ae:	462b      	mov	r3, r5
 80099b0:	f7f6 fbda 	bl	8000168 <__aeabi_dsub>
 80099b4:	4602      	mov	r2, r0
 80099b6:	460b      	mov	r3, r1
 80099b8:	e9d6 0100 	ldrd	r0, r1, [r6]
 80099bc:	f7f6 fbd4 	bl	8000168 <__aeabi_dsub>
 80099c0:	f1bb 0f00 	cmp.w	fp, #0
 80099c4:	4604      	mov	r4, r0
 80099c6:	460d      	mov	r5, r1
 80099c8:	f6bf aee4 	bge.w	8009794 <atan+0x3c>
 80099cc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80099d0:	461d      	mov	r5, r3
 80099d2:	e6df      	b.n	8009794 <atan+0x3c>
 80099d4:	4d24      	ldr	r5, [pc, #144]	; (8009a68 <atan+0x310>)
 80099d6:	e6dd      	b.n	8009794 <atan+0x3c>
 80099d8:	8800759c 	.word	0x8800759c
 80099dc:	7e37e43c 	.word	0x7e37e43c
 80099e0:	e322da11 	.word	0xe322da11
 80099e4:	3f90ad3a 	.word	0x3f90ad3a
 80099e8:	24760deb 	.word	0x24760deb
 80099ec:	3fa97b4b 	.word	0x3fa97b4b
 80099f0:	a0d03d51 	.word	0xa0d03d51
 80099f4:	3fb10d66 	.word	0x3fb10d66
 80099f8:	c54c206e 	.word	0xc54c206e
 80099fc:	3fb745cd 	.word	0x3fb745cd
 8009a00:	920083ff 	.word	0x920083ff
 8009a04:	3fc24924 	.word	0x3fc24924
 8009a08:	5555550d 	.word	0x5555550d
 8009a0c:	3fd55555 	.word	0x3fd55555
 8009a10:	2c6a6c2f 	.word	0x2c6a6c2f
 8009a14:	bfa2b444 	.word	0xbfa2b444
 8009a18:	52defd9a 	.word	0x52defd9a
 8009a1c:	3fadde2d 	.word	0x3fadde2d
 8009a20:	af749a6d 	.word	0xaf749a6d
 8009a24:	3fb3b0f2 	.word	0x3fb3b0f2
 8009a28:	fe231671 	.word	0xfe231671
 8009a2c:	3fbc71c6 	.word	0x3fbc71c6
 8009a30:	9998ebc4 	.word	0x9998ebc4
 8009a34:	3fc99999 	.word	0x3fc99999
 8009a38:	440fffff 	.word	0x440fffff
 8009a3c:	7ff00000 	.word	0x7ff00000
 8009a40:	54442d18 	.word	0x54442d18
 8009a44:	3ff921fb 	.word	0x3ff921fb
 8009a48:	3fdbffff 	.word	0x3fdbffff
 8009a4c:	3ff00000 	.word	0x3ff00000
 8009a50:	3ff2ffff 	.word	0x3ff2ffff
 8009a54:	40037fff 	.word	0x40037fff
 8009a58:	3ff80000 	.word	0x3ff80000
 8009a5c:	bff00000 	.word	0xbff00000
 8009a60:	0800a2f8 	.word	0x0800a2f8
 8009a64:	0800a2d8 	.word	0x0800a2d8
 8009a68:	bff921fb 	.word	0xbff921fb

08009a6c <fabs>:
 8009a6c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009a70:	4619      	mov	r1, r3
 8009a72:	4770      	bx	lr

08009a74 <atan2>:
 8009a74:	f000 b854 	b.w	8009b20 <__ieee754_atan2>

08009a78 <sqrt>:
 8009a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a7c:	b08b      	sub	sp, #44	; 0x2c
 8009a7e:	4604      	mov	r4, r0
 8009a80:	460d      	mov	r5, r1
 8009a82:	f000 f92b 	bl	8009cdc <__ieee754_sqrt>
 8009a86:	4b24      	ldr	r3, [pc, #144]	; (8009b18 <sqrt+0xa0>)
 8009a88:	4680      	mov	r8, r0
 8009a8a:	f993 a000 	ldrsb.w	sl, [r3]
 8009a8e:	4689      	mov	r9, r1
 8009a90:	f1ba 3fff 	cmp.w	sl, #4294967295
 8009a94:	d02b      	beq.n	8009aee <sqrt+0x76>
 8009a96:	4622      	mov	r2, r4
 8009a98:	462b      	mov	r3, r5
 8009a9a:	4620      	mov	r0, r4
 8009a9c:	4629      	mov	r1, r5
 8009a9e:	f7f6 ffb5 	bl	8000a0c <__aeabi_dcmpun>
 8009aa2:	4683      	mov	fp, r0
 8009aa4:	bb18      	cbnz	r0, 8009aee <sqrt+0x76>
 8009aa6:	2600      	movs	r6, #0
 8009aa8:	2700      	movs	r7, #0
 8009aaa:	4632      	mov	r2, r6
 8009aac:	463b      	mov	r3, r7
 8009aae:	4620      	mov	r0, r4
 8009ab0:	4629      	mov	r1, r5
 8009ab2:	f7f6 ff83 	bl	80009bc <__aeabi_dcmplt>
 8009ab6:	b1d0      	cbz	r0, 8009aee <sqrt+0x76>
 8009ab8:	2301      	movs	r3, #1
 8009aba:	9300      	str	r3, [sp, #0]
 8009abc:	4b17      	ldr	r3, [pc, #92]	; (8009b1c <sqrt+0xa4>)
 8009abe:	f8cd b020 	str.w	fp, [sp, #32]
 8009ac2:	9301      	str	r3, [sp, #4]
 8009ac4:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8009ac8:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8009acc:	f1ba 0f00 	cmp.w	sl, #0
 8009ad0:	d112      	bne.n	8009af8 <sqrt+0x80>
 8009ad2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009ad6:	4668      	mov	r0, sp
 8009ad8:	f000 f9ac 	bl	8009e34 <matherr>
 8009adc:	b1b8      	cbz	r0, 8009b0e <sqrt+0x96>
 8009ade:	9b08      	ldr	r3, [sp, #32]
 8009ae0:	b11b      	cbz	r3, 8009aea <sqrt+0x72>
 8009ae2:	f7ff f8c7 	bl	8008c74 <__errno>
 8009ae6:	9b08      	ldr	r3, [sp, #32]
 8009ae8:	6003      	str	r3, [r0, #0]
 8009aea:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8009aee:	4640      	mov	r0, r8
 8009af0:	4649      	mov	r1, r9
 8009af2:	b00b      	add	sp, #44	; 0x2c
 8009af4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009af8:	4632      	mov	r2, r6
 8009afa:	463b      	mov	r3, r7
 8009afc:	4630      	mov	r0, r6
 8009afe:	4639      	mov	r1, r7
 8009b00:	f7f6 fe14 	bl	800072c <__aeabi_ddiv>
 8009b04:	f1ba 0f02 	cmp.w	sl, #2
 8009b08:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009b0c:	d1e3      	bne.n	8009ad6 <sqrt+0x5e>
 8009b0e:	f7ff f8b1 	bl	8008c74 <__errno>
 8009b12:	2321      	movs	r3, #33	; 0x21
 8009b14:	6003      	str	r3, [r0, #0]
 8009b16:	e7e2      	b.n	8009ade <sqrt+0x66>
 8009b18:	20000234 	.word	0x20000234
 8009b1c:	0800a318 	.word	0x0800a318

08009b20 <__ieee754_atan2>:
 8009b20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b24:	4256      	negs	r6, r2
 8009b26:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 8009b2a:	4316      	orrs	r6, r2
 8009b2c:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 8009cd8 <__ieee754_atan2+0x1b8>
 8009b30:	ea4c 76d6 	orr.w	r6, ip, r6, lsr #31
 8009b34:	454e      	cmp	r6, r9
 8009b36:	4604      	mov	r4, r0
 8009b38:	460d      	mov	r5, r1
 8009b3a:	469e      	mov	lr, r3
 8009b3c:	d808      	bhi.n	8009b50 <__ieee754_atan2+0x30>
 8009b3e:	4246      	negs	r6, r0
 8009b40:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8009b44:	4306      	orrs	r6, r0
 8009b46:	ea47 76d6 	orr.w	r6, r7, r6, lsr #31
 8009b4a:	454e      	cmp	r6, r9
 8009b4c:	4688      	mov	r8, r1
 8009b4e:	d906      	bls.n	8009b5e <__ieee754_atan2+0x3e>
 8009b50:	4620      	mov	r0, r4
 8009b52:	4629      	mov	r1, r5
 8009b54:	f7f6 fb0a 	bl	800016c <__adddf3>
 8009b58:	4604      	mov	r4, r0
 8009b5a:	460d      	mov	r5, r1
 8009b5c:	e030      	b.n	8009bc0 <__ieee754_atan2+0xa0>
 8009b5e:	f103 4640 	add.w	r6, r3, #3221225472	; 0xc0000000
 8009b62:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 8009b66:	4316      	orrs	r6, r2
 8009b68:	d103      	bne.n	8009b72 <__ieee754_atan2+0x52>
 8009b6a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b6e:	f7ff bdf3 	b.w	8009758 <atan>
 8009b72:	179e      	asrs	r6, r3, #30
 8009b74:	f006 0602 	and.w	r6, r6, #2
 8009b78:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 8009b7c:	ea57 0100 	orrs.w	r1, r7, r0
 8009b80:	d107      	bne.n	8009b92 <__ieee754_atan2+0x72>
 8009b82:	2e02      	cmp	r6, #2
 8009b84:	d079      	beq.n	8009c7a <__ieee754_atan2+0x15a>
 8009b86:	2e03      	cmp	r6, #3
 8009b88:	d11a      	bne.n	8009bc0 <__ieee754_atan2+0xa0>
 8009b8a:	a541      	add	r5, pc, #260	; (adr r5, 8009c90 <__ieee754_atan2+0x170>)
 8009b8c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009b90:	e016      	b.n	8009bc0 <__ieee754_atan2+0xa0>
 8009b92:	ea5c 0102 	orrs.w	r1, ip, r2
 8009b96:	d106      	bne.n	8009ba6 <__ieee754_atan2+0x86>
 8009b98:	f1b8 0f00 	cmp.w	r8, #0
 8009b9c:	da71      	bge.n	8009c82 <__ieee754_atan2+0x162>
 8009b9e:	a53e      	add	r5, pc, #248	; (adr r5, 8009c98 <__ieee754_atan2+0x178>)
 8009ba0:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009ba4:	e00c      	b.n	8009bc0 <__ieee754_atan2+0xa0>
 8009ba6:	45cc      	cmp	ip, r9
 8009ba8:	d123      	bne.n	8009bf2 <__ieee754_atan2+0xd2>
 8009baa:	4567      	cmp	r7, ip
 8009bac:	d114      	bne.n	8009bd8 <__ieee754_atan2+0xb8>
 8009bae:	2e02      	cmp	r6, #2
 8009bb0:	d00a      	beq.n	8009bc8 <__ieee754_atan2+0xa8>
 8009bb2:	2e03      	cmp	r6, #3
 8009bb4:	d00c      	beq.n	8009bd0 <__ieee754_atan2+0xb0>
 8009bb6:	2e01      	cmp	r6, #1
 8009bb8:	d15b      	bne.n	8009c72 <__ieee754_atan2+0x152>
 8009bba:	a539      	add	r5, pc, #228	; (adr r5, 8009ca0 <__ieee754_atan2+0x180>)
 8009bbc:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009bc0:	4620      	mov	r0, r4
 8009bc2:	4629      	mov	r1, r5
 8009bc4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bc8:	a537      	add	r5, pc, #220	; (adr r5, 8009ca8 <__ieee754_atan2+0x188>)
 8009bca:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009bce:	e7f7      	b.n	8009bc0 <__ieee754_atan2+0xa0>
 8009bd0:	a537      	add	r5, pc, #220	; (adr r5, 8009cb0 <__ieee754_atan2+0x190>)
 8009bd2:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009bd6:	e7f3      	b.n	8009bc0 <__ieee754_atan2+0xa0>
 8009bd8:	2e02      	cmp	r6, #2
 8009bda:	d04e      	beq.n	8009c7a <__ieee754_atan2+0x15a>
 8009bdc:	2e03      	cmp	r6, #3
 8009bde:	d0d4      	beq.n	8009b8a <__ieee754_atan2+0x6a>
 8009be0:	2e01      	cmp	r6, #1
 8009be2:	f04f 0400 	mov.w	r4, #0
 8009be6:	d102      	bne.n	8009bee <__ieee754_atan2+0xce>
 8009be8:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 8009bec:	e7e8      	b.n	8009bc0 <__ieee754_atan2+0xa0>
 8009bee:	2500      	movs	r5, #0
 8009bf0:	e7e6      	b.n	8009bc0 <__ieee754_atan2+0xa0>
 8009bf2:	454f      	cmp	r7, r9
 8009bf4:	d0d0      	beq.n	8009b98 <__ieee754_atan2+0x78>
 8009bf6:	eba7 070c 	sub.w	r7, r7, ip
 8009bfa:	153f      	asrs	r7, r7, #20
 8009bfc:	2f3c      	cmp	r7, #60	; 0x3c
 8009bfe:	dc1e      	bgt.n	8009c3e <__ieee754_atan2+0x11e>
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	da01      	bge.n	8009c08 <__ieee754_atan2+0xe8>
 8009c04:	373c      	adds	r7, #60	; 0x3c
 8009c06:	db1e      	blt.n	8009c46 <__ieee754_atan2+0x126>
 8009c08:	4620      	mov	r0, r4
 8009c0a:	4629      	mov	r1, r5
 8009c0c:	f7f6 fd8e 	bl	800072c <__aeabi_ddiv>
 8009c10:	f7ff ff2c 	bl	8009a6c <fabs>
 8009c14:	f7ff fda0 	bl	8009758 <atan>
 8009c18:	4604      	mov	r4, r0
 8009c1a:	460d      	mov	r5, r1
 8009c1c:	2e01      	cmp	r6, #1
 8009c1e:	d015      	beq.n	8009c4c <__ieee754_atan2+0x12c>
 8009c20:	2e02      	cmp	r6, #2
 8009c22:	d017      	beq.n	8009c54 <__ieee754_atan2+0x134>
 8009c24:	2e00      	cmp	r6, #0
 8009c26:	d0cb      	beq.n	8009bc0 <__ieee754_atan2+0xa0>
 8009c28:	a323      	add	r3, pc, #140	; (adr r3, 8009cb8 <__ieee754_atan2+0x198>)
 8009c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c2e:	4620      	mov	r0, r4
 8009c30:	4629      	mov	r1, r5
 8009c32:	f7f6 fa99 	bl	8000168 <__aeabi_dsub>
 8009c36:	a322      	add	r3, pc, #136	; (adr r3, 8009cc0 <__ieee754_atan2+0x1a0>)
 8009c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c3c:	e016      	b.n	8009c6c <__ieee754_atan2+0x14c>
 8009c3e:	a522      	add	r5, pc, #136	; (adr r5, 8009cc8 <__ieee754_atan2+0x1a8>)
 8009c40:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009c44:	e7ea      	b.n	8009c1c <__ieee754_atan2+0xfc>
 8009c46:	2400      	movs	r4, #0
 8009c48:	2500      	movs	r5, #0
 8009c4a:	e7e7      	b.n	8009c1c <__ieee754_atan2+0xfc>
 8009c4c:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8009c50:	461d      	mov	r5, r3
 8009c52:	e7b5      	b.n	8009bc0 <__ieee754_atan2+0xa0>
 8009c54:	a318      	add	r3, pc, #96	; (adr r3, 8009cb8 <__ieee754_atan2+0x198>)
 8009c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c5a:	4620      	mov	r0, r4
 8009c5c:	4629      	mov	r1, r5
 8009c5e:	f7f6 fa83 	bl	8000168 <__aeabi_dsub>
 8009c62:	4602      	mov	r2, r0
 8009c64:	460b      	mov	r3, r1
 8009c66:	a116      	add	r1, pc, #88	; (adr r1, 8009cc0 <__ieee754_atan2+0x1a0>)
 8009c68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c6c:	f7f6 fa7c 	bl	8000168 <__aeabi_dsub>
 8009c70:	e772      	b.n	8009b58 <__ieee754_atan2+0x38>
 8009c72:	a517      	add	r5, pc, #92	; (adr r5, 8009cd0 <__ieee754_atan2+0x1b0>)
 8009c74:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009c78:	e7a2      	b.n	8009bc0 <__ieee754_atan2+0xa0>
 8009c7a:	a511      	add	r5, pc, #68	; (adr r5, 8009cc0 <__ieee754_atan2+0x1a0>)
 8009c7c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009c80:	e79e      	b.n	8009bc0 <__ieee754_atan2+0xa0>
 8009c82:	a511      	add	r5, pc, #68	; (adr r5, 8009cc8 <__ieee754_atan2+0x1a8>)
 8009c84:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009c88:	e79a      	b.n	8009bc0 <__ieee754_atan2+0xa0>
 8009c8a:	bf00      	nop
 8009c8c:	f3af 8000 	nop.w
 8009c90:	54442d18 	.word	0x54442d18
 8009c94:	c00921fb 	.word	0xc00921fb
 8009c98:	54442d18 	.word	0x54442d18
 8009c9c:	bff921fb 	.word	0xbff921fb
 8009ca0:	54442d18 	.word	0x54442d18
 8009ca4:	bfe921fb 	.word	0xbfe921fb
 8009ca8:	7f3321d2 	.word	0x7f3321d2
 8009cac:	4002d97c 	.word	0x4002d97c
 8009cb0:	7f3321d2 	.word	0x7f3321d2
 8009cb4:	c002d97c 	.word	0xc002d97c
 8009cb8:	33145c07 	.word	0x33145c07
 8009cbc:	3ca1a626 	.word	0x3ca1a626
 8009cc0:	54442d18 	.word	0x54442d18
 8009cc4:	400921fb 	.word	0x400921fb
 8009cc8:	54442d18 	.word	0x54442d18
 8009ccc:	3ff921fb 	.word	0x3ff921fb
 8009cd0:	54442d18 	.word	0x54442d18
 8009cd4:	3fe921fb 	.word	0x3fe921fb
 8009cd8:	7ff00000 	.word	0x7ff00000

08009cdc <__ieee754_sqrt>:
 8009cdc:	4b54      	ldr	r3, [pc, #336]	; (8009e30 <__ieee754_sqrt+0x154>)
 8009cde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ce2:	438b      	bics	r3, r1
 8009ce4:	4606      	mov	r6, r0
 8009ce6:	460d      	mov	r5, r1
 8009ce8:	460a      	mov	r2, r1
 8009cea:	460c      	mov	r4, r1
 8009cec:	d10f      	bne.n	8009d0e <__ieee754_sqrt+0x32>
 8009cee:	4602      	mov	r2, r0
 8009cf0:	460b      	mov	r3, r1
 8009cf2:	f7f6 fbf1 	bl	80004d8 <__aeabi_dmul>
 8009cf6:	4602      	mov	r2, r0
 8009cf8:	460b      	mov	r3, r1
 8009cfa:	4630      	mov	r0, r6
 8009cfc:	4629      	mov	r1, r5
 8009cfe:	f7f6 fa35 	bl	800016c <__adddf3>
 8009d02:	4606      	mov	r6, r0
 8009d04:	460d      	mov	r5, r1
 8009d06:	4630      	mov	r0, r6
 8009d08:	4629      	mov	r1, r5
 8009d0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d0e:	2900      	cmp	r1, #0
 8009d10:	4607      	mov	r7, r0
 8009d12:	4603      	mov	r3, r0
 8009d14:	dc0e      	bgt.n	8009d34 <__ieee754_sqrt+0x58>
 8009d16:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8009d1a:	ea5c 0707 	orrs.w	r7, ip, r7
 8009d1e:	d0f2      	beq.n	8009d06 <__ieee754_sqrt+0x2a>
 8009d20:	b141      	cbz	r1, 8009d34 <__ieee754_sqrt+0x58>
 8009d22:	4602      	mov	r2, r0
 8009d24:	460b      	mov	r3, r1
 8009d26:	f7f6 fa1f 	bl	8000168 <__aeabi_dsub>
 8009d2a:	4602      	mov	r2, r0
 8009d2c:	460b      	mov	r3, r1
 8009d2e:	f7f6 fcfd 	bl	800072c <__aeabi_ddiv>
 8009d32:	e7e6      	b.n	8009d02 <__ieee754_sqrt+0x26>
 8009d34:	1512      	asrs	r2, r2, #20
 8009d36:	d074      	beq.n	8009e22 <__ieee754_sqrt+0x146>
 8009d38:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8009d3c:	07d5      	lsls	r5, r2, #31
 8009d3e:	f04f 0500 	mov.w	r5, #0
 8009d42:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009d46:	bf48      	it	mi
 8009d48:	0fd9      	lsrmi	r1, r3, #31
 8009d4a:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 8009d4e:	bf44      	itt	mi
 8009d50:	005b      	lslmi	r3, r3, #1
 8009d52:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 8009d56:	1051      	asrs	r1, r2, #1
 8009d58:	0fda      	lsrs	r2, r3, #31
 8009d5a:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8009d5e:	4628      	mov	r0, r5
 8009d60:	2216      	movs	r2, #22
 8009d62:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8009d66:	005b      	lsls	r3, r3, #1
 8009d68:	1987      	adds	r7, r0, r6
 8009d6a:	42a7      	cmp	r7, r4
 8009d6c:	bfde      	ittt	le
 8009d6e:	19b8      	addle	r0, r7, r6
 8009d70:	1be4      	suble	r4, r4, r7
 8009d72:	19ad      	addle	r5, r5, r6
 8009d74:	0fdf      	lsrs	r7, r3, #31
 8009d76:	3a01      	subs	r2, #1
 8009d78:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 8009d7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009d80:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009d84:	d1f0      	bne.n	8009d68 <__ieee754_sqrt+0x8c>
 8009d86:	f04f 0c20 	mov.w	ip, #32
 8009d8a:	4696      	mov	lr, r2
 8009d8c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8009d90:	4284      	cmp	r4, r0
 8009d92:	eb06 070e 	add.w	r7, r6, lr
 8009d96:	dc02      	bgt.n	8009d9e <__ieee754_sqrt+0xc2>
 8009d98:	d112      	bne.n	8009dc0 <__ieee754_sqrt+0xe4>
 8009d9a:	429f      	cmp	r7, r3
 8009d9c:	d810      	bhi.n	8009dc0 <__ieee754_sqrt+0xe4>
 8009d9e:	2f00      	cmp	r7, #0
 8009da0:	eb07 0e06 	add.w	lr, r7, r6
 8009da4:	da42      	bge.n	8009e2c <__ieee754_sqrt+0x150>
 8009da6:	f1be 0f00 	cmp.w	lr, #0
 8009daa:	db3f      	blt.n	8009e2c <__ieee754_sqrt+0x150>
 8009dac:	f100 0801 	add.w	r8, r0, #1
 8009db0:	1a24      	subs	r4, r4, r0
 8009db2:	4640      	mov	r0, r8
 8009db4:	429f      	cmp	r7, r3
 8009db6:	bf88      	it	hi
 8009db8:	f104 34ff 	addhi.w	r4, r4, #4294967295
 8009dbc:	1bdb      	subs	r3, r3, r7
 8009dbe:	4432      	add	r2, r6
 8009dc0:	0064      	lsls	r4, r4, #1
 8009dc2:	f1bc 0c01 	subs.w	ip, ip, #1
 8009dc6:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 8009dca:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009dce:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009dd2:	d1dd      	bne.n	8009d90 <__ieee754_sqrt+0xb4>
 8009dd4:	4323      	orrs	r3, r4
 8009dd6:	d006      	beq.n	8009de6 <__ieee754_sqrt+0x10a>
 8009dd8:	1c54      	adds	r4, r2, #1
 8009dda:	bf0b      	itete	eq
 8009ddc:	4662      	moveq	r2, ip
 8009dde:	3201      	addne	r2, #1
 8009de0:	3501      	addeq	r5, #1
 8009de2:	f022 0201 	bicne.w	r2, r2, #1
 8009de6:	106b      	asrs	r3, r5, #1
 8009de8:	0852      	lsrs	r2, r2, #1
 8009dea:	07e8      	lsls	r0, r5, #31
 8009dec:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8009df0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8009df4:	bf48      	it	mi
 8009df6:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8009dfa:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 8009dfe:	4616      	mov	r6, r2
 8009e00:	e781      	b.n	8009d06 <__ieee754_sqrt+0x2a>
 8009e02:	0adc      	lsrs	r4, r3, #11
 8009e04:	3915      	subs	r1, #21
 8009e06:	055b      	lsls	r3, r3, #21
 8009e08:	2c00      	cmp	r4, #0
 8009e0a:	d0fa      	beq.n	8009e02 <__ieee754_sqrt+0x126>
 8009e0c:	02e6      	lsls	r6, r4, #11
 8009e0e:	d50a      	bpl.n	8009e26 <__ieee754_sqrt+0x14a>
 8009e10:	f1c2 0020 	rsb	r0, r2, #32
 8009e14:	fa23 f000 	lsr.w	r0, r3, r0
 8009e18:	1e55      	subs	r5, r2, #1
 8009e1a:	4093      	lsls	r3, r2
 8009e1c:	4304      	orrs	r4, r0
 8009e1e:	1b4a      	subs	r2, r1, r5
 8009e20:	e78a      	b.n	8009d38 <__ieee754_sqrt+0x5c>
 8009e22:	4611      	mov	r1, r2
 8009e24:	e7f0      	b.n	8009e08 <__ieee754_sqrt+0x12c>
 8009e26:	0064      	lsls	r4, r4, #1
 8009e28:	3201      	adds	r2, #1
 8009e2a:	e7ef      	b.n	8009e0c <__ieee754_sqrt+0x130>
 8009e2c:	4680      	mov	r8, r0
 8009e2e:	e7bf      	b.n	8009db0 <__ieee754_sqrt+0xd4>
 8009e30:	7ff00000 	.word	0x7ff00000

08009e34 <matherr>:
 8009e34:	2000      	movs	r0, #0
 8009e36:	4770      	bx	lr

08009e38 <_init>:
 8009e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e3a:	bf00      	nop
 8009e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e3e:	bc08      	pop	{r3}
 8009e40:	469e      	mov	lr, r3
 8009e42:	4770      	bx	lr

08009e44 <_fini>:
 8009e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e46:	bf00      	nop
 8009e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e4a:	bc08      	pop	{r3}
 8009e4c:	469e      	mov	lr, r3
 8009e4e:	4770      	bx	lr
